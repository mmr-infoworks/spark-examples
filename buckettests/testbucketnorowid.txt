scala> testbucket.filter("ziw_row_id = '91c36e90096e5b5b6d5jhihide85077018406'").take(10)
17/11/03 08:48:55 INFO SparkSqlParser: Parsing command: ziw_row_id = '91c36e90096e5b5b6d5jhihide85077018406'
17/11/03 08:48:55 DEBUG Analyzer$ResolveReferences: Resolving 'ziw_row_id to ziw_row_id#71
17/11/03 08:48:55 DEBUG HiveSessionState$$anon$1: 
=== Result of Batch Resolution ===
!'Filter ('ziw_row_id = 91c36e90096e5b5b6d5jhihideilter (ziw_row_id#71 = 91c36e90096e5b5b6d5jhihide85077018406)
 +- Project [c_customer_sk#0, c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_shipto_date_sk#5, c_first_sales_date_sk#6, c_first_name#7, c_last_name#8, c_preferred_cust_flag#9, c_birth_day#10, c_birth_month#11, c_birth_year#12, c_birth_country#13, c_login#14, c_email_address#15, c_last_review_date#16, c_customer_sk__customer#17, c_customer_id__customer#18, c_current_cdemo_sk__customer#19, c_current_hdemo_sk__customer#20, c_current_addr_sk__customer#21, c_first_shipto_date_sk__customer#22, c_first_sales_date_sk__customer#23, ... 52 more fields]   +- Project [c_customer_sk#0, c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_shipto_date_sk#5, c_first_sales_date_sk#6, c_first_name#7, c_last_name#8, c_preferred_cust_flag#9, c_birth_day#10, c_birth_month#11, c_birth_year#12, c_birth_country#13, c_login#14, c_email_address#15, c_last_review_date#16, c_customer_sk__customer#17, c_customer_id__customer#18, c_current_cdemo_sk__customer#19, c_current_hdemo_sk__customer#20, c_current_addr_sk__customer#21, c_first_shipto_date_sk__customer#22, c_first_sales_date_sk__customer#23, ... 52 more fields]
    +- SubqueryAlias testbucketubqueryAlias testbucket
       +- Relation[c_customer_sk#0,c_customer_id#1,c_current_cdemo_sk#2,c_current_hdemo_sk#3,c_current_addr_sk#4,c_first_shipto_date_sk#5,c_first_sales_date_sk#6,c_first_name#7,c_last_name#8,c_preferred_cust_flag#9,c_birth_day#10,c_birth_month#11,c_birth_year#12,c_birth_country#13,c_login#14,c_email_address#15,c_last_review_date#16,c_customer_sk__customer#17,c_customer_id__customer#18,c_current_cdemo_sk__customer#19,c_current_hdemo_sk__customer#20,c_current_addr_sk__customer#21,c_first_shipto_date_sk__customer#22,c_first_sales_date_sk__customer#23,... 52 more fields] orc                       +- Relation[c_customer_sk#0,c_customer_id#1,c_current_cdemo_sk#2,c_current_hdemo_sk#3,c_current_addr_sk#4,c_first_shipto_date_sk#5,c_first_sales_date_sk#6,c_first_name#7,c_last_name#8,c_preferred_cust_flag#9,c_birth_day#10,c_birth_month#11,c_birth_year#12,c_birth_country#13,c_login#14,c_email_address#15,c_last_review_date#16,c_customer_sk__customer#17,c_customer_id__customer#18,c_current_cdemo_sk__customer#19,c_current_hdemo_sk__customer#20,c_current_addr_sk__customer#21,c_first_shipto_date_sk__customer#22,c_first_sales_date_sk__customer#23,... 52 more fields] orc
        
17/11/03 08:48:55 DEBUG HiveSessionState$$anon$1: 
=== Result of Batch Resolution ===
!'DeserializeToObject unresolveddeserializer(createexternalrow(getcolumnbyordinal(0, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(1, StringType).toString, getcolumnbyordinal(2, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(3, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(4, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(5, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(6, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(7, StringType).toString, getcolumnbyordinal(8, StringType).toString, getcolumnbyordinal(9, StringType).toString, getcolumnbyordinal(10, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(11, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(12, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(13, StringType).toString, getcolumnbyordinal(14, StringType).toString, getcolumnbyordinal(15, StringType).toString, getcolumnbyordinal(16, StringType).toString, getcolumnbyordinal(17, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(18, StringType).toString, getcolumnbyordinal(19, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(20, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(21, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(22, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(23, DecimalType(38,0)).toJavaBigDecimal, ... 128 more fields)), obj#231: org.apache.spark.sql.Row   DeserializeToObject createexternalrow(c_customer_sk#0.toJavaBigDecimal, c_customer_id#1.toString, c_current_cdemo_sk#2.toJavaBigDecimal, c_current_hdemo_sk#3.toJavaBigDecimal, c_current_addr_sk#4.toJavaBigDecimal, c_first_shipto_date_sk#5.toJavaBigDecimal, c_first_sales_date_sk#6.toJavaBigDecimal, c_first_name#7.toString, c_last_name#8.toString, c_preferred_cust_flag#9.toString, c_birth_day#10.toJavaBigDecimal, c_birth_month#11.toJavaBigDecimal, c_birth_year#12.toJavaBigDecimal, c_birth_country#13.toString, c_login#14.toString, c_email_address#15.toString, c_last_review_date#16.toString, c_customer_sk__customer#17.toJavaBigDecimal, c_customer_id__customer#18.toString, c_current_cdemo_sk__customer#19.toJavaBigDecimal, c_current_hdemo_sk__customer#20.toJavaBigDecimal, c_current_addr_sk__customer#21.toJavaBigDecimal, c_first_shipto_date_sk__customer#22.toJavaBigDecimal, c_first_sales_date_sk__customer#23.toJavaBigDecimal, ... 128 more fields), obj#231: org.apache.spark.sql.Row
 +- LocalRelation <empty>, [c_customer_sk#0, c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_shipto_date_sk#5, c_first_sales_date_sk#6, c_first_name#7, c_last_name#8, c_preferred_cust_flag#9, c_birth_day#10, c_birth_month#11, c_birth_year#12, c_birth_country#13, c_login#14, c_email_address#15, c_last_review_date#16, c_customer_sk__customer#17, c_customer_id__customer#18, c_current_cdemo_sk__customer#19, c_current_hdemo_sk__customer#20, c_current_addr_sk__customer#21, c_first_shipto_date_sk__customer#22, c_first_sales_date_sk__customer#23, ... 52 more fieldsocalRelation <empty>, [c_customer_sk#0, c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_shipto_date_sk#5, c_first_sales_date_sk#6, c_first_name#7, c_last_name#8, c_preferred_cust_flag#9, c_birth_day#10, c_birth_month#11, c_birth_year#12, c_birth_country#13, c_login#14, c_email_address#15, c_last_review_date#16, c_customer_sk__customer#17, c_customer_id__customer#18, c_current_cdemo_sk__customer#19, c_current_hdemo_sk__customer#20, c_current_addr_sk__customer#21, c_first_shipto_date_sk__customer#22, c_first_sales_date_sk__customer#23, ... 52 more fields]
        
17/11/03 08:48:55 DEBUG HiveSessionState$$anon$1: 
=== Result of Batch Resolution ===
!'DeserializeToObject unresolveddeserializer(createexternalrow(getcolumnbyordinal(0, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(1, StringType).toString, getcolumnbyordinal(2, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(3, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(4, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(5, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(6, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(7, StringType).toString, getcolumnbyordinal(8, StringType).toString, getcolumnbyordinal(9, StringType).toString, getcolumnbyordinal(10, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(11, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(12, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(13, StringType).toString, getcolumnbyordinal(14, StringType).toString, getcolumnbyordinal(15, StringType).toString, getcolumnbyordinal(16, StringType).toString, getcolumnbyordinal(17, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(18, StringType).toString, getcolumnbyordinal(19, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(20, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(21, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(22, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(23, DecimalType(38,0)).toJavaBigDecimal, ... 128 more fields)), obj#232: org.apache.spark.sql.Row   DeserializeToObject createexternalrow(c_customer_sk#0.toJavaBigDecimal, c_customer_id#1.toString, c_current_cdemo_sk#2.toJavaBigDecimal, c_current_hdemo_sk#3.toJavaBigDecimal, c_current_addr_sk#4.toJavaBigDecimal, c_first_shipto_date_sk#5.toJavaBigDecimal, c_first_sales_date_sk#6.toJavaBigDecimal, c_first_name#7.toString, c_last_name#8.toString, c_preferred_cust_flag#9.toString, c_birth_day#10.toJavaBigDecimal, c_birth_month#11.toJavaBigDecimal, c_birth_year#12.toJavaBigDecimal, c_birth_country#13.toString, c_login#14.toString, c_email_address#15.toString, c_last_review_date#16.toString, c_customer_sk__customer#17.toJavaBigDecimal, c_customer_id__customer#18.toString, c_current_cdemo_sk__customer#19.toJavaBigDecimal, c_current_hdemo_sk__customer#20.toJavaBigDecimal, c_current_addr_sk__customer#21.toJavaBigDecimal, c_first_shipto_date_sk__customer#22.toJavaBigDecimal, c_first_sales_date_sk__customer#23.toJavaBigDecimal, ... 128 more fields), obj#232: org.apache.spark.sql.Row
 +- LocalRelation <empty>, [c_customer_sk#0, c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_shipto_date_sk#5, c_first_sales_date_sk#6, c_first_name#7, c_last_name#8, c_preferred_cust_flag#9, c_birth_day#10, c_birth_month#11, c_birth_year#12, c_birth_country#13, c_login#14, c_email_address#15, c_last_review_date#16, c_customer_sk__customer#17, c_customer_id__customer#18, c_current_cdemo_sk__customer#19, c_current_hdemo_sk__customer#20, c_current_addr_sk__customer#21, c_first_shipto_date_sk__customer#22, c_first_sales_date_sk__customer#23, ... 52 more fieldsocalRelation <empty>, [c_customer_sk#0, c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_shipto_date_sk#5, c_first_sales_date_sk#6, c_first_name#7, c_last_name#8, c_preferred_cust_flag#9, c_birth_day#10, c_birth_month#11, c_birth_year#12, c_birth_country#13, c_login#14, c_email_address#15, c_last_review_date#16, c_customer_sk__customer#17, c_customer_id__customer#18, c_current_cdemo_sk__customer#19, c_current_hdemo_sk__customer#20, c_current_addr_sk__customer#21, c_first_shipto_date_sk__customer#22, c_first_sales_date_sk__customer#23, ... 52 more fields]
        
17/11/03 08:48:55 DEBUG SparkOptimizer: 
=== Result of Batch Finish Analysis ===
 GlobalLimitlobalLimit 10
 +- LocalLimitocalLimit 10
    +- Filter (ziw_row_id#71 = 91c36e90096e5b5b6d5jhihideilter (ziw_row_id#71 = 91c36e90096e5b5b6d5jhihide85077018406)
       +- Project [c_customer_sk#0, c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_shipto_date_sk#5, c_first_sales_date_sk#6, c_first_name#7, c_last_name#8, c_preferred_cust_flag#9, c_birth_day#10, c_birth_month#11, c_birth_year#12, c_birth_country#13, c_login#14, c_email_address#15, c_last_review_date#16, c_customer_sk__customer#17, c_customer_id__customer#18, c_current_cdemo_sk__customer#19, c_current_hdemo_sk__customer#20, c_current_addr_sk__customer#21, c_first_shipto_date_sk__customer#22, c_first_sales_date_sk__customer#23, ... 52 more fields]         +- Project [c_customer_sk#0, c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_shipto_date_sk#5, c_first_sales_date_sk#6, c_first_name#7, c_last_name#8, c_preferred_cust_flag#9, c_birth_day#10, c_birth_month#11, c_birth_year#12, c_birth_country#13, c_login#14, c_email_address#15, c_last_review_date#16, c_customer_sk__customer#17, c_customer_id__customer#18, c_current_cdemo_sk__customer#19, c_current_hdemo_sk__customer#20, c_current_addr_sk__customer#21, c_first_shipto_date_sk__customer#22, c_first_sales_date_sk__customer#23, ... 52 more fields]
!         +- SubqueryAlias testbucketelation[c_customer_sk#0,c_customer_id#1,c_current_cdemo_sk#2,c_current_hdemo_sk#3,c_current_addr_sk#4,c_first_shipto_date_sk#5,c_first_sales_date_sk#6,c_first_name#7,c_last_name#8,c_preferred_cust_flag#9,c_birth_day#10,c_birth_month#11,c_birth_year#12,c_birth_country#13,c_login#14,c_email_address#15,c_last_review_date#16,c_customer_sk__customer#17,c_customer_id__customer#18,c_current_cdemo_sk__customer#19,c_current_hdemo_sk__customer#20,c_current_addr_sk__customer#21,c_first_shipto_date_sk__customer#22,c_first_sales_date_sk__customer#23,... 52 more fields] orc
!            +- Relation[c_customer_sk#0,c_customer_id#1,c_current_cdemo_sk#2,c_current_hdemo_sk#3,c_current_addr_sk#4,c_first_shipto_date_sk#5,c_first_sales_date_sk#6,c_first_name#7,c_last_name#8,c_preferred_cust_flag#9,c_birth_day#10,c_birth_month#11,c_birth_year#12,c_birth_country#13,c_login#14,c_email_address#15,c_last_review_date#16,c_customer_sk__customer#17,c_customer_id__customer#18,c_current_cdemo_sk__customer#19,c_current_hdemo_sk__customer#20,c_current_addr_sk__customer#21,c_first_shipto_date_sk__customer#22,c_first_sales_date_sk__customer#23,... 52 more fields] orc                 
        
17/11/03 08:48:55 DEBUG SparkOptimizer: 
=== Result of Batch Operator Optimizations ===
 GlobalLimitlobalLimit 10
 +- LocalLimitocalLimit 10
!   +- Filter (ziw_row_id#71 = 91c36e90096e5b5b6d5jhihideilter (isnotnull(ziw_row_id#71) && (ziw_row_id#71 = 91c36e90096e5b5b6d5jhihide85077018406))
!      +- Project [c_customer_sk#0, c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_shipto_date_sk#5, c_first_sales_date_sk#6, c_first_name#7, c_last_name#8, c_preferred_cust_flag#9, c_birth_day#10, c_birth_month#11, c_birth_year#12, c_birth_country#13, c_login#14, c_email_address#15, c_last_review_date#16, c_customer_sk__customer#17, c_customer_id__customer#18, c_current_cdemo_sk__customer#19, c_current_hdemo_sk__customer#20, c_current_addr_sk__customer#21, c_first_shipto_date_sk__customer#22, c_first_sales_date_sk__customer#23, ... 52 more fields]         +- Relation[c_customer_sk#0,c_customer_id#1,c_current_cdemo_sk#2,c_current_hdemo_sk#3,c_current_addr_sk#4,c_first_shipto_date_sk#5,c_first_sales_date_sk#6,c_first_name#7,c_last_name#8,c_preferred_cust_flag#9,c_birth_day#10,c_birth_month#11,c_birth_year#12,c_birth_country#13,c_login#14,c_email_address#15,c_last_review_date#16,c_customer_sk__customer#17,c_customer_id__customer#18,c_current_cdemo_sk__customer#19,c_current_hdemo_sk__customer#20,c_current_addr_sk__customer#21,c_first_shipto_date_sk__customer#22,c_first_sales_date_sk__customer#23,... 52 more fields] orc
!         +- SubqueryAlias testbucket
!            +- Relation[c_customer_sk#0,c_customer_id#1,c_current_cdemo_sk#2,c_current_hdemo_sk#3,c_current_addr_sk#4,c_first_shipto_date_sk#5,c_first_sales_date_sk#6,c_first_name#7,c_last_name#8,c_preferred_cust_flag#9,c_birth_day#10,c_birth_month#11,c_birth_year#12,c_birth_country#13,c_login#14,c_email_address#15,c_last_review_date#16,c_customer_sk__customer#17,c_customer_id__customer#18,c_current_cdemo_sk__customer#19,c_current_hdemo_sk__customer#20,c_current_addr_sk__customer#21,c_first_shipto_date_sk__customer#22,c_first_sales_date_sk__customer#23,... 52 more fields] orc                 
        
17/11/03 08:48:55 INFO FileSourceStrategy: Pruning directories with: 
17/11/03 08:48:55 INFO FileSourceStrategy: Post-Scan Filters: isnotnull(ziw_row_id#71),(ziw_row_id#71 = 91c36e90096e5b5b6d5jhihide85077018406)
17/11/03 08:48:55 INFO FileSourceStrategy: Pruned Data Schema: struct<c_customer_sk: decimal(38,0), c_customer_id: string, c_current_cdemo_sk: decimal(38,0), c_current_hdemo_sk: decimal(38,0), c_current_addr_sk: decimal(38,0) ... 74 more fields>
17/11/03 08:48:55 INFO FileSourceStrategy: Pushed Filters: IsNotNull(ziw_row_id),EqualTo(ziw_row_id,91c36e90096e5b5b6d5jhihide85077018406)
17/11/03 08:48:55 INFO MemoryStore: Block broadcast_2 stored as values in memory (estimated size 384.7 KB, free 365.5 MB)
17/11/03 08:48:55 DEBUG BlockManager: Put block broadcast_2 locally took  8 ms
17/11/03 08:48:55 DEBUG BlockManager: Putting block broadcast_2 without replication took  8 ms
17/11/03 08:48:55 INFO MemoryStore: Block broadcast_2_piece0 stored as bytes in memory (estimated size 32.5 KB, free 365.5 MB)
17/11/03 08:48:55 INFO BlockManagerInfo: Added broadcast_2_piece0 in memory on 172.30.1.247:58060 (size: 32.5 KB, free: 366.2 MB)
17/11/03 08:48:55 DEBUG BlockManagerMaster: Updated info of block broadcast_2_piece0
17/11/03 08:48:55 DEBUG BlockManager: Told master about block broadcast_2_piece0
17/11/03 08:48:55 DEBUG BlockManager: Put block broadcast_2_piece0 locally took  2 ms
17/11/03 08:48:55 DEBUG BlockManager: Putting block broadcast_2_piece0 without replication took  2 ms
17/11/03 08:48:55 INFO SparkContext: Created broadcast 2 from take at <console>:26
17/11/03 08:48:55 INFO FileSourceStrategy: Planning with 3 buckets
17/11/03 08:48:55 DEBUG DFSClient: DFSClient writeChunk allocating new packet seqno=8, src=/spark2-history/local-1509698485756.inprogress, packetSize=65016, chunksPerPacket=126, bytesCurBlock=44032
17/11/03 08:48:55 DEBUG DFSClient: DFSClient flush(): bytesCurBlock=54623 lastFlushOffset=44133 createNewBlock=false
17/11/03 08:48:55 DEBUG DFSClient: Queued packet 8
17/11/03 08:48:55 DEBUG DFSClient: Waiting for ack for: 8
17/11/03 08:48:55 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074042150_301379 sending packet packet seqno: 8 offsetInBlock: 44032 lastPacketInBlock: false lastByteOffsetInBlock: 54623
17/11/03 08:48:55 DEBUG DFSClient: DFSClient seqno: 8 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 1001930 flag: 0 flag: 0 flag: 0
17/11/03 08:48:55 DEBUG WholeStageCodegenExec: 
/* 001 */ public Object generate(Object[] references) {
/* 002 */   return new GeneratedIterator(references);
/* 003 */ }
/* 004 */
/* 005 */ final class GeneratedIterator extends org.apache.spark.sql.execution.BufferedRowIterator {
/* 006 */   private Object[] references;
/* 007 */   private org.apache.spark.sql.execution.metric.SQLMetric scan_numOutputRows;
/* 008 */   private scala.collection.Iterator scan_input;
/* 009 */   private org.apache.spark.sql.execution.metric.SQLMetric filter_numOutputRows;
/* 010 */   private UnsafeRow filter_result;
/* 011 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder filter_holder;
/* 012 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter filter_rowWriter;
/* 013 */   private UnsafeRow project_result;
/* 014 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder project_holder;
/* 015 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter project_rowWriter;
/* 016 */
/* 017 */   public GeneratedIterator(Object[] references) {
/* 018 */     this.references = references;
/* 019 */   }
/* 020 */
/* 021 */   public void init(int index, scala.collection.Iterator inputs[]) {
/* 022 */     partitionIndex = index;
/* 023 */     this.scan_numOutputRows = (org.apache.spark.sql.execution.metric.SQLMetric) references[0];
/* 024 */     scan_input = inputs[0];
/* 025 */     this.filter_numOutputRows = (org.apache.spark.sql.execution.metric.SQLMetric) references[1];
/* 026 */     filter_result = new UnsafeRow(76);
/* 027 */     this.filter_holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(filter_result, 2368);
/* 028 */     this.filter_rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(filter_holder, 76);
/* 029 */     project_result = new UnsafeRow(76);
/* 030 */     this.project_holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(project_result, 2368);
/* 031 */     this.project_rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(project_holder, 76);
/* 032 */   }
/* 033 */
/* 034 */   protected void processNext() throws java.io.IOException {
/* 035 */     while (scan_input.hasNext()) {
/* 036 */       InternalRow scan_row = (InternalRow) scan_input.next();
/* 037 */       scan_numOutputRows.add(1);
/* 038 */       boolean scan_isNull147 = scan_row.isNullAt(71);
/* 039 */       UTF8String scan_value147 = scan_isNull147 ? null : (scan_row.getUTF8String(71));
/* 040 */
/* 041 */       if (!(!(scan_isNull147))) continue;
/* 042 */
/* 043 */       boolean filter_isNull2 = false;
/* 044 */
/* 045 */       Object filter_obj = ((Expression) references[2]).eval(null);
/* 046 */       UTF8String filter_value4 = (UTF8String) filter_obj;
/* 047 */       boolean filter_value2 = false;
/* 048 */       filter_value2 = scan_value147.equals(filter_value4);
/* 049 */       if (!filter_value2) continue;
/* 050 */
/* 051 */       filter_numOutputRows.add(1);
/* 052 */
/* 053 */       boolean scan_isNull76 = scan_row.isNullAt(0);
/* 054 */       Decimal scan_value76 = scan_isNull76 ? null : (scan_row.getDecimal(0, 38, 0));
/* 055 */       boolean scan_isNull77 = scan_row.isNullAt(1);
/* 056 */       UTF8String scan_value77 = scan_isNull77 ? null : (scan_row.getUTF8String(1));
/* 057 */       boolean scan_isNull78 = scan_row.isNullAt(2);
/* 058 */       Decimal scan_value78 = scan_isNull78 ? null : (scan_row.getDecimal(2, 38, 0));
/* 059 */       boolean scan_isNull79 = scan_row.isNullAt(3);
/* 060 */       Decimal scan_value79 = scan_isNull79 ? null : (scan_row.getDecimal(3, 38, 0));
/* 061 */       boolean scan_isNull80 = scan_row.isNullAt(4);
/* 062 */       Decimal scan_value80 = scan_isNull80 ? null : (scan_row.getDecimal(4, 38, 0));
/* 063 */       boolean scan_isNull81 = scan_row.isNullAt(5);
/* 064 */       Decimal scan_value81 = scan_isNull81 ? null : (scan_row.getDecimal(5, 38, 0));
/* 065 */       boolean scan_isNull82 = scan_row.isNullAt(6);
/* 066 */       Decimal scan_value82 = scan_isNull82 ? null : (scan_row.getDecimal(6, 38, 0));
/* 067 */       boolean scan_isNull83 = scan_row.isNullAt(7);
/* 068 */       UTF8String scan_value83 = scan_isNull83 ? null : (scan_row.getUTF8String(7));
/* 069 */       boolean scan_isNull84 = scan_row.isNullAt(8);
/* 070 */       UTF8String scan_value84 = scan_isNull84 ? null : (scan_row.getUTF8String(8));
/* 071 */       boolean scan_isNull85 = scan_row.isNullAt(9);
/* 072 */       UTF8String scan_value85 = scan_isNull85 ? null : (scan_row.getUTF8String(9));
/* 073 */       boolean scan_isNull86 = scan_row.isNullAt(10);
/* 074 */       Decimal scan_value86 = scan_isNull86 ? null : (scan_row.getDecimal(10, 38, 0));
/* 075 */       boolean scan_isNull87 = scan_row.isNullAt(11);
/* 076 */       Decimal scan_value87 = scan_isNull87 ? null : (scan_row.getDecimal(11, 38, 0));
/* 077 */       boolean scan_isNull88 = scan_row.isNullAt(12);
/* 078 */       Decimal scan_value88 = scan_isNull88 ? null : (scan_row.getDecimal(12, 38, 0));
/* 079 */       boolean scan_isNull89 = scan_row.isNullAt(13);
/* 080 */       UTF8String scan_value89 = scan_isNull89 ? null : (scan_row.getUTF8String(13));
/* 081 */       boolean scan_isNull90 = scan_row.isNullAt(14);
/* 082 */       UTF8String scan_value90 = scan_isNull90 ? null : (scan_row.getUTF8String(14));
/* 083 */       boolean scan_isNull91 = scan_row.isNullAt(15);
/* 084 */       UTF8String scan_value91 = scan_isNull91 ? null : (scan_row.getUTF8String(15));
/* 085 */       boolean scan_isNull92 = scan_row.isNullAt(16);
/* 086 */       UTF8String scan_value92 = scan_isNull92 ? null : (scan_row.getUTF8String(16));
/* 087 */       boolean scan_isNull93 = scan_row.isNullAt(17);
/* 088 */       Decimal scan_value93 = scan_isNull93 ? null : (scan_row.getDecimal(17, 38, 0));
/* 089 */       boolean scan_isNull94 = scan_row.isNullAt(18);
/* 090 */       UTF8String scan_value94 = scan_isNull94 ? null : (scan_row.getUTF8String(18));
/* 091 */       boolean scan_isNull95 = scan_row.isNullAt(19);
/* 092 */       Decimal scan_value95 = scan_isNull95 ? null : (scan_row.getDecimal(19, 38, 0));
/* 093 */       boolean scan_isNull96 = scan_row.isNullAt(20);
/* 094 */       Decimal scan_value96 = scan_isNull96 ? null : (scan_row.getDecimal(20, 38, 0));
/* 095 */       boolean scan_isNull97 = scan_row.isNullAt(21);
/* 096 */       Decimal scan_value97 = scan_isNull97 ? null : (scan_row.getDecimal(21, 38, 0));
/* 097 */       boolean scan_isNull98 = scan_row.isNullAt(22);
/* 098 */       Decimal scan_value98 = scan_isNull98 ? null : (scan_row.getDecimal(22, 38, 0));
/* 099 */       boolean scan_isNull99 = scan_row.isNullAt(23);
/* 100 */       Decimal scan_value99 = scan_isNull99 ? null : (scan_row.getDecimal(23, 38, 0));
/* 101 */       boolean scan_isNull100 = scan_row.isNullAt(24);
/* 102 */       UTF8String scan_value100 = scan_isNull100 ? null : (scan_row.getUTF8String(24));
/* 103 */       boolean scan_isNull101 = scan_row.isNullAt(25);
/* 104 */       UTF8String scan_value101 = scan_isNull101 ? null : (scan_row.getUTF8String(25));
/* 105 */       boolean scan_isNull102 = scan_row.isNullAt(26);
/* 106 */       UTF8String scan_value102 = scan_isNull102 ? null : (scan_row.getUTF8String(26));
/* 107 */       boolean scan_isNull103 = scan_row.isNullAt(27);
/* 108 */       UTF8String scan_value103 = scan_isNull103 ? null : (scan_row.getUTF8String(27));
/* 109 */       boolean scan_isNull104 = scan_row.isNullAt(28);
/* 110 */       Decimal scan_value104 = scan_isNull104 ? null : (scan_row.getDecimal(28, 38, 0));
/* 111 */       boolean scan_isNull105 = scan_row.isNullAt(29);
/* 112 */       Decimal scan_value105 = scan_isNull105 ? null : (scan_row.getDecimal(29, 38, 0));
/* 113 */       boolean scan_isNull106 = scan_row.isNullAt(30);
/* 114 */       Decimal scan_value106 = scan_isNull106 ? null : (scan_row.getDecimal(30, 38, 0));
/* 115 */       boolean scan_isNull107 = scan_row.isNullAt(31);
/* 116 */       UTF8String scan_value107 = scan_isNull107 ? null : (scan_row.getUTF8String(31));
/* 117 */       boolean scan_isNull108 = scan_row.isNullAt(32);
/* 118 */       UTF8String scan_value108 = scan_isNull108 ? null : (scan_row.getUTF8String(32));
/* 119 */       boolean scan_isNull109 = scan_row.isNullAt(33);
/* 120 */       UTF8String scan_value109 = scan_isNull109 ? null : (scan_row.getUTF8String(33));
/* 121 */       boolean scan_isNull110 = scan_row.isNullAt(34);
/* 122 */       UTF8String scan_value110 = scan_isNull110 ? null : (scan_row.getUTF8String(34));
/* 123 */       boolean scan_isNull111 = scan_row.isNullAt(35);
/* 124 */       Decimal scan_value111 = scan_isNull111 ? null : (scan_row.getDecimal(35, 38, 0));
/* 125 */       boolean scan_isNull112 = scan_row.isNullAt(36);
/* 126 */       UTF8String scan_value112 = scan_isNull112 ? null : (scan_row.getUTF8String(36));
/* 127 */       boolean scan_isNull113 = scan_row.isNullAt(37);
/* 128 */       Decimal scan_value113 = scan_isNull113 ? null : (scan_row.getDecimal(37, 38, 0));
/* 129 */       boolean scan_isNull114 = scan_row.isNullAt(38);
/* 130 */       Decimal scan_value114 = scan_isNull114 ? null : (scan_row.getDecimal(38, 38, 0));
/* 131 */       boolean scan_isNull115 = scan_row.isNullAt(39);
/* 132 */       Decimal scan_value115 = scan_isNull115 ? null : (scan_row.getDecimal(39, 38, 0));
/* 133 */       boolean scan_isNull116 = scan_row.isNullAt(40);
/* 134 */       Decimal scan_value116 = scan_isNull116 ? null : (scan_row.getDecimal(40, 38, 0));
/* 135 */       boolean scan_isNull117 = scan_row.isNullAt(41);
/* 136 */       Decimal scan_value117 = scan_isNull117 ? null : (scan_row.getDecimal(41, 38, 0));
/* 137 */       boolean scan_isNull118 = scan_row.isNullAt(42);
/* 138 */       UTF8String scan_value118 = scan_isNull118 ? null : (scan_row.getUTF8String(42));
/* 139 */       boolean scan_isNull119 = scan_row.isNullAt(43);
/* 140 */       UTF8String scan_value119 = scan_isNull119 ? null : (scan_row.getUTF8String(43));
/* 141 */       boolean scan_isNull120 = scan_row.isNullAt(44);
/* 142 */       UTF8String scan_value120 = scan_isNull120 ? null : (scan_row.getUTF8String(44));
/* 143 */       boolean scan_isNull121 = scan_row.isNullAt(45);
/* 144 */       UTF8String scan_value121 = scan_isNull121 ? null : (scan_row.getUTF8String(45));
/* 145 */       boolean scan_isNull122 = scan_row.isNullAt(46);
/* 146 */       Decimal scan_value122 = scan_isNull122 ? null : (scan_row.getDecimal(46, 38, 0));
/* 147 */       boolean scan_isNull123 = scan_row.isNullAt(47);
/* 148 */       Decimal scan_value123 = scan_isNull123 ? null : (scan_row.getDecimal(47, 38, 0));
/* 149 */       boolean scan_isNull124 = scan_row.isNullAt(48);
/* 150 */       Decimal scan_value124 = scan_isNull124 ? null : (scan_row.getDecimal(48, 38, 0));
/* 151 */       boolean scan_isNull125 = scan_row.isNullAt(49);
/* 152 */       UTF8String scan_value125 = scan_isNull125 ? null : (scan_row.getUTF8String(49));
/* 153 */       boolean scan_isNull126 = scan_row.isNullAt(50);
/* 154 */       UTF8String scan_value126 = scan_isNull126 ? null : (scan_row.getUTF8String(50));
/* 155 */       boolean scan_isNull127 = scan_row.isNullAt(51);
/* 156 */       UTF8String scan_value127 = scan_isNull127 ? null : (scan_row.getUTF8String(51));
/* 157 */       boolean scan_isNull128 = scan_row.isNullAt(52);
/* 158 */       UTF8String scan_value128 = scan_isNull128 ? null : (scan_row.getUTF8String(52));
/* 159 */       boolean scan_isNull129 = scan_row.isNullAt(53);
/* 160 */       Decimal scan_value129 = scan_isNull129 ? null : (scan_row.getDecimal(53, 38, 0));
/* 161 */       boolean scan_isNull130 = scan_row.isNullAt(54);
/* 162 */       UTF8String scan_value130 = scan_isNull130 ? null : (scan_row.getUTF8String(54));
/* 163 */       boolean scan_isNull131 = scan_row.isNullAt(55);
/* 164 */       Decimal scan_value131 = scan_isNull131 ? null : (scan_row.getDecimal(55, 38, 0));
/* 165 */       boolean scan_isNull132 = scan_row.isNullAt(56);
/* 166 */       Decimal scan_value132 = scan_isNull132 ? null : (scan_row.getDecimal(56, 38, 0));
/* 167 */       boolean scan_isNull133 = scan_row.isNullAt(57);
/* 168 */       Decimal scan_value133 = scan_isNull133 ? null : (scan_row.getDecimal(57, 38, 0));
/* 169 */       boolean scan_isNull134 = scan_row.isNullAt(58);
/* 170 */       Decimal scan_value134 = scan_isNull134 ? null : (scan_row.getDecimal(58, 38, 0));
/* 171 */       boolean scan_isNull135 = scan_row.isNullAt(59);
/* 172 */       Decimal scan_value135 = scan_isNull135 ? null : (scan_row.getDecimal(59, 38, 0));
/* 173 */       boolean scan_isNull136 = scan_row.isNullAt(60);
/* 174 */       UTF8String scan_value136 = scan_isNull136 ? null : (scan_row.getUTF8String(60));
/* 175 */       boolean scan_isNull137 = scan_row.isNullAt(61);
/* 176 */       UTF8String scan_value137 = scan_isNull137 ? null : (scan_row.getUTF8String(61));
/* 177 */       boolean scan_isNull138 = scan_row.isNullAt(62);
/* 178 */       UTF8String scan_value138 = scan_isNull138 ? null : (scan_row.getUTF8String(62));
/* 179 */       boolean scan_isNull139 = scan_row.isNullAt(63);
/* 180 */       UTF8String scan_value139 = scan_isNull139 ? null : (scan_row.getUTF8String(63));
/* 181 */       boolean scan_isNull140 = scan_row.isNullAt(64);
/* 182 */       Decimal scan_value140 = scan_isNull140 ? null : (scan_row.getDecimal(64, 38, 0));
/* 183 */       boolean scan_isNull141 = scan_row.isNullAt(65);
/* 184 */       Decimal scan_value141 = scan_isNull141 ? null : (scan_row.getDecimal(65, 38, 0));
/* 185 */       boolean scan_isNull142 = scan_row.isNullAt(66);
/* 186 */       Decimal scan_value142 = scan_isNull142 ? null : (scan_row.getDecimal(66, 38, 0));
/* 187 */       boolean scan_isNull143 = scan_row.isNullAt(67);
/* 188 */       UTF8String scan_value143 = scan_isNull143 ? null : (scan_row.getUTF8String(67));
/* 189 */       boolean scan_isNull144 = scan_row.isNullAt(68);
/* 190 */       UTF8String scan_value144 = scan_isNull144 ? null : (scan_row.getUTF8String(68));
/* 191 */       boolean scan_isNull145 = scan_row.isNullAt(69);
/* 192 */       UTF8String scan_value145 = scan_isNull145 ? null : (scan_row.getUTF8String(69));
/* 193 */       boolean scan_isNull146 = scan_row.isNullAt(70);
/* 194 */       UTF8String scan_value146 = scan_isNull146 ? null : (scan_row.getUTF8String(70));
/* 195 */       boolean scan_isNull148 = scan_row.isNullAt(72);
/* 196 */       long scan_value148 = scan_isNull148 ? -1L : (scan_row.getLong(72));
/* 197 */       boolean scan_isNull149 = scan_row.isNullAt(73);
/* 198 */       long scan_value149 = scan_isNull149 ? -1L : (scan_row.getLong(73));
/* 199 */       boolean scan_isNull150 = scan_row.isNullAt(74);
/* 200 */       UTF8String scan_value150 = scan_isNull150 ? null : (scan_row.getUTF8String(74));
/* 201 */       boolean scan_isNull151 = scan_row.isNullAt(75);
/* 202 */       UTF8String scan_value151 = scan_isNull151 ? null : (scan_row.getUTF8String(75));
/* 203 */       project_holder.reset();
/* 204 */
/* 205 */       project_rowWriter.zeroOutNullBytes();
/* 206 */
/* 207 */       if (scan_isNull76) {
/* 208 */         project_rowWriter.write(0, (Decimal) null, 38, 0);
/* 209 */       } else {
/* 210 */         project_rowWriter.write(0, scan_value76, 38, 0);
/* 211 */       }
/* 212 */
/* 213 */       if (scan_isNull77) {
/* 214 */         project_rowWriter.setNullAt(1);
/* 215 */       } else {
/* 216 */         project_rowWriter.write(1, scan_value77);
/* 217 */       }
/* 218 */
/* 219 */       if (scan_isNull78) {
/* 220 */         project_rowWriter.write(2, (Decimal) null, 38, 0);
/* 221 */       } else {
/* 222 */         project_rowWriter.write(2, scan_value78, 38, 0);
/* 223 */       }
/* 224 */
/* 225 */       if (scan_isNull79) {
/* 226 */         project_rowWriter.write(3, (Decimal) null, 38, 0);
/* 227 */       } else {
/* 228 */         project_rowWriter.write(3, scan_value79, 38, 0);
/* 229 */       }
/* 230 */
/* 231 */       if (scan_isNull80) {
/* 232 */         project_rowWriter.write(4, (Decimal) null, 38, 0);
/* 233 */       } else {
/* 234 */         project_rowWriter.write(4, scan_value80, 38, 0);
/* 235 */       }
/* 236 */
/* 237 */       if (scan_isNull81) {
/* 238 */         project_rowWriter.write(5, (Decimal) null, 38, 0);
/* 239 */       } else {
/* 240 */         project_rowWriter.write(5, scan_value81, 38, 0);
/* 241 */       }
/* 242 */
/* 243 */       if (scan_isNull82) {
/* 244 */         project_rowWriter.write(6, (Decimal) null, 38, 0);
/* 245 */       } else {
/* 246 */         project_rowWriter.write(6, scan_value82, 38, 0);
/* 247 */       }
/* 248 */
/* 249 */       if (scan_isNull83) {
/* 250 */         project_rowWriter.setNullAt(7);
/* 251 */       } else {
/* 252 */         project_rowWriter.write(7, scan_value83);
/* 253 */       }
/* 254 */
/* 255 */       if (scan_isNull84) {
/* 256 */         project_rowWriter.setNullAt(8);
/* 257 */       } else {
/* 258 */         project_rowWriter.write(8, scan_value84);
/* 259 */       }
/* 260 */
/* 261 */       if (scan_isNull85) {
/* 262 */         project_rowWriter.setNullAt(9);
/* 263 */       } else {
/* 264 */         project_rowWriter.write(9, scan_value85);
/* 265 */       }
/* 266 */
/* 267 */       if (scan_isNull86) {
/* 268 */         project_rowWriter.write(10, (Decimal) null, 38, 0);
/* 269 */       } else {
/* 270 */         project_rowWriter.write(10, scan_value86, 38, 0);
/* 271 */       }
/* 272 */
/* 273 */       if (scan_isNull87) {
/* 274 */         project_rowWriter.write(11, (Decimal) null, 38, 0);
/* 275 */       } else {
/* 276 */         project_rowWriter.write(11, scan_value87, 38, 0);
/* 277 */       }
/* 278 */
/* 279 */       if (scan_isNull88) {
/* 280 */         project_rowWriter.write(12, (Decimal) null, 38, 0);
/* 281 */       } else {
/* 282 */         project_rowWriter.write(12, scan_value88, 38, 0);
/* 283 */       }
/* 284 */
/* 285 */       if (scan_isNull89) {
/* 286 */         project_rowWriter.setNullAt(13);
/* 287 */       } else {
/* 288 */         project_rowWriter.write(13, scan_value89);
/* 289 */       }
/* 290 */
/* 291 */       if (scan_isNull90) {
/* 292 */         project_rowWriter.setNullAt(14);
/* 293 */       } else {
/* 294 */         project_rowWriter.write(14, scan_value90);
/* 295 */       }
/* 296 */
/* 297 */       if (scan_isNull91) {
/* 298 */         project_rowWriter.setNullAt(15);
/* 299 */       } else {
/* 300 */         project_rowWriter.write(15, scan_value91);
/* 301 */       }
/* 302 */
/* 303 */       if (scan_isNull92) {
/* 304 */         project_rowWriter.setNullAt(16);
/* 305 */       } else {
/* 306 */         project_rowWriter.write(16, scan_value92);
/* 307 */       }
/* 308 */
/* 309 */       if (scan_isNull93) {
/* 310 */         project_rowWriter.write(17, (Decimal) null, 38, 0);
/* 311 */       } else {
/* 312 */         project_rowWriter.write(17, scan_value93, 38, 0);
/* 313 */       }
/* 314 */
/* 315 */       if (scan_isNull94) {
/* 316 */         project_rowWriter.setNullAt(18);
/* 317 */       } else {
/* 318 */         project_rowWriter.write(18, scan_value94);
/* 319 */       }
/* 320 */
/* 321 */       if (scan_isNull95) {
/* 322 */         project_rowWriter.write(19, (Decimal) null, 38, 0);
/* 323 */       } else {
/* 324 */         project_rowWriter.write(19, scan_value95, 38, 0);
/* 325 */       }
/* 326 */
/* 327 */       if (scan_isNull96) {
/* 328 */         project_rowWriter.write(20, (Decimal) null, 38, 0);
/* 329 */       } else {
/* 330 */         project_rowWriter.write(20, scan_value96, 38, 0);
/* 331 */       }
/* 332 */
/* 333 */       if (scan_isNull97) {
/* 334 */         project_rowWriter.write(21, (Decimal) null, 38, 0);
/* 335 */       } else {
/* 336 */         project_rowWriter.write(21, scan_value97, 38, 0);
/* 337 */       }
/* 338 */
/* 339 */       if (scan_isNull98) {
/* 340 */         project_rowWriter.write(22, (Decimal) null, 38, 0);
/* 341 */       } else {
/* 342 */         project_rowWriter.write(22, scan_value98, 38, 0);
/* 343 */       }
/* 344 */
/* 345 */       if (scan_isNull99) {
/* 346 */         project_rowWriter.write(23, (Decimal) null, 38, 0);
/* 347 */       } else {
/* 348 */         project_rowWriter.write(23, scan_value99, 38, 0);
/* 349 */       }
/* 350 */
/* 351 */       if (scan_isNull100) {
/* 352 */         project_rowWriter.setNullAt(24);
/* 353 */       } else {
/* 354 */         project_rowWriter.write(24, scan_value100);
/* 355 */       }
/* 356 */
/* 357 */       if (scan_isNull101) {
/* 358 */         project_rowWriter.setNullAt(25);
/* 359 */       } else {
/* 360 */         project_rowWriter.write(25, scan_value101);
/* 361 */       }
/* 362 */
/* 363 */       if (scan_isNull102) {
/* 364 */         project_rowWriter.setNullAt(26);
/* 365 */       } else {
/* 366 */         project_rowWriter.write(26, scan_value102);
/* 367 */       }
/* 368 */
/* 369 */       if (scan_isNull103) {
/* 370 */         project_rowWriter.setNullAt(27);
/* 371 */       } else {
/* 372 */         project_rowWriter.write(27, scan_value103);
/* 373 */       }
/* 374 */
/* 375 */       if (scan_isNull104) {
/* 376 */         project_rowWriter.write(28, (Decimal) null, 38, 0);
/* 377 */       } else {
/* 378 */         project_rowWriter.write(28, scan_value104, 38, 0);
/* 379 */       }
/* 380 */
/* 381 */       if (scan_isNull105) {
/* 382 */         project_rowWriter.write(29, (Decimal) null, 38, 0);
/* 383 */       } else {
/* 384 */         project_rowWriter.write(29, scan_value105, 38, 0);
/* 385 */       }
/* 386 */
/* 387 */       if (scan_isNull106) {
/* 388 */         project_rowWriter.write(30, (Decimal) null, 38, 0);
/* 389 */       } else {
/* 390 */         project_rowWriter.write(30, scan_value106, 38, 0);
/* 391 */       }
/* 392 */
/* 393 */       if (scan_isNull107) {
/* 394 */         project_rowWriter.setNullAt(31);
/* 395 */       } else {
/* 396 */         project_rowWriter.write(31, scan_value107);
/* 397 */       }
/* 398 */
/* 399 */       if (scan_isNull108) {
/* 400 */         project_rowWriter.setNullAt(32);
/* 401 */       } else {
/* 402 */         project_rowWriter.write(32, scan_value108);
/* 403 */       }
/* 404 */
/* 405 */       if (scan_isNull109) {
/* 406 */         project_rowWriter.setNullAt(33);
/* 407 */       } else {
/* 408 */         project_rowWriter.write(33, scan_value109);
/* 409 */       }
/* 410 */
/* 411 */       if (scan_isNull110) {
/* 412 */         project_rowWriter.setNullAt(34);
/* 413 */       } else {
/* 414 */         project_rowWriter.write(34, scan_value110);
/* 415 */       }
/* 416 */
/* 417 */       if (scan_isNull111) {
/* 418 */         project_rowWriter.write(35, (Decimal) null, 38, 0);
/* 419 */       } else {
/* 420 */         project_rowWriter.write(35, scan_value111, 38, 0);
/* 421 */       }
/* 422 */
/* 423 */       if (scan_isNull112) {
/* 424 */         project_rowWriter.setNullAt(36);
/* 425 */       } else {
/* 426 */         project_rowWriter.write(36, scan_value112);
/* 427 */       }
/* 428 */
/* 429 */       if (scan_isNull113) {
/* 430 */         project_rowWriter.write(37, (Decimal) null, 38, 0);
/* 431 */       } else {
/* 432 */         project_rowWriter.write(37, scan_value113, 38, 0);
/* 433 */       }
/* 434 */
/* 435 */       if (scan_isNull114) {
/* 436 */         project_rowWriter.write(38, (Decimal) null, 38, 0);
/* 437 */       } else {
/* 438 */         project_rowWriter.write(38, scan_value114, 38, 0);
/* 439 */       }
/* 440 */
/* 441 */       if (scan_isNull115) {
/* 442 */         project_rowWriter.write(39, (Decimal) null, 38, 0);
/* 443 */       } else {
/* 444 */         project_rowWriter.write(39, scan_value115, 38, 0);
/* 445 */       }
/* 446 */
/* 447 */       if (scan_isNull116) {
/* 448 */         project_rowWriter.write(40, (Decimal) null, 38, 0);
/* 449 */       } else {
/* 450 */         project_rowWriter.write(40, scan_value116, 38, 0);
/* 451 */       }
/* 452 */
/* 453 */       if (scan_isNull117) {
/* 454 */         project_rowWriter.write(41, (Decimal) null, 38, 0);
/* 455 */       } else {
/* 456 */         project_rowWriter.write(41, scan_value117, 38, 0);
/* 457 */       }
/* 458 */
/* 459 */       if (scan_isNull118) {
/* 460 */         project_rowWriter.setNullAt(42);
/* 461 */       } else {
/* 462 */         project_rowWriter.write(42, scan_value118);
/* 463 */       }
/* 464 */
/* 465 */       if (scan_isNull119) {
/* 466 */         project_rowWriter.setNullAt(43);
/* 467 */       } else {
/* 468 */         project_rowWriter.write(43, scan_value119);
/* 469 */       }
/* 470 */
/* 471 */       if (scan_isNull120) {
/* 472 */         project_rowWriter.setNullAt(44);
/* 473 */       } else {
/* 474 */         project_rowWriter.write(44, scan_value120);
/* 475 */       }
/* 476 */
/* 477 */       if (scan_isNull121) {
/* 478 */         project_rowWriter.setNullAt(45);
/* 479 */       } else {
/* 480 */         project_rowWriter.write(45, scan_value121);
/* 481 */       }
/* 482 */
/* 483 */       if (scan_isNull122) {
/* 484 */         project_rowWriter.write(46, (Decimal) null, 38, 0);
/* 485 */       } else {
/* 486 */         project_rowWriter.write(46, scan_value122, 38, 0);
/* 487 */       }
/* 488 */
/* 489 */       if (scan_isNull123) {
/* 490 */         project_rowWriter.write(47, (Decimal) null, 38, 0);
/* 491 */       } else {
/* 492 */         project_rowWriter.write(47, scan_value123, 38, 0);
/* 493 */       }
/* 494 */
/* 495 */       if (scan_isNull124) {
/* 496 */         project_rowWriter.write(48, (Decimal) null, 38, 0);
/* 497 */       } else {
/* 498 */         project_rowWriter.write(48, scan_value124, 38, 0);
/* 499 */       }
/* 500 */
/* 501 */       if (scan_isNull125) {
/* 502 */         project_rowWriter.setNullAt(49);
/* 503 */       } else {
/* 504 */         project_rowWriter.write(49, scan_value125);
/* 505 */       }
/* 506 */
/* 507 */       if (scan_isNull126) {
/* 508 */         project_rowWriter.setNullAt(50);
/* 509 */       } else {
/* 510 */         project_rowWriter.write(50, scan_value126);
/* 511 */       }
/* 512 */
/* 513 */       if (scan_isNull127) {
/* 514 */         project_rowWriter.setNullAt(51);
/* 515 */       } else {
/* 516 */         project_rowWriter.write(51, scan_value127);
/* 517 */       }
/* 518 */
/* 519 */       if (scan_isNull128) {
/* 520 */         project_rowWriter.setNullAt(52);
/* 521 */       } else {
/* 522 */         project_rowWriter.write(52, scan_value128);
/* 523 */       }
/* 524 */
/* 525 */       if (scan_isNull129) {
/* 526 */         project_rowWriter.write(53, (Decimal) null, 38, 0);
/* 527 */       } else {
/* 528 */         project_rowWriter.write(53, scan_value129, 38, 0);
/* 529 */       }
/* 530 */
/* 531 */       if (scan_isNull130) {
/* 532 */         project_rowWriter.setNullAt(54);
/* 533 */       } else {
/* 534 */         project_rowWriter.write(54, scan_value130);
/* 535 */       }
/* 536 */
/* 537 */       if (scan_isNull131) {
/* 538 */         project_rowWriter.write(55, (Decimal) null, 38, 0);
/* 539 */       } else {
/* 540 */         project_rowWriter.write(55, scan_value131, 38, 0);
/* 541 */       }
/* 542 */
/* 543 */       if (scan_isNull132) {
/* 544 */         project_rowWriter.write(56, (Decimal) null, 38, 0);
/* 545 */       } else {
/* 546 */         project_rowWriter.write(56, scan_value132, 38, 0);
/* 547 */       }
/* 548 */
/* 549 */       if (scan_isNull133) {
/* 550 */         project_rowWriter.write(57, (Decimal) null, 38, 0);
/* 551 */       } else {
/* 552 */         project_rowWriter.write(57, scan_value133, 38, 0);
/* 553 */       }
/* 554 */
/* 555 */       if (scan_isNull134) {
/* 556 */         project_rowWriter.write(58, (Decimal) null, 38, 0);
/* 557 */       } else {
/* 558 */         project_rowWriter.write(58, scan_value134, 38, 0);
/* 559 */       }
/* 560 */
/* 561 */       if (scan_isNull135) {
/* 562 */         project_rowWriter.write(59, (Decimal) null, 38, 0);
/* 563 */       } else {
/* 564 */         project_rowWriter.write(59, scan_value135, 38, 0);
/* 565 */       }
/* 566 */
/* 567 */       if (scan_isNull136) {
/* 568 */         project_rowWriter.setNullAt(60);
/* 569 */       } else {
/* 570 */         project_rowWriter.write(60, scan_value136);
/* 571 */       }
/* 572 */
/* 573 */       if (scan_isNull137) {
/* 574 */         project_rowWriter.setNullAt(61);
/* 575 */       } else {
/* 576 */         project_rowWriter.write(61, scan_value137);
/* 577 */       }
/* 578 */
/* 579 */       if (scan_isNull138) {
/* 580 */         project_rowWriter.setNullAt(62);
/* 581 */       } else {
/* 582 */         project_rowWriter.write(62, scan_value138);
/* 583 */       }
/* 584 */
/* 585 */       if (scan_isNull139) {
/* 586 */         project_rowWriter.setNullAt(63);
/* 587 */       } else {
/* 588 */         project_rowWriter.write(63, scan_value139);
/* 589 */       }
/* 590 */
/* 591 */       if (scan_isNull140) {
/* 592 */         project_rowWriter.write(64, (Decimal) null, 38, 0);
/* 593 */       } else {
/* 594 */         project_rowWriter.write(64, scan_value140, 38, 0);
/* 595 */       }
/* 596 */
/* 597 */       if (scan_isNull141) {
/* 598 */         project_rowWriter.write(65, (Decimal) null, 38, 0);
/* 599 */       } else {
/* 600 */         project_rowWriter.write(65, scan_value141, 38, 0);
/* 601 */       }
/* 602 */
/* 603 */       if (scan_isNull142) {
/* 604 */         project_rowWriter.write(66, (Decimal) null, 38, 0);
/* 605 */       } else {
/* 606 */         project_rowWriter.write(66, scan_value142, 38, 0);
/* 607 */       }
/* 608 */
/* 609 */       if (scan_isNull143) {
/* 610 */         project_rowWriter.setNullAt(67);
/* 611 */       } else {
/* 612 */         project_rowWriter.write(67, scan_value143);
/* 613 */       }
/* 614 */
/* 615 */       if (scan_isNull144) {
/* 616 */         project_rowWriter.setNullAt(68);
/* 617 */       } else {
/* 618 */         project_rowWriter.write(68, scan_value144);
/* 619 */       }
/* 620 */
/* 621 */       if (scan_isNull145) {
/* 622 */         project_rowWriter.setNullAt(69);
/* 623 */       } else {
/* 624 */         project_rowWriter.write(69, scan_value145);
/* 625 */       }
/* 626 */
/* 627 */       if (scan_isNull146) {
/* 628 */         project_rowWriter.setNullAt(70);
/* 629 */       } else {
/* 630 */         project_rowWriter.write(70, scan_value146);
/* 631 */       }
/* 632 */
/* 633 */       project_rowWriter.write(71, scan_value147);
/* 634 */
/* 635 */       if (scan_isNull148) {
/* 636 */         project_rowWriter.setNullAt(72);
/* 637 */       } else {
/* 638 */         project_rowWriter.write(72, scan_value148);
/* 639 */       }
/* 640 */
/* 641 */       if (scan_isNull149) {
/* 642 */         project_rowWriter.setNullAt(73);
/* 643 */       } else {
/* 644 */         project_rowWriter.write(73, scan_value149);
/* 645 */       }
/* 646 */
/* 647 */       if (scan_isNull150) {
/* 648 */         project_rowWriter.setNullAt(74);
/* 649 */       } else {
/* 650 */         project_rowWriter.write(74, scan_value150);
/* 651 */       }
/* 652 */
/* 653 */       if (scan_isNull151) {
/* 654 */         project_rowWriter.setNullAt(75);
/* 655 */       } else {
/* 656 */         project_rowWriter.write(75, scan_value151);
/* 657 */       }
/* 658 */       project_result.setTotalSize(project_holder.totalSize());
/* 659 */       append(project_result);
/* 660 */       if (shouldStop()) return;
/* 661 */     }
/* 662 */   }
/* 663 */ }

17/11/03 08:48:55 DEBUG ClosureCleaner: +++ Cleaning closure <function2> (org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8) +++
17/11/03 08:48:55 DEBUG ClosureCleaner:  + declared fields: 4
17/11/03 08:48:55 DEBUG ClosureCleaner:      public static final long org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8.serialVersionUID
17/11/03 08:48:55 DEBUG ClosureCleaner:      private final org.apache.spark.sql.catalyst.expressions.codegen.CodeAndComment org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8.cleanedSource$2
17/11/03 08:48:55 DEBUG ClosureCleaner:      private final java.lang.Object[] org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8.references$1
17/11/03 08:48:55 DEBUG ClosureCleaner:      public final org.apache.spark.sql.execution.metric.SQLMetric org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8.durationMs$1
17/11/03 08:48:55 DEBUG ClosureCleaner:  + declared methods: 2
17/11/03 08:48:55 DEBUG ClosureCleaner:      public final java.lang.Object org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8.apply(java.lang.Object,java.lang.Object)
17/11/03 08:48:55 DEBUG ClosureCleaner:      public final scala.collection.Iterator org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8.apply(int,scala.collection.Iterator)
17/11/03 08:48:55 DEBUG ClosureCleaner:  + inner classes: 1
17/11/03 08:48:55 DEBUG ClosureCleaner:      org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8$$anon$1
17/11/03 08:48:55 DEBUG ClosureCleaner:  + outer classes: 0
17/11/03 08:48:55 DEBUG ClosureCleaner:  + outer objects: 0
17/11/03 08:48:55 DEBUG ClosureCleaner:  + populating accessed fields because this is the starting closure
17/11/03 08:48:55 DEBUG ClosureCleaner:  + fields accessed by starting closure: 0
17/11/03 08:48:55 DEBUG ClosureCleaner:  + there are no enclosing objects!
17/11/03 08:48:55 DEBUG ClosureCleaner:  +++ closure <function2> (org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8) is now cleaned +++
17/11/03 08:48:55 DEBUG ClosureCleaner: +++ Cleaning closure <function1> (org.apache.spark.sql.execution.SparkPlan$$anonfun$5) +++
17/11/03 08:48:55 DEBUG ClosureCleaner:  + declared fields: 1
17/11/03 08:48:55 DEBUG ClosureCleaner:      public static final long org.apache.spark.sql.execution.SparkPlan$$anonfun$5.serialVersionUID
17/11/03 08:48:55 DEBUG ClosureCleaner:  + declared methods: 2
17/11/03 08:48:55 DEBUG ClosureCleaner:      public final java.lang.Object org.apache.spark.sql.execution.SparkPlan$$anonfun$5.apply(java.lang.Object)
17/11/03 08:48:55 DEBUG ClosureCleaner:      public final java.lang.Object org.apache.spark.sql.execution.SparkPlan$$anonfun$5.apply(scala.collection.Iterator)
17/11/03 08:48:55 DEBUG ClosureCleaner:  + inner classes: 0
17/11/03 08:48:55 DEBUG ClosureCleaner:  + outer classes: 0
17/11/03 08:48:55 DEBUG ClosureCleaner:  + outer objects: 0
17/11/03 08:48:55 DEBUG ClosureCleaner:  + populating accessed fields because this is the starting closure
17/11/03 08:48:55 DEBUG ClosureCleaner:  + fields accessed by starting closure: 0
17/11/03 08:48:55 DEBUG ClosureCleaner:  + there are no enclosing objects!
17/11/03 08:48:55 DEBUG ClosureCleaner:  +++ closure <function1> (org.apache.spark.sql.execution.SparkPlan$$anonfun$5) is now cleaned +++
17/11/03 08:48:55 DEBUG ClosureCleaner: +++ Cleaning closure <function2> (org.apache.spark.SparkContext$$anonfun$runJob$5) +++
17/11/03 08:48:55 DEBUG ClosureCleaner:  + declared fields: 2
17/11/03 08:48:55 DEBUG ClosureCleaner:      public static final long org.apache.spark.SparkContext$$anonfun$runJob$5.serialVersionUID
17/11/03 08:48:55 DEBUG ClosureCleaner:      private final scala.Function1 org.apache.spark.SparkContext$$anonfun$runJob$5.cleanedFunc$1
17/11/03 08:48:55 DEBUG ClosureCleaner:  + declared methods: 2
17/11/03 08:48:55 DEBUG ClosureCleaner:      public final java.lang.Object org.apache.spark.SparkContext$$anonfun$runJob$5.apply(java.lang.Object,java.lang.Object)
17/11/03 08:48:55 DEBUG ClosureCleaner:      public final java.lang.Object org.apache.spark.SparkContext$$anonfun$runJob$5.apply(org.apache.spark.TaskContext,scala.collection.Iterator)
17/11/03 08:48:55 DEBUG ClosureCleaner:  + inner classes: 0
17/11/03 08:48:55 DEBUG ClosureCleaner:  + outer classes: 0
17/11/03 08:48:55 DEBUG ClosureCleaner:  + outer objects: 0
17/11/03 08:48:55 DEBUG ClosureCleaner:  + populating accessed fields because this is the starting closure
17/11/03 08:48:55 DEBUG ClosureCleaner:  + fields accessed by starting closure: 0
17/11/03 08:48:55 DEBUG ClosureCleaner:  + there are no enclosing objects!
17/11/03 08:48:55 DEBUG ClosureCleaner:  +++ closure <function2> (org.apache.spark.SparkContext$$anonfun$runJob$5) is now cleaned +++
17/11/03 08:48:55 INFO SparkContext: Starting job: take at <console>:26
17/11/03 08:48:55 INFO DAGScheduler: Got job 1 (take at <console>:26) with 1 output partitions
17/11/03 08:48:55 INFO DAGScheduler: Final stage: ResultStage 1 (take at <console>:26)
17/11/03 08:48:55 INFO DAGScheduler: Parents of final stage: List()
17/11/03 08:48:55 INFO DAGScheduler: Missing parents: List()
17/11/03 08:48:55 DEBUG DAGScheduler: submitStage(ResultStage 1)
17/11/03 08:48:55 DEBUG DAGScheduler: missing: List()
17/11/03 08:48:55 INFO DAGScheduler: Submitting ResultStage 1 (MapPartitionsRDD[5] at take at <console>:26), which has no missing parents
17/11/03 08:48:55 DEBUG DAGScheduler: submitMissingTasks(ResultStage 1)
17/11/03 08:48:55 DEBUG DFSClient: DFSClient writeChunk allocating new packet seqno=9, src=/spark2-history/local-1509698485756.inprogress, packetSize=65016, chunksPerPacket=126, bytesCurBlock=54272
17/11/03 08:48:55 DEBUG DFSClient: DFSClient flush(): bytesCurBlock=56901 lastFlushOffset=54623 createNewBlock=false
17/11/03 08:48:55 DEBUG DFSClient: Queued packet 9
17/11/03 08:48:55 DEBUG DFSClient: Waiting for ack for: 9
17/11/03 08:48:55 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074042150_301379 sending packet packet seqno: 9 offsetInBlock: 54272 lastPacketInBlock: false lastByteOffsetInBlock: 56901
17/11/03 08:48:55 DEBUG DFSClient: DFSClient seqno: 9 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 770138 flag: 0 flag: 0 flag: 0
17/11/03 08:48:55 INFO MemoryStore: Block broadcast_3 stored as values in memory (estimated size 37.6 KB, free 365.4 MB)
17/11/03 08:48:55 DEBUG BlockManager: Put block broadcast_3 locally took  1 ms
17/11/03 08:48:55 DEBUG BlockManager: Putting block broadcast_3 without replication took  1 ms
17/11/03 08:48:55 INFO MemoryStore: Block broadcast_3_piece0 stored as bytes in memory (estimated size 11.7 KB, free 365.4 MB)
17/11/03 08:48:55 INFO BlockManagerInfo: Added broadcast_3_piece0 in memory on 172.30.1.247:58060 (size: 11.7 KB, free: 366.2 MB)
17/11/03 08:48:55 DEBUG BlockManagerMaster: Updated info of block broadcast_3_piece0
17/11/03 08:48:55 DEBUG BlockManager: Told master about block broadcast_3_piece0
17/11/03 08:48:55 DEBUG BlockManager: Put block broadcast_3_piece0 locally took  1 ms
17/11/03 08:48:55 DEBUG BlockManager: Putting block broadcast_3_piece0 without replication took  1 ms
17/11/03 08:48:55 INFO SparkContext: Created broadcast 3 from broadcast at DAGScheduler.scala:1012
17/11/03 08:48:55 INFO DAGScheduler: Submitting 1 missing tasks from ResultStage 1 (MapPartitionsRDD[5] at take at <console>:26)
17/11/03 08:48:55 DEBUG DAGScheduler: New pending partitions: Set(0)
17/11/03 08:48:55 INFO TaskSchedulerImpl: Adding task set 1.0 with 1 tasks
17/11/03 08:48:55 DEBUG TaskSetManager: Epoch for TaskSet 1.0: 0
17/11/03 08:48:55 DEBUG TaskSetManager: Valid locality levels for TaskSet 1.0: ANY
17/11/03 08:48:55 DEBUG TaskSchedulerImpl: parentName: , name: TaskSet_1, runningTasks: 0
17/11/03 08:48:55 INFO TaskSetManager: Starting task 0.0 in stage 1.0 (TID 1, localhost, partition 0, ANY, 8952 bytes)
17/11/03 08:48:55 INFO Executor: Running task 0.0 in stage 1.0 (TID 1)
17/11/03 08:48:55 DEBUG Executor: Task 1's epoch is 0
17/11/03 08:48:55 DEBUG BlockManager: Getting local block broadcast_3
17/11/03 08:48:55 DEBUG BlockManager: Level for block broadcast_3 is StorageLevel(disk, memory, deserialized, 1 replicas)
17/11/03 08:48:55 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, range: 0-951814, partition values: [empty row]
17/11/03 08:48:55 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 08:48:55 DEBUG BlockManager: Getting local block broadcast_2
17/11/03 08:48:55 DEBUG BlockManager: Level for block broadcast_2 is StorageLevel(disk, memory, deserialized, 1 replicas)
17/11/03 08:48:55 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #76
17/11/03 08:48:55 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #76
17/11/03 08:48:55 DEBUG ProtobufRpcEngine: Call: getFileInfo took 3ms
17/11/03 08:48:55 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #77
17/11/03 08:48:55 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #77
17/11/03 08:48:55 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:48:55 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=951814
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042105_301334; getBlockSize()=951814; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042105_301334; getBlockSize()=951814; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:48:55 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #78
17/11/03 08:48:55 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #78
17/11/03 08:48:55 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:48:55 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:48:55 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042105_301334): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:48:55 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:48:55 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:48:55 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:48:55 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #79
17/11/03 08:48:55 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #79
17/11/03 08:48:55 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:48:55 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=951814
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042105_301334; getBlockSize()=951814; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042105_301334; getBlockSize()=951814; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:48:55 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #80
17/11/03 08:48:55 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #80
17/11/03 08:48:55 DEBUG ProtobufRpcEngine: Call: getFileInfo took 2ms
17/11/03 08:48:55 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:48:55 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042105_301334): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:48:55 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 08:48:55 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 08:48:55 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 951814}
17/11/03 08:48:55 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #81
17/11/03 08:48:55 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #81
17/11/03 08:48:55 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:48:55 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=951814
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042105_301334; getBlockSize()=951814; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042105_301334; getBlockSize()=951814; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:48:55 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 08:48:55 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:48:55 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042105_301334): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:48:55 DEBUG RecordReaderImpl: chunks = [range start: 18863 end: 947247]
17/11/03 08:48:55 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:48:55 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042105_301334): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:48:55 DEBUG RecordReaderImpl: merge = [data range [18863, 947247), size: 928384 type: array-backed]
17/11/03 08:48:55 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 08:48:57 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #82
17/11/03 08:48:57 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #82
17/11/03 08:48:57 DEBUG ProtobufRpcEngine: Call: renewLease took 2ms
17/11/03 08:48:57 DEBUG LeaseRenewer: Lease renewed for client DFSClient_NONMAPREDUCE_-343447264_1
17/11/03 08:48:57 DEBUG LeaseRenewer: Lease renewer daemon for [DFSClient_NONMAPREDUCE_-343447264_1] with renew id 1 executed
17/11/03 08:49:04 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00002-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, range: 0-3839446, partition values: [empty row]
17/11/03 08:49:04 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #83
17/11/03 08:49:04 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #83
17/11/03 08:49:04 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:49:04 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #84
17/11/03 08:49:04 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #84
17/11/03 08:49:04 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:49:04 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=3839446
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333; getBlockSize()=3839446; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333; getBlockSize()=3839446; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:49:04 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #85
17/11/03 08:49:04 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #85
17/11/03 08:49:04 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:49:04 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:49:04 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00002-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:04 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 08:49:04 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00002-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:49:04 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:49:04 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #86
17/11/03 08:49:04 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #86
17/11/03 08:49:04 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:49:04 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=3839446
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333; getBlockSize()=3839446; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333; getBlockSize()=3839446; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:49:04 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #87
17/11/03 08:49:04 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #87
17/11/03 08:49:04 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 08:49:04 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:04 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00002-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:04 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:49:04 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 08:49:04 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00002-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 3839446}
17/11/03 08:49:04 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #88
17/11/03 08:49:04 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #88
17/11/03 08:49:04 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:49:04 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=3839446
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333; getBlockSize()=3839446; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333; getBlockSize()=3839446; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:49:04 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 08:49:04 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:04 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00002-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:04 DEBUG RecordReaderImpl: chunks = [range start: 20788 end: 999895]
17/11/03 08:49:04 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:04 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00002-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:04 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:49:04 DEBUG RecordReaderImpl: merge = [data range [20788, 999895), size: 979107 type: array-backed]
17/11/03 08:49:04 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 08:49:14 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:14 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00002-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:14 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:49:14 DEBUG RecordReaderImpl: chunks = [range start: 12332 end: 520873]
17/11/03 08:49:14 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:14 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00002-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:14 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:49:14 DEBUG RecordReaderImpl: merge = [data range [12332, 520873), size: 508541 type: array-backed]
17/11/03 08:49:18 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:18 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00002-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:18 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:49:18 DEBUG RecordReaderImpl: chunks = [range start: 12382 end: 515052]
17/11/03 08:49:18 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:18 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00002-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:18 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:49:18 DEBUG RecordReaderImpl: merge = [data range [12382, 515052), size: 502670 type: array-backed]
17/11/03 08:49:23 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:23 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00002-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:23 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:49:23 DEBUG RecordReaderImpl: chunks = [range start: 12295 end: 510370]
17/11/03 08:49:23 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:23 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00002-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:23 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:49:23 DEBUG RecordReaderImpl: merge = [data range [12295, 510370), size: 498075 type: array-backed]
17/11/03 08:49:25 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074042150_301379 sending packet packet seqno: -1 offsetInBlock: 0 lastPacketInBlock: false lastByteOffsetInBlock: 0
17/11/03 08:49:25 DEBUG DFSClient: DFSClient seqno: -1 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 698015 flag: 0 flag: 0 flag: 0
17/11/03 08:49:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #89
17/11/03 08:49:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #89
17/11/03 08:49:27 DEBUG ProtobufRpcEngine: Call: renewLease took 1ms
17/11/03 08:49:27 DEBUG LeaseRenewer: Lease renewed for client DFSClient_NONMAPREDUCE_-343447264_1
17/11/03 08:49:27 DEBUG LeaseRenewer: Lease renewer daemon for [DFSClient_NONMAPREDUCE_-343447264_1] with renew id 1 executed
17/11/03 08:49:27 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:27 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00002-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:27 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:49:27 DEBUG RecordReaderImpl: chunks = [range start: 12680 end: 522685]
17/11/03 08:49:27 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:27 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00002-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:27 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:49:27 DEBUG RecordReaderImpl: merge = [data range [12680, 522685), size: 510005 type: array-backed]
17/11/03 08:49:32 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:32 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00002-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:32 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:49:32 DEBUG RecordReaderImpl: chunks = [range start: 12020 end: 524119]
17/11/03 08:49:32 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:32 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00002-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:32 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:49:32 DEBUG RecordReaderImpl: merge = [data range [12020, 524119), size: 512099 type: array-backed]
17/11/03 08:49:37 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:37 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00002-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:37 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:49:37 DEBUG RecordReaderImpl: chunks = [range start: 8373 end: 225433]
17/11/03 08:49:37 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:37 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00002-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042104_301333): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:37 DEBUG RecordReaderImpl: merge = [data range [8373, 225433), size: 217060 type: array-backed]
17/11/03 08:49:39 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00003-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, range: 0-1895547, partition values: [empty row]
17/11/03 08:49:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #90
17/11/03 08:49:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #90
17/11/03 08:49:39 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:49:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #91
17/11/03 08:49:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #91
17/11/03 08:49:39 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:49:39 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1895547
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042101_301330; getBlockSize()=1895547; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042101_301330; getBlockSize()=1895547; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:49:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #92
17/11/03 08:49:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #92
17/11/03 08:49:39 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:49:39 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:39 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00003-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042101_301330): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:39 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00003-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:49:39 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:49:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #93
17/11/03 08:49:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #93
17/11/03 08:49:39 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 2ms
17/11/03 08:49:39 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1895547
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042101_301330; getBlockSize()=1895547; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042101_301330; getBlockSize()=1895547; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:49:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #94
17/11/03 08:49:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #94
17/11/03 08:49:39 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 08:49:39 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 08:49:39 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00003-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042101_301330): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:39 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 08:49:39 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 08:49:39 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00003-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 1895547}
17/11/03 08:49:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #95
17/11/03 08:49:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #95
17/11/03 08:49:39 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:49:39 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1895547
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042101_301330; getBlockSize()=1895547; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042101_301330; getBlockSize()=1895547; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:49:39 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 08:49:39 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:39 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00003-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042101_301330): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:39 DEBUG RecordReaderImpl: chunks = [range start: 20550 end: 1021414]
17/11/03 08:49:39 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:39 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00003-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042101_301330): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:39 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:49:39 DEBUG RecordReaderImpl: merge = [data range [20550, 1021414), size: 1000864 type: array-backed]
17/11/03 08:49:39 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 08:49:50 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:50 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00003-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042101_301330): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:50 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:49:50 DEBUG RecordReaderImpl: chunks = [range start: 12042 end: 495021]
17/11/03 08:49:50 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:50 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00003-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042101_301330): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:50 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:49:50 DEBUG RecordReaderImpl: merge = [data range [12042, 495021), size: 482979 type: array-backed]
17/11/03 08:49:55 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074042150_301379 sending packet packet seqno: -1 offsetInBlock: 0 lastPacketInBlock: false lastByteOffsetInBlock: 0
17/11/03 08:49:55 DEBUG DFSClient: DFSClient seqno: -1 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 784527 flag: 0 flag: 0 flag: 0
17/11/03 08:49:56 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:56 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00003-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042101_301330): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:56 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:49:56 DEBUG RecordReaderImpl: chunks = [range start: 11517 end: 368767]
17/11/03 08:49:56 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:49:56 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00003-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042101_301330): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:49:56 DEBUG RecordReaderImpl: merge = [data range [11517, 368767), size: 357250 type: array-backed]
17/11/03 08:49:57 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #96
17/11/03 08:49:57 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #96
17/11/03 08:49:57 DEBUG ProtobufRpcEngine: Call: renewLease took 0ms
17/11/03 08:49:57 DEBUG LeaseRenewer: Lease renewed for client DFSClient_NONMAPREDUCE_-343447264_1
17/11/03 08:49:57 DEBUG LeaseRenewer: Lease renewer daemon for [DFSClient_NONMAPREDUCE_-343447264_1] with renew id 1 executed
17/11/03 08:50:00 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00005-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, range: 0-1968538, partition values: [empty row]
17/11/03 08:50:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #97
17/11/03 08:50:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #97
17/11/03 08:50:00 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:50:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #98
17/11/03 08:50:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #98
17/11/03 08:50:00 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:50:00 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1968538
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042117_301346; getBlockSize()=1968538; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042117_301346; getBlockSize()=1968538; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:50:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #99
17/11/03 08:50:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #99
17/11/03 08:50:00 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:50:00 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:50:00 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00005-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042117_301346): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:00 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 08:50:00 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00005-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:50:00 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:50:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #100
17/11/03 08:50:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #100
17/11/03 08:50:00 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:50:00 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1968538
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042117_301346; getBlockSize()=1968538; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042117_301346; getBlockSize()=1968538; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:50:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #101
17/11/03 08:50:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #101
17/11/03 08:50:00 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:50:00 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:50:00 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00005-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042117_301346): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:00 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 08:50:00 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00005-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 1968538}
17/11/03 08:50:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #102
17/11/03 08:50:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #102
17/11/03 08:50:00 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 08:50:00 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1968538
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042117_301346; getBlockSize()=1968538; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042117_301346; getBlockSize()=1968538; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:50:00 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 08:50:00 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 08:50:00 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00005-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042117_301346): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:00 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 08:50:00 DEBUG RecordReaderImpl: chunks = [range start: 20612 end: 1000835]
17/11/03 08:50:00 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 08:50:00 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00005-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042117_301346): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:00 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 08:50:00 DEBUG RecordReaderImpl: merge = [data range [20612, 1000835), size: 980223 type: array-backed]
17/11/03 08:50:00 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 08:50:09 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 08:50:09 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00005-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042117_301346): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:09 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 08:50:09 DEBUG RecordReaderImpl: chunks = [range start: 12284 end: 547850]
17/11/03 08:50:09 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 08:50:09 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00005-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042117_301346): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:09 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 08:50:09 DEBUG RecordReaderImpl: merge = [data range [12284, 547850), size: 535566 type: array-backed]
17/11/03 08:50:14 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 08:50:14 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00005-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042117_301346): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:14 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 08:50:14 DEBUG RecordReaderImpl: chunks = [range start: 9615 end: 409579]
17/11/03 08:50:14 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 08:50:14 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00005-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042117_301346): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:14 DEBUG RecordReaderImpl: merge = [data range [9615, 409579), size: 399964 type: array-backed]
17/11/03 08:50:17 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00006-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, range: 0-917809, partition values: [empty row]
17/11/03 08:50:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #103
17/11/03 08:50:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #103
17/11/03 08:50:17 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:50:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #104
17/11/03 08:50:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #104
17/11/03 08:50:17 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 08:50:17 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=917809
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042112_301341; getBlockSize()=917809; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042112_301341; getBlockSize()=917809; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:50:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #105
17/11/03 08:50:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #105
17/11/03 08:50:17 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 08:50:17 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 08:50:17 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00006-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042112_301341): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:17 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00006-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:50:17 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:50:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #106
17/11/03 08:50:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #106
17/11/03 08:50:17 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:50:17 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=917809
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042112_301341; getBlockSize()=917809; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042112_301341; getBlockSize()=917809; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:50:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #107
17/11/03 08:50:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #107
17/11/03 08:50:17 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:50:17 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:50:17 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00006-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042112_301341): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:17 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 08:50:17 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 08:50:17 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00006-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 917809}
17/11/03 08:50:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #108
17/11/03 08:50:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #108
17/11/03 08:50:17 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 08:50:17 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=917809
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042112_301341; getBlockSize()=917809; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042112_301341; getBlockSize()=917809; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:50:17 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 08:50:17 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 08:50:17 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00006-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042112_301341): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:17 DEBUG RecordReaderImpl: chunks = [range start: 18439 end: 913165]
17/11/03 08:50:17 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 08:50:17 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00006-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042112_301341): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:17 DEBUG RecordReaderImpl: merge = [data range [18439, 913165), size: 894726 type: array-backed]
17/11/03 08:50:17 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 08:50:25 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074042150_301379 sending packet packet seqno: -1 offsetInBlock: 0 lastPacketInBlock: false lastByteOffsetInBlock: 0
17/11/03 08:50:25 DEBUG DFSClient: DFSClient seqno: -1 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 825677 flag: 0 flag: 0 flag: 0
17/11/03 08:50:25 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00007-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, range: 0-911827, partition values: [empty row]
17/11/03 08:50:25 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #109
17/11/03 08:50:25 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #109
17/11/03 08:50:25 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:50:25 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #110
17/11/03 08:50:25 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #110
17/11/03 08:50:25 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:50:25 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=911827
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042113_301342; getBlockSize()=911827; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042113_301342; getBlockSize()=911827; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:50:25 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #111
17/11/03 08:50:25 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #111
17/11/03 08:50:25 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 08:50:25 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 08:50:25 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00007-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042113_301342): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:25 DEBUG BlockReaderFactory: Closed potentially stale remote peer NioInetPeer(Socket[addr=/172.30.1.46,port=50010,localport=45692])
java.io.EOFException: Premature EOF: no length prefix available
	at org.apache.hadoop.hdfs.protocolPB.PBHelper.vintPrefixed(PBHelper.java:2293)
	at org.apache.hadoop.hdfs.RemoteBlockReader2.newBlockReader(RemoteBlockReader2.java:422)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReader(BlockReaderFactory.java:816)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReaderFromTcp(BlockReaderFactory.java:695)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:662)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:898)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:955)
	at java.io.DataInputStream.readFully(DataInputStream.java:195)
	at org.apache.hadoop.hive.ql.io.orc.ReaderImpl.extractMetaInfoFromFooter(ReaderImpl.java:369)
	at org.apache.hadoop.hive.ql.io.orc.ReaderImpl.<init>(ReaderImpl.java:316)
	at org.apache.hadoop.hive.ql.io.orc.OrcFile.createReader(OrcFile.java:187)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$getFileReader$2.apply(OrcFileOperator.scala:68)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$getFileReader$2.apply(OrcFileOperator.scala:67)
	at scala.collection.Iterator$$anon$11.next(Iterator.scala:409)
	at scala.collection.TraversableOnce$class.collectFirst(TraversableOnce.scala:145)
	at scala.collection.AbstractIterator.collectFirst(Iterator.scala:1336)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$.getFileReader(OrcFileOperator.scala:69)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$readSchema$1.apply(OrcFileOperator.scala:77)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$readSchema$1.apply(OrcFileOperator.scala:77)
	at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
	at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
	at scala.collection.immutable.List.foreach(List.scala:381)
	at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
	at scala.collection.immutable.List.flatMap(List.scala:344)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$.readSchema(OrcFileOperator.scala:77)
	at org.apache.spark.sql.hive.orc.OrcFileFormat$$anonfun$buildReader$2.apply(OrcFileFormat.scala:158)
	at org.apache.spark.sql.hive.orc.OrcFileFormat$$anonfun$buildReader$2.apply(OrcFileFormat.scala:152)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(fileSourceInterfaces.scala:279)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(fileSourceInterfaces.scala:263)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.nextIterator(FileScanRDD.scala:116)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.hasNext(FileScanRDD.scala:91)
	at org.apache.spark.sql.catalyst.expressions.GeneratedClass$GeneratedIterator.processNext(generated.java:35)
	at org.apache.spark.sql.execution.BufferedRowIterator.hasNext(BufferedRowIterator.java:43)
	at org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8$$anon$1.hasNext(WholeStageCodegenExec.scala:370)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$4.apply(SparkPlan.scala:246)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$4.apply(SparkPlan.scala:240)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$24.apply(RDD.scala:803)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$24.apply(RDD.scala:803)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:319)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:283)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:70)
	at org.apache.spark.scheduler.Task.run(Task.scala:86)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:274)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)
17/11/03 08:50:25 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 08:50:25 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00007-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:50:25 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:50:25 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #112
17/11/03 08:50:25 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #112
17/11/03 08:50:25 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:50:25 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=911827
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042113_301342; getBlockSize()=911827; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042113_301342; getBlockSize()=911827; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:50:25 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #113
17/11/03 08:50:25 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #113
17/11/03 08:50:25 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 08:50:25 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:50:25 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00007-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042113_301342): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:25 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:50:25 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 08:50:25 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00007-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 911827}
17/11/03 08:50:25 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #114
17/11/03 08:50:25 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #114
17/11/03 08:50:25 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:50:25 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=911827
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042113_301342; getBlockSize()=911827; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042113_301342; getBlockSize()=911827; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:50:25 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 08:50:25 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:50:25 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00007-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042113_301342): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:25 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 08:50:25 DEBUG RecordReaderImpl: chunks = [range start: 18123 end: 907220]
17/11/03 08:50:25 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:50:25 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00007-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042113_301342): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:25 DEBUG RecordReaderImpl: merge = [data range [18123, 907220), size: 889097 type: array-backed]
17/11/03 08:50:25 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 08:50:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #115
17/11/03 08:50:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #115
17/11/03 08:50:27 DEBUG ProtobufRpcEngine: Call: renewLease took 2ms
17/11/03 08:50:27 DEBUG LeaseRenewer: Lease renewed for client DFSClient_NONMAPREDUCE_-343447264_1
17/11/03 08:50:27 DEBUG LeaseRenewer: Lease renewer daemon for [DFSClient_NONMAPREDUCE_-343447264_1] with renew id 1 executed
17/11/03 08:50:34 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00008-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, range: 0-1919867, partition values: [empty row]
17/11/03 08:50:34 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #116
17/11/03 08:50:34 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #116
17/11/03 08:50:34 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:50:34 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #117
17/11/03 08:50:34 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #117
17/11/03 08:50:34 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:50:34 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1919867
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042125_301354; getBlockSize()=1919867; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042125_301354; getBlockSize()=1919867; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:50:34 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #118
17/11/03 08:50:34 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #118
17/11/03 08:50:34 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:50:34 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:50:34 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00008-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042125_301354): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:34 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:50:34 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00008-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:50:34 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:50:34 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #119
17/11/03 08:50:34 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #119
17/11/03 08:50:34 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:50:34 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1919867
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042125_301354; getBlockSize()=1919867; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042125_301354; getBlockSize()=1919867; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:50:34 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #120
17/11/03 08:50:34 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #120
17/11/03 08:50:34 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:50:34 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:50:34 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00008-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042125_301354): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:34 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 08:50:34 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00008-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 1919867}
17/11/03 08:50:34 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #121
17/11/03 08:50:34 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #121
17/11/03 08:50:34 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:50:34 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1919867
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042125_301354; getBlockSize()=1919867; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042125_301354; getBlockSize()=1919867; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:50:34 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 08:50:34 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:50:34 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00008-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042125_301354): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:34 DEBUG RecordReaderImpl: chunks = [range start: 20125 end: 998667]
17/11/03 08:50:34 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:50:34 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00008-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042125_301354): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:34 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:50:34 DEBUG RecordReaderImpl: merge = [data range [20125, 998667), size: 978542 type: array-backed]
17/11/03 08:50:34 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 08:50:43 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:50:43 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00008-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042125_301354): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:43 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:50:43 DEBUG RecordReaderImpl: chunks = [range start: 12705 end: 545222]
17/11/03 08:50:43 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:50:43 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00008-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042125_301354): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:43 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:50:43 DEBUG RecordReaderImpl: merge = [data range [12705, 545222), size: 532517 type: array-backed]
17/11/03 08:50:48 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:50:48 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00008-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042125_301354): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:48 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:50:48 DEBUG RecordReaderImpl: chunks = [range start: 8908 end: 365736]
17/11/03 08:50:48 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:50:48 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00008-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042125_301354): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:48 DEBUG RecordReaderImpl: merge = [data range [8908, 365736), size: 356828 type: array-backed]
17/11/03 08:50:51 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00009-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, range: 0-3303730, partition values: [empty row]
17/11/03 08:50:51 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #122
17/11/03 08:50:51 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #122
17/11/03 08:50:51 DEBUG ProtobufRpcEngine: Call: getFileInfo took 2ms
17/11/03 08:50:51 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #123
17/11/03 08:50:51 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #123
17/11/03 08:50:51 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 3ms
17/11/03 08:50:51 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=3303730
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042129_301358; getBlockSize()=3303730; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042129_301358; getBlockSize()=3303730; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:50:51 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #124
17/11/03 08:50:51 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #124
17/11/03 08:50:51 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 08:50:51 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:50:51 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00009-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042129_301358): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:51 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:50:51 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00009-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:50:51 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:50:51 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #125
17/11/03 08:50:51 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #125
17/11/03 08:50:51 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:50:51 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=3303730
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042129_301358; getBlockSize()=3303730; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042129_301358; getBlockSize()=3303730; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:50:51 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #126
17/11/03 08:50:51 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #126
17/11/03 08:50:51 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:50:51 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:50:51 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00009-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042129_301358): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:51 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 08:50:51 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00009-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 3303730}
17/11/03 08:50:51 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #127
17/11/03 08:50:51 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #127
17/11/03 08:50:51 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:50:51 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=3303730
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042129_301358; getBlockSize()=3303730; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042129_301358; getBlockSize()=3303730; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:50:51 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 08:50:51 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:50:51 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00009-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042129_301358): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:51 DEBUG RecordReaderImpl: chunks = [range start: 19286 end: 1277398]
17/11/03 08:50:51 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:50:51 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00009-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042129_301358): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:50:51 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:50:51 DEBUG RecordReaderImpl: merge = [data range [19286, 1277398), size: 1258112 type: array-backed]
17/11/03 08:50:51 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 08:50:55 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074042150_301379 sending packet packet seqno: -1 offsetInBlock: 0 lastPacketInBlock: false lastByteOffsetInBlock: 0
17/11/03 08:50:55 DEBUG DFSClient: DFSClient seqno: -1 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 757503 flag: 0 flag: 0 flag: 0
17/11/03 08:50:57 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #128
17/11/03 08:50:57 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #128
17/11/03 08:50:57 DEBUG ProtobufRpcEngine: Call: renewLease took 1ms
17/11/03 08:50:57 DEBUG LeaseRenewer: Lease renewed for client DFSClient_NONMAPREDUCE_-343447264_1
17/11/03 08:50:57 DEBUG LeaseRenewer: Lease renewer daemon for [DFSClient_NONMAPREDUCE_-343447264_1] with renew id 1 executed
17/11/03 08:50:57 DEBUG ContextCleaner: Got cleaning task CleanAccum(2)
17/11/03 08:50:57 DEBUG ContextCleaner: Cleaning accumulator 2
17/11/03 08:50:57 INFO ContextCleaner: Cleaned accumulator 2
17/11/03 08:50:57 DEBUG ContextCleaner: Got cleaning task CleanAccum(1)
17/11/03 08:50:57 DEBUG ContextCleaner: Cleaning accumulator 1
17/11/03 08:50:57 INFO ContextCleaner: Cleaned accumulator 1
17/11/03 08:50:57 DEBUG ContextCleaner: Got cleaning task CleanAccum(0)
17/11/03 08:50:57 DEBUG ContextCleaner: Cleaning accumulator 0
17/11/03 08:50:57 INFO ContextCleaner: Cleaned accumulator 0
17/11/03 08:50:57 DEBUG ContextCleaner: Got cleaning task CleanBroadcast(0)
17/11/03 08:50:57 DEBUG ContextCleaner: Cleaning broadcast 0
17/11/03 08:50:57 DEBUG TorrentBroadcast: Unpersisting TorrentBroadcast 0
17/11/03 08:50:57 DEBUG BlockManagerSlaveEndpoint: removing broadcast 0
17/11/03 08:50:57 DEBUG BlockManager: Removing broadcast 0
17/11/03 08:50:57 DEBUG BlockManager: Removing block broadcast_0_piece0
17/11/03 08:50:57 DEBUG MemoryStore: Block broadcast_0_piece0 of size 33266 dropped from memory (free 383221710)
17/11/03 08:50:57 INFO BlockManagerInfo: Removed broadcast_0_piece0 on 172.30.1.247:58060 in memory (size: 32.5 KB, free: 366.3 MB)
17/11/03 08:50:57 DEBUG BlockManagerMaster: Updated info of block broadcast_0_piece0
17/11/03 08:50:57 DEBUG BlockManager: Told master about block broadcast_0_piece0
17/11/03 08:50:57 DEBUG BlockManager: Removing block broadcast_0
17/11/03 08:50:57 DEBUG MemoryStore: Block broadcast_0 of size 393944 dropped from memory (free 383615654)
17/11/03 08:50:57 DEBUG BlockManagerSlaveEndpoint: Done removing broadcast 0, response is 0
17/11/03 08:50:57 DEBUG BlockManagerSlaveEndpoint: Sent response: 0 to 172.30.1.247:35967
17/11/03 08:50:57 DEBUG ContextCleaner: Cleaned broadcast 0
17/11/03 08:51:01 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:51:01 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00009-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042129_301358): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:01 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:51:01 DEBUG RecordReaderImpl: chunks = [range start: 12295 end: 681378]
17/11/03 08:51:01 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:51:01 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00009-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042129_301358): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:01 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:51:01 DEBUG RecordReaderImpl: merge = [data range [12295, 681378), size: 669083 type: array-backed]
17/11/03 08:51:05 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:51:05 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00009-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042129_301358): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:05 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:51:05 DEBUG RecordReaderImpl: chunks = [range start: 12418 end: 534306]
17/11/03 08:51:05 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:51:05 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00009-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042129_301358): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:05 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:51:05 DEBUG RecordReaderImpl: merge = [data range [12418, 534306), size: 521888 type: array-backed]
17/11/03 08:51:10 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:51:10 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00009-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042129_301358): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:10 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:51:10 DEBUG RecordReaderImpl: chunks = [range start: 11542 end: 498035]
17/11/03 08:51:10 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:51:10 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00009-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042129_301358): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:10 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:51:10 DEBUG RecordReaderImpl: merge = [data range [11542, 498035), size: 486493 type: array-backed]
17/11/03 08:51:14 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:51:14 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00009-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042129_301358): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:14 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:51:14 DEBUG RecordReaderImpl: chunks = [range start: 9973 end: 297063]
17/11/03 08:51:14 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:51:14 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00009-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042129_301358): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:14 DEBUG RecordReaderImpl: merge = [data range [9973, 297063), size: 287090 type: array-backed]
17/11/03 08:51:17 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00010-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, range: 0-908773, partition values: [empty row]
17/11/03 08:51:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #129
17/11/03 08:51:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #129
17/11/03 08:51:17 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:51:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #130
17/11/03 08:51:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #130
17/11/03 08:51:17 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:51:17 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=908773
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042123_301352; getBlockSize()=908773; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042123_301352; getBlockSize()=908773; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:51:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #131
17/11/03 08:51:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #131
17/11/03 08:51:17 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 08:51:17 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:51:17 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00010-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042123_301352): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:17 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00010-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:51:17 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:51:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #132
17/11/03 08:51:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #132
17/11/03 08:51:17 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:51:17 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=908773
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042123_301352; getBlockSize()=908773; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042123_301352; getBlockSize()=908773; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:51:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #133
17/11/03 08:51:17 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #133
17/11/03 08:51:18 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:51:18 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:51:18 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00010-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042123_301352): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:18 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 08:51:18 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00010-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 908773}
17/11/03 08:51:18 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #134
17/11/03 08:51:18 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #134
17/11/03 08:51:18 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:51:18 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=908773
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042123_301352; getBlockSize()=908773; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042123_301352; getBlockSize()=908773; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:51:18 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 08:51:18 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 08:51:18 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00010-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042123_301352): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:18 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 08:51:18 DEBUG RecordReaderImpl: chunks = [range start: 18712 end: 904117]
17/11/03 08:51:18 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 08:51:18 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00010-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042123_301352): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:18 DEBUG RecordReaderImpl: merge = [data range [18712, 904117), size: 885405 type: array-backed]
17/11/03 08:51:18 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 08:51:25 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074042150_301379 sending packet packet seqno: -1 offsetInBlock: 0 lastPacketInBlock: false lastByteOffsetInBlock: 0
17/11/03 08:51:25 DEBUG DFSClient: DFSClient seqno: -1 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 804982 flag: 0 flag: 0 flag: 0
17/11/03 08:51:26 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00011-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, range: 0-1952872, partition values: [empty row]
17/11/03 08:51:26 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #135
17/11/03 08:51:26 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #135
17/11/03 08:51:26 DEBUG ProtobufRpcEngine: Call: getFileInfo took 2ms
17/11/03 08:51:26 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #136
17/11/03 08:51:26 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #136
17/11/03 08:51:26 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:51:26 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1952872
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042132_301361; getBlockSize()=1952872; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042132_301361; getBlockSize()=1952872; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:51:26 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #137
17/11/03 08:51:26 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #137
17/11/03 08:51:26 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:51:26 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:51:26 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00011-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042132_301361): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:26 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:51:26 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00011-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:51:26 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:51:26 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #138
17/11/03 08:51:26 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #138
17/11/03 08:51:26 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 08:51:26 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1952872
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042132_301361; getBlockSize()=1952872; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042132_301361; getBlockSize()=1952872; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:51:26 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #139
17/11/03 08:51:26 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #139
17/11/03 08:51:26 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 08:51:26 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:51:26 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00011-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042132_301361): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:26 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 08:51:26 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00011-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 1952872}
17/11/03 08:51:26 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #140
17/11/03 08:51:26 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #140
17/11/03 08:51:26 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:51:26 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1952872
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042132_301361; getBlockSize()=1952872; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042132_301361; getBlockSize()=1952872; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:51:26 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 08:51:26 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:51:26 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00011-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042132_301361): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:26 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:51:26 DEBUG RecordReaderImpl: chunks = [range start: 20101 end: 1041969]
17/11/03 08:51:26 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:51:26 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00011-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042132_301361): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:26 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:51:26 DEBUG RecordReaderImpl: merge = [data range [20101, 1041969), size: 1021868 type: array-backed]
17/11/03 08:51:26 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 08:51:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #141
17/11/03 08:51:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #141
17/11/03 08:51:27 DEBUG ProtobufRpcEngine: Call: renewLease took 1ms
17/11/03 08:51:27 DEBUG LeaseRenewer: Lease renewed for client DFSClient_NONMAPREDUCE_-343447264_1
17/11/03 08:51:27 DEBUG LeaseRenewer: Lease renewer daemon for [DFSClient_NONMAPREDUCE_-343447264_1] with renew id 1 executed
17/11/03 08:51:35 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:51:35 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00011-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042132_301361): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:35 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:51:35 DEBUG RecordReaderImpl: chunks = [range start: 12470 end: 526770]
17/11/03 08:51:35 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:51:35 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00011-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042132_301361): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:35 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:51:35 DEBUG RecordReaderImpl: merge = [data range [12470, 526770), size: 514300 type: array-backed]
17/11/03 08:51:40 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:51:40 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00011-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042132_301361): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:40 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:51:40 DEBUG RecordReaderImpl: chunks = [range start: 11233 end: 373844]
17/11/03 08:51:40 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:51:40 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00011-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042132_301361): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:40 DEBUG RecordReaderImpl: merge = [data range [11233, 373844), size: 362611 type: array-backed]
17/11/03 08:51:44 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00012-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, range: 0-3798020, partition values: [empty row]
17/11/03 08:51:44 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #142
17/11/03 08:51:44 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #142
17/11/03 08:51:44 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:51:44 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #143
17/11/03 08:51:44 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #143
17/11/03 08:51:44 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 08:51:44 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=3798020
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363; getBlockSize()=3798020; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363; getBlockSize()=3798020; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:51:44 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #144
17/11/03 08:51:44 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #144
17/11/03 08:51:44 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 08:51:44 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:51:44 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00012-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:44 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00012-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:51:44 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:51:44 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #145
17/11/03 08:51:44 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #145
17/11/03 08:51:44 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:51:44 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=3798020
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363; getBlockSize()=3798020; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363; getBlockSize()=3798020; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:51:44 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #146
17/11/03 08:51:44 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #146
17/11/03 08:51:44 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 08:51:44 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:51:44 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00012-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:44 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 08:51:44 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 08:51:44 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00012-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 3798020}
17/11/03 08:51:44 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #147
17/11/03 08:51:44 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #147
17/11/03 08:51:44 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:51:44 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=3798020
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363; getBlockSize()=3798020; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363; getBlockSize()=3798020; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:51:44 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 08:51:44 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:51:44 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00012-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:44 DEBUG RecordReaderImpl: chunks = [range start: 20241 end: 983411]
17/11/03 08:51:44 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:51:44 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00012-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:44 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:51:44 DEBUG RecordReaderImpl: merge = [data range [20241, 983411), size: 963170 type: array-backed]
17/11/03 08:51:44 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 08:51:53 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:51:53 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00012-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:53 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:51:53 DEBUG RecordReaderImpl: chunks = [range start: 12204 end: 505525]
17/11/03 08:51:53 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:51:53 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00012-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:53 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:51:53 DEBUG RecordReaderImpl: merge = [data range [12204, 505525), size: 493321 type: array-backed]
17/11/03 08:51:55 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074042150_301379 sending packet packet seqno: -1 offsetInBlock: 0 lastPacketInBlock: false lastByteOffsetInBlock: 0
17/11/03 08:51:55 DEBUG DFSClient: DFSClient seqno: -1 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 767596 flag: 0 flag: 0 flag: 0
17/11/03 08:51:57 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #148
17/11/03 08:51:57 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #148
17/11/03 08:51:57 DEBUG ProtobufRpcEngine: Call: renewLease took 1ms
17/11/03 08:51:57 DEBUG LeaseRenewer: Lease renewed for client DFSClient_NONMAPREDUCE_-343447264_1
17/11/03 08:51:57 DEBUG LeaseRenewer: Lease renewer daemon for [DFSClient_NONMAPREDUCE_-343447264_1] with renew id 1 executed
17/11/03 08:51:57 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:51:57 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00012-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:57 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:51:57 DEBUG RecordReaderImpl: chunks = [range start: 11653 end: 483769]
17/11/03 08:51:57 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:51:57 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00012-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:51:57 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:51:57 DEBUG RecordReaderImpl: merge = [data range [11653, 483769), size: 472116 type: array-backed]
17/11/03 08:52:02 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:52:02 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00012-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:02 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:52:02 DEBUG RecordReaderImpl: chunks = [range start: 12688 end: 526846]
17/11/03 08:52:02 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:52:02 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00012-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:02 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:52:02 DEBUG RecordReaderImpl: merge = [data range [12688, 526846), size: 514158 type: array-backed]
17/11/03 08:52:07 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:52:07 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00012-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:07 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:52:07 DEBUG RecordReaderImpl: chunks = [range start: 13874 end: 529664]
17/11/03 08:52:07 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:52:07 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00012-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:07 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:52:07 DEBUG RecordReaderImpl: merge = [data range [13874, 529664), size: 515790 type: array-backed]
17/11/03 08:52:11 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:52:11 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00012-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:11 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:52:11 DEBUG RecordReaderImpl: chunks = [range start: 11700 end: 548153]
17/11/03 08:52:11 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:52:11 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00012-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:11 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:52:11 DEBUG RecordReaderImpl: merge = [data range [11700, 548153), size: 536453 type: array-backed]
17/11/03 08:52:16 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:52:16 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00012-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:16 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:52:16 DEBUG RecordReaderImpl: chunks = [range start: 6223 end: 199965]
17/11/03 08:52:16 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:52:16 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00012-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042134_301363): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:16 DEBUG RecordReaderImpl: merge = [data range [6223, 199965), size: 193742 type: array-backed]
17/11/03 08:52:18 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00015-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, range: 0-889960, partition values: [empty row]
17/11/03 08:52:18 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #149
17/11/03 08:52:18 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #149
17/11/03 08:52:18 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:52:18 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #150
17/11/03 08:52:18 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #150
17/11/03 08:52:18 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 08:52:18 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=889960
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042139_301368; getBlockSize()=889960; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042139_301368; getBlockSize()=889960; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:52:18 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #151
17/11/03 08:52:18 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #151
17/11/03 08:52:18 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:52:18 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:52:18 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00015-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042139_301368): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:18 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 08:52:18 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00015-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:52:18 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:52:18 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #152
17/11/03 08:52:18 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #152
17/11/03 08:52:18 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:52:18 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=889960
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042139_301368; getBlockSize()=889960; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042139_301368; getBlockSize()=889960; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:52:18 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #153
17/11/03 08:52:18 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #153
17/11/03 08:52:18 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:52:18 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 08:52:18 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00015-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042139_301368): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:18 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 08:52:18 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 08:52:18 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00015-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 889960}
17/11/03 08:52:18 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #154
17/11/03 08:52:18 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #154
17/11/03 08:52:18 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:52:18 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=889960
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042139_301368; getBlockSize()=889960; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042139_301368; getBlockSize()=889960; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:52:18 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 08:52:18 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:52:18 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00015-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042139_301368): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:18 DEBUG RecordReaderImpl: chunks = [range start: 18322 end: 885342]
17/11/03 08:52:18 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:52:18 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00015-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042139_301368): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:18 DEBUG RecordReaderImpl: merge = [data range [18322, 885342), size: 867020 type: array-backed]
17/11/03 08:52:18 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 08:52:25 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074042150_301379 sending packet packet seqno: -1 offsetInBlock: 0 lastPacketInBlock: false lastByteOffsetInBlock: 0
17/11/03 08:52:25 DEBUG DFSClient: DFSClient seqno: -1 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 755393 flag: 0 flag: 0 flag: 0
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #155
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #155
17/11/03 08:52:27 DEBUG ProtobufRpcEngine: Call: renewLease took 1ms
17/11/03 08:52:27 DEBUG LeaseRenewer: Lease renewed for client DFSClient_NONMAPREDUCE_-343447264_1
17/11/03 08:52:27 DEBUG LeaseRenewer: Lease renewer daemon for [DFSClient_NONMAPREDUCE_-343447264_1] with renew id 1 executed
17/11/03 08:52:27 INFO Executor: Finished task 0.0 in stage 1.0 (TID 1). 1386 bytes result sent to driver
17/11/03 08:52:27 DEBUG TaskSchedulerImpl: parentName: , name: TaskSet_1, runningTasks: 0
17/11/03 08:52:27 INFO TaskSetManager: Finished task 0.0 in stage 1.0 (TID 1) in 211600 ms on localhost (1/1)
17/11/03 08:52:27 INFO TaskSchedulerImpl: Removed TaskSet 1.0, whose tasks have all completed, from pool 
17/11/03 08:52:27 INFO DAGScheduler: ResultStage 1 (take at <console>:26) finished in 211.601 s
17/11/03 08:52:27 DEBUG DAGScheduler: After removal of stage 1, remaining stages = 0
17/11/03 08:52:27 INFO DAGScheduler: Job 1 finished: take at <console>:26, took 211.611668 s
17/11/03 08:52:27 DEBUG ClosureCleaner: +++ Cleaning closure <function1> (org.apache.spark.sql.execution.SparkPlan$$anonfun$5) +++
17/11/03 08:52:27 DEBUG ClosureCleaner:  + declared fields: 1
17/11/03 08:52:27 DEBUG ClosureCleaner:      public static final long org.apache.spark.sql.execution.SparkPlan$$anonfun$5.serialVersionUID
17/11/03 08:52:27 DEBUG ClosureCleaner:  + declared methods: 2
17/11/03 08:52:27 DEBUG ClosureCleaner:      public final java.lang.Object org.apache.spark.sql.execution.SparkPlan$$anonfun$5.apply(java.lang.Object)
17/11/03 08:52:27 DEBUG ClosureCleaner:      public final java.lang.Object org.apache.spark.sql.execution.SparkPlan$$anonfun$5.apply(scala.collection.Iterator)
17/11/03 08:52:27 DEBUG ClosureCleaner:  + inner classes: 0
17/11/03 08:52:27 DEBUG ClosureCleaner:  + outer classes: 0
17/11/03 08:52:27 DEBUG ClosureCleaner:  + outer objects: 0
17/11/03 08:52:27 DEBUG DFSClient: DFSClient writeChunk allocating new packet seqno=10, src=/spark2-history/local-1509698485756.inprogress, packetSize=65016, chunksPerPacket=126, bytesCurBlock=56832
17/11/03 08:52:27 DEBUG ClosureCleaner:  + populating accessed fields because this is the starting closure
17/11/03 08:52:27 DEBUG DFSClient: DFSClient flush(): bytesCurBlock=64551 lastFlushOffset=56901 createNewBlock=false
17/11/03 08:52:27 DEBUG DFSClient: Queued packet 10
17/11/03 08:52:27 DEBUG DFSClient: Waiting for ack for: 10
17/11/03 08:52:27 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074042150_301379 sending packet packet seqno: 10 offsetInBlock: 56832 lastPacketInBlock: false lastByteOffsetInBlock: 64551
17/11/03 08:52:27 DEBUG ClosureCleaner:  + fields accessed by starting closure: 0
17/11/03 08:52:27 DEBUG ClosureCleaner:  + there are no enclosing objects!
17/11/03 08:52:27 DEBUG ClosureCleaner:  +++ closure <function1> (org.apache.spark.sql.execution.SparkPlan$$anonfun$5) is now cleaned +++
17/11/03 08:52:27 DEBUG ClosureCleaner: +++ Cleaning closure <function2> (org.apache.spark.SparkContext$$anonfun$runJob$5) +++
17/11/03 08:52:27 DEBUG ClosureCleaner:  + declared fields: 2
17/11/03 08:52:27 DEBUG ClosureCleaner:      public static final long org.apache.spark.SparkContext$$anonfun$runJob$5.serialVersionUID
17/11/03 08:52:27 DEBUG ClosureCleaner:      private final scala.Function1 org.apache.spark.SparkContext$$anonfun$runJob$5.cleanedFunc$1
17/11/03 08:52:27 DEBUG ClosureCleaner:  + declared methods: 2
17/11/03 08:52:27 DEBUG ClosureCleaner:      public final java.lang.Object org.apache.spark.SparkContext$$anonfun$runJob$5.apply(java.lang.Object,java.lang.Object)
17/11/03 08:52:27 DEBUG ClosureCleaner:      public final java.lang.Object org.apache.spark.SparkContext$$anonfun$runJob$5.apply(org.apache.spark.TaskContext,scala.collection.Iterator)
17/11/03 08:52:27 DEBUG ClosureCleaner:  + inner classes: 0
17/11/03 08:52:27 DEBUG ClosureCleaner:  + outer classes: 0
17/11/03 08:52:27 DEBUG ClosureCleaner:  + outer objects: 0
17/11/03 08:52:27 DEBUG ClosureCleaner:  + populating accessed fields because this is the starting closure
17/11/03 08:52:27 DEBUG ClosureCleaner:  + fields accessed by starting closure: 0
17/11/03 08:52:27 DEBUG ClosureCleaner:  + there are no enclosing objects!
17/11/03 08:52:27 DEBUG ClosureCleaner:  +++ closure <function2> (org.apache.spark.SparkContext$$anonfun$runJob$5) is now cleaned +++
17/11/03 08:52:27 INFO SparkContext: Starting job: take at <console>:26
17/11/03 08:52:27 DEBUG DFSClient: DFSClient seqno: 10 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 1031303 flag: 0 flag: 0 flag: 0
17/11/03 08:52:27 DEBUG DFSClient: DFSClient writeChunk allocating new packet seqno=11, src=/spark2-history/local-1509698485756.inprogress, packetSize=65016, chunksPerPacket=126, bytesCurBlock=64512
17/11/03 08:52:27 DEBUG DFSClient: DFSClient flush(): bytesCurBlock=64665 lastFlushOffset=64551 createNewBlock=false
17/11/03 08:52:27 DEBUG DFSClient: Queued packet 11
17/11/03 08:52:27 DEBUG DFSClient: Waiting for ack for: 11
17/11/03 08:52:27 INFO DAGScheduler: Got job 2 (take at <console>:26) with 2 output partitions
17/11/03 08:52:27 INFO DAGScheduler: Final stage: ResultStage 2 (take at <console>:26)
17/11/03 08:52:27 INFO DAGScheduler: Parents of final stage: List()
17/11/03 08:52:27 INFO DAGScheduler: Missing parents: List()
17/11/03 08:52:27 DEBUG DAGScheduler: submitStage(ResultStage 2)
17/11/03 08:52:27 DEBUG DAGScheduler: missing: List()
17/11/03 08:52:27 INFO DAGScheduler: Submitting ResultStage 2 (MapPartitionsRDD[5] at take at <console>:26), which has no missing parents
17/11/03 08:52:27 DEBUG DAGScheduler: submitMissingTasks(ResultStage 2)
17/11/03 08:52:27 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074042150_301379 sending packet packet seqno: 11 offsetInBlock: 64512 lastPacketInBlock: false lastByteOffsetInBlock: 64665
17/11/03 08:52:27 INFO MemoryStore: Block broadcast_4 stored as values in memory (estimated size 37.6 KB, free 365.8 MB)
17/11/03 08:52:27 DEBUG BlockManager: Put block broadcast_4 locally took  0 ms
17/11/03 08:52:27 DEBUG BlockManager: Putting block broadcast_4 without replication took  0 ms
17/11/03 08:52:27 DEBUG DFSClient: DFSClient seqno: 11 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 608413 flag: 0 flag: 0 flag: 0
17/11/03 08:52:27 DEBUG DFSClient: DFSClient writeChunk allocating new packet seqno=12, src=/spark2-history/local-1509698485756.inprogress, packetSize=65016, chunksPerPacket=126, bytesCurBlock=64512
17/11/03 08:52:27 DEBUG DFSClient: DFSClient flush(): bytesCurBlock=66943 lastFlushOffset=64665 createNewBlock=false
17/11/03 08:52:27 DEBUG DFSClient: Queued packet 12
17/11/03 08:52:27 DEBUG DFSClient: Waiting for ack for: 12
17/11/03 08:52:27 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074042150_301379 sending packet packet seqno: 12 offsetInBlock: 64512 lastPacketInBlock: false lastByteOffsetInBlock: 66943
17/11/03 08:52:27 INFO MemoryStore: Block broadcast_4_piece0 stored as bytes in memory (estimated size 11.7 KB, free 365.8 MB)
17/11/03 08:52:27 INFO BlockManagerInfo: Added broadcast_4_piece0 in memory on 172.30.1.247:58060 (size: 11.7 KB, free: 366.2 MB)
17/11/03 08:52:27 DEBUG BlockManagerMaster: Updated info of block broadcast_4_piece0
17/11/03 08:52:27 DEBUG BlockManager: Told master about block broadcast_4_piece0
17/11/03 08:52:27 DEBUG BlockManager: Put block broadcast_4_piece0 locally took  1 ms
17/11/03 08:52:27 DEBUG BlockManager: Putting block broadcast_4_piece0 without replication took  1 ms
17/11/03 08:52:27 DEBUG DFSClient: DFSClient seqno: 12 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 772493 flag: 0 flag: 0 flag: 0
17/11/03 08:52:27 INFO SparkContext: Created broadcast 4 from broadcast at DAGScheduler.scala:1012
17/11/03 08:52:27 INFO DAGScheduler: Submitting 2 missing tasks from ResultStage 2 (MapPartitionsRDD[5] at take at <console>:26)
17/11/03 08:52:27 DEBUG DAGScheduler: New pending partitions: Set(1, 2)
17/11/03 08:52:27 INFO TaskSchedulerImpl: Adding task set 2.0 with 2 tasks
17/11/03 08:52:27 DEBUG TaskSetManager: Epoch for TaskSet 2.0: 0
17/11/03 08:52:27 DEBUG TaskSetManager: Valid locality levels for TaskSet 2.0: ANY
17/11/03 08:52:27 DEBUG TaskSchedulerImpl: parentName: , name: TaskSet_2, runningTasks: 0
17/11/03 08:52:27 INFO TaskSetManager: Starting task 0.0 in stage 2.0 (TID 2, localhost, partition 1, ANY, 7872 bytes)
17/11/03 08:52:27 INFO TaskSetManager: Starting task 1.0 in stage 2.0 (TID 3, localhost, partition 2, ANY, 7870 bytes)
17/11/03 08:52:27 INFO Executor: Running task 0.0 in stage 2.0 (TID 2)
17/11/03 08:52:27 INFO Executor: Running task 1.0 in stage 2.0 (TID 3)
17/11/03 08:52:27 DEBUG Executor: Task 2's epoch is 0
17/11/03 08:52:27 DEBUG BlockManager: Getting local block broadcast_4
17/11/03 08:52:27 DEBUG BlockManager: Level for block broadcast_4 is StorageLevel(disk, memory, deserialized, 1 replicas)
17/11/03 08:52:27 DEBUG Executor: Task 3's epoch is 0
17/11/03 08:52:27 DEBUG BlockManager: Getting local block broadcast_4
17/11/03 08:52:27 DEBUG BlockManager: Level for block broadcast_4 is StorageLevel(disk, memory, deserialized, 1 replicas)
17/11/03 08:52:27 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, range: 0-1020205, partition values: [empty row]
17/11/03 08:52:27 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00000-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc, range: 0-2899658, partition values: [empty row]
17/11/03 08:52:27 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 08:52:27 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 08:52:27 DEBUG BlockManager: Getting local block broadcast_2
17/11/03 08:52:27 DEBUG BlockManager: Level for block broadcast_2 is StorageLevel(disk, memory, deserialized, 1 replicas)
17/11/03 08:52:27 DEBUG BlockManager: Getting local block broadcast_2
17/11/03 08:52:27 DEBUG BlockManager: Level for block broadcast_2 is StorageLevel(disk, memory, deserialized, 1 replicas)
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #156
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #157
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #156
17/11/03 08:52:27 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #157
17/11/03 08:52:27 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #158
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #159
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #158
17/11/03 08:52:27 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #159
17/11/03 08:52:27 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 08:52:27 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1020205
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042108_301337; getBlockSize()=1020205; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042108_301337; getBlockSize()=1020205; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:52:27 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=2899658
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042102_301331; getBlockSize()=2899658; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042102_301331; getBlockSize()=2899658; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #160
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #160
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #161
17/11/03 08:52:27 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #161
17/11/03 08:52:27 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 08:52:27 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:52:27 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042108_301337): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:27 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 08:52:27 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00000-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042102_301331): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:27 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 08:52:27 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 08:52:27 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00000-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:52:27 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:52:27 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:52:27 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #162
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #162
17/11/03 08:52:27 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 4ms
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #163
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #163
17/11/03 08:52:27 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=2899658
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042102_301331; getBlockSize()=2899658; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042102_301331; getBlockSize()=2899658; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #164
17/11/03 08:52:27 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 2ms
17/11/03 08:52:27 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1020205
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042108_301337; getBlockSize()=1020205; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042108_301337; getBlockSize()=1020205; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #165
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #164
17/11/03 08:52:27 DEBUG ProtobufRpcEngine: Call: getFileInfo took 2ms
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #165
17/11/03 08:52:27 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 08:52:27 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00000-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042102_301331): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:27 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:52:27 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:52:27 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042108_301337): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:27 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:52:27 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 08:52:27 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00000-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 2899658}
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #166
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #166
17/11/03 08:52:27 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:52:27 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=2899658
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042102_301331; getBlockSize()=2899658; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042102_301331; getBlockSize()=2899658; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:52:27 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 08:52:27 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 1020205}
17/11/03 08:52:27 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 08:52:27 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:52:27 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00000-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042102_301331): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #167
17/11/03 08:52:27 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 08:52:27 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #167
17/11/03 08:52:27 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 5ms
17/11/03 08:52:27 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=1020205
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042108_301337; getBlockSize()=1020205; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042108_301337; getBlockSize()=1020205; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:52:27 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 08:52:27 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:52:27 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042108_301337): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:27 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 08:52:27 DEBUG RecordReaderImpl: chunks = [range start: 18993 end: 1015596]
17/11/03 08:52:27 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:52:27 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042108_301337): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:27 DEBUG RecordReaderImpl: chunks = [range start: 19954 end: 982308]
17/11/03 08:52:27 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:52:27 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00000-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042102_301331): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:27 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 08:52:27 DEBUG RecordReaderImpl: merge = [data range [18993, 1015596), size: 996603 type: array-backed]
17/11/03 08:52:27 DEBUG RecordReaderImpl: merge = [data range [19954, 982308), size: 962354 type: array-backed]
17/11/03 08:52:27 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 08:52:27 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

[Stage 2:>                                                          (0 + 2) / 2]17/11/03 08:52:39 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00006-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, range: 0-972276, partition values: [empty row]
17/11/03 08:52:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #168
17/11/03 08:52:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #168
17/11/03 08:52:39 DEBUG ProtobufRpcEngine: Call: getFileInfo took 2ms
17/11/03 08:52:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #169
17/11/03 08:52:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #169
17/11/03 08:52:39 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:52:39 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=972276
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042114_301343; getBlockSize()=972276; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042114_301343; getBlockSize()=972276; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:52:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #170
17/11/03 08:52:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #170
17/11/03 08:52:39 DEBUG ProtobufRpcEngine: Call: getFileInfo took 2ms
17/11/03 08:52:39 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 08:52:39 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00006-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042114_301343): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:39 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 08:52:39 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00006-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:52:39 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:52:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #171
17/11/03 08:52:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #171
17/11/03 08:52:39 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:52:39 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=972276
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042114_301343; getBlockSize()=972276; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042114_301343; getBlockSize()=972276; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:52:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #172
17/11/03 08:52:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #172
17/11/03 08:52:39 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:52:39 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 08:52:39 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00006-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042114_301343): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:39 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 08:52:39 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00006-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 972276}
17/11/03 08:52:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #173
17/11/03 08:52:39 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #173
17/11/03 08:52:39 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 4ms
17/11/03 08:52:39 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=972276
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042114_301343; getBlockSize()=972276; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042114_301343; getBlockSize()=972276; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:52:39 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 08:52:39 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:52:39 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00006-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042114_301343): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:39 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:52:39 DEBUG RecordReaderImpl: chunks = [range start: 18888 end: 967638]
17/11/03 08:52:39 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:52:39 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00006-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042114_301343): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:39 DEBUG RecordReaderImpl: merge = [data range [18888, 967638), size: 948750 type: array-backed]
17/11/03 08:52:39 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 08:52:39 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:52:39 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00000-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042102_301331): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:39 DEBUG BlockReaderFactory: Closed potentially stale remote peer NioInetPeer(Socket[addr=/172.30.1.239,port=50010,localport=41394])
java.io.EOFException: Premature EOF: no length prefix available
	at org.apache.hadoop.hdfs.protocolPB.PBHelper.vintPrefixed(PBHelper.java:2293)
	at org.apache.hadoop.hdfs.RemoteBlockReader2.newBlockReader(RemoteBlockReader2.java:422)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReader(BlockReaderFactory.java:816)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReaderFromTcp(BlockReaderFactory.java:695)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:662)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:898)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:955)
	at java.io.DataInputStream.readFully(DataInputStream.java:195)
	at org.apache.hadoop.hive.ql.io.orc.MetadataReader.readStripeFooter(MetadataReader.java:112)
	at org.apache.hadoop.hive.ql.io.orc.RecordReaderImpl.readStripeFooter(RecordReaderImpl.java:228)
	at org.apache.hadoop.hive.ql.io.orc.RecordReaderImpl.beginReadStripe(RecordReaderImpl.java:805)
	at org.apache.hadoop.hive.ql.io.orc.RecordReaderImpl.readStripe(RecordReaderImpl.java:776)
	at org.apache.hadoop.hive.ql.io.orc.RecordReaderImpl.advanceStripe(RecordReaderImpl.java:986)
	at org.apache.hadoop.hive.ql.io.orc.RecordReaderImpl.advanceToNextRow(RecordReaderImpl.java:1019)
	at org.apache.hadoop.hive.ql.io.orc.RecordReaderImpl.next(RecordReaderImpl.java:1042)
	at org.apache.hadoop.hive.ql.io.orc.SparkOrcNewRecordReader.nextKeyValue(SparkOrcNewRecordReader.java:83)
	at org.apache.spark.sql.execution.datasources.RecordReaderIterator.hasNext(RecordReaderIterator.scala:39)
	at scala.collection.Iterator$$anon$11.hasNext(Iterator.scala:408)
	at scala.collection.Iterator$$anon$11.hasNext(Iterator.scala:408)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.hasNext(FileScanRDD.scala:91)
	at org.apache.spark.sql.catalyst.expressions.GeneratedClass$GeneratedIterator.processNext(generated.java:35)
	at org.apache.spark.sql.execution.BufferedRowIterator.hasNext(BufferedRowIterator.java:43)
	at org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8$$anon$1.hasNext(WholeStageCodegenExec.scala:370)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$4.apply(SparkPlan.scala:246)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$4.apply(SparkPlan.scala:240)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$24.apply(RDD.scala:803)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$24.apply(RDD.scala:803)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:319)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:283)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:70)
	at org.apache.spark.scheduler.Task.run(Task.scala:86)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:274)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)
17/11/03 08:52:39 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 08:52:39 DEBUG RecordReaderImpl: chunks = [range start: 12083 end: 506179]
17/11/03 08:52:39 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:52:39 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00000-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042102_301331): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:39 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 08:52:39 DEBUG RecordReaderImpl: merge = [data range [12083, 506179), size: 494096 type: array-backed]
17/11/03 08:52:50 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:52:50 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00000-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042102_301331): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:50 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 08:52:50 DEBUG RecordReaderImpl: chunks = [range start: 11774 end: 492693]
17/11/03 08:52:50 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:52:50 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00000-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042102_301331): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:52:50 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 08:52:50 DEBUG RecordReaderImpl: merge = [data range [11774, 492693), size: 480919 type: array-backed]
17/11/03 08:52:57 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #174
17/11/03 08:52:57 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #174
17/11/03 08:52:57 DEBUG ProtobufRpcEngine: Call: renewLease took 5ms
17/11/03 08:52:57 DEBUG LeaseRenewer: Lease renewed for client DFSClient_NONMAPREDUCE_-343447264_1
17/11/03 08:52:57 DEBUG LeaseRenewer: Lease renewer daemon for [DFSClient_NONMAPREDUCE_-343447264_1] with renew id 1 executed
17/11/03 08:52:57 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074042150_301379 sending packet packet seqno: -1 offsetInBlock: 0 lastPacketInBlock: false lastByteOffsetInBlock: 0
17/11/03 08:52:57 DEBUG DFSClient: DFSClient seqno: -1 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 806412 flag: 0 flag: 0 flag: 0
17/11/03 08:53:00 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00007-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, range: 0-894731, partition values: [empty row]
17/11/03 08:53:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #175
17/11/03 08:53:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #175
17/11/03 08:53:00 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:53:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #176
17/11/03 08:53:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #176
17/11/03 08:53:00 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:53:00 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=894731
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042118_301347; getBlockSize()=894731; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042118_301347; getBlockSize()=894731; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:53:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #177
17/11/03 08:53:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #177
17/11/03 08:53:00 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:53:00 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:53:00 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00007-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042118_301347): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:00 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:53:00 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00007-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:53:00 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:53:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #178
17/11/03 08:53:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #178
17/11/03 08:53:00 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 3ms
17/11/03 08:53:00 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=894731
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042118_301347; getBlockSize()=894731; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042118_301347; getBlockSize()=894731; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:53:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #179
17/11/03 08:53:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #179
17/11/03 08:53:00 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:53:00 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 08:53:00 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00007-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042118_301347): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:00 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 08:53:00 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 08:53:00 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00007-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 894731}
17/11/03 08:53:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #180
17/11/03 08:53:00 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #180
17/11/03 08:53:00 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 2ms
17/11/03 08:53:00 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=894731
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042118_301347; getBlockSize()=894731; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042118_301347; getBlockSize()=894731; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:53:00 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 08:53:00 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:53:00 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00007-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042118_301347): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:00 DEBUG RecordReaderImpl: chunks = [range start: 18279 end: 890073]
17/11/03 08:53:00 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:53:00 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00007-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042118_301347): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:00 DEBUG RecordReaderImpl: merge = [data range [18279, 890073), size: 871794 type: array-backed]
17/11/03 08:53:00 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 08:53:01 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:53:01 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00000-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042102_301331): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:01 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 08:53:01 DEBUG RecordReaderImpl: chunks = [range start: 12628 end: 542236]
17/11/03 08:53:01 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:53:01 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00000-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042102_301331): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:01 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 08:53:01 DEBUG RecordReaderImpl: merge = [data range [12628, 542236), size: 529608 type: array-backed]
17/11/03 08:53:07 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:53:07 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00000-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042102_301331): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:07 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 08:53:07 DEBUG RecordReaderImpl: chunks = [range start: 10166 end: 360623]
17/11/03 08:53:07 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:53:07 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00000-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042102_301331): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:07 DEBUG RecordReaderImpl: merge = [data range [10166, 360623), size: 350457 type: array-backed]
17/11/03 08:53:10 DEBUG ContextCleaner: Got cleaning task CleanBroadcast(3)
17/11/03 08:53:10 DEBUG ContextCleaner: Cleaning broadcast 3
17/11/03 08:53:10 DEBUG TorrentBroadcast: Unpersisting TorrentBroadcast 3
17/11/03 08:53:10 DEBUG BlockManagerSlaveEndpoint: removing broadcast 3
17/11/03 08:53:10 DEBUG BlockManager: Removing broadcast 3
17/11/03 08:53:10 DEBUG BlockManager: Removing block broadcast_3_piece0
17/11/03 08:53:10 DEBUG MemoryStore: Block broadcast_3_piece0 of size 12012 dropped from memory (free 383577132)
17/11/03 08:53:10 INFO BlockManagerInfo: Removed broadcast_3_piece0 on 172.30.1.247:58060 in memory (size: 11.7 KB, free: 366.3 MB)
17/11/03 08:53:10 DEBUG BlockManagerMaster: Updated info of block broadcast_3_piece0
17/11/03 08:53:10 DEBUG BlockManager: Told master about block broadcast_3_piece0
17/11/03 08:53:10 DEBUG BlockManager: Removing block broadcast_3
17/11/03 08:53:10 DEBUG MemoryStore: Block broadcast_3 of size 38512 dropped from memory (free 383615644)
17/11/03 08:53:10 DEBUG BlockManagerSlaveEndpoint: Done removing broadcast 3, response is 0
17/11/03 08:53:10 DEBUG BlockManagerSlaveEndpoint: Sent response: 0 to 172.30.1.247:35967
17/11/03 08:53:10 DEBUG ContextCleaner: Cleaned broadcast 3
17/11/03 08:53:10 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00008-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, range: 0-972835, partition values: [empty row]
17/11/03 08:53:10 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #181
17/11/03 08:53:10 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #181
17/11/03 08:53:10 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 08:53:10 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #182
17/11/03 08:53:10 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #182
17/11/03 08:53:10 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:53:10 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=972835
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042128_301357; getBlockSize()=972835; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042128_301357; getBlockSize()=972835; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:53:10 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #183
17/11/03 08:53:10 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #183
17/11/03 08:53:10 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:53:10 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:53:10 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00008-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042128_301357): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:10 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:53:10 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00008-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:53:10 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:53:10 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #184
17/11/03 08:53:10 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #184
17/11/03 08:53:10 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:53:10 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=972835
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042128_301357; getBlockSize()=972835; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042128_301357; getBlockSize()=972835; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:53:10 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #185
17/11/03 08:53:10 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #185
17/11/03 08:53:10 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:53:10 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:53:10 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00008-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042128_301357): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:10 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 08:53:10 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 08:53:10 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00008-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 972835}
17/11/03 08:53:10 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #186
17/11/03 08:53:10 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #186
17/11/03 08:53:10 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:53:10 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=972835
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042128_301357; getBlockSize()=972835; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042128_301357; getBlockSize()=972835; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:53:10 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 08:53:10 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:53:10 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00008-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042128_301357): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:10 DEBUG RecordReaderImpl: chunks = [range start: 18944 end: 968189]
17/11/03 08:53:10 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:53:10 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00008-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042128_301357): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:10 DEBUG RecordReaderImpl: merge = [data range [18944, 968189), size: 949245 type: array-backed]
17/11/03 08:53:10 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 08:53:11 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc, range: 0-2813568, partition values: [empty row]
17/11/03 08:53:11 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #187
17/11/03 08:53:11 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #187
17/11/03 08:53:11 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:53:11 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #188
17/11/03 08:53:11 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #188
17/11/03 08:53:11 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:53:11 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=2813568
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042109_301338; getBlockSize()=2813568; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042109_301338; getBlockSize()=2813568; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:53:11 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #189
17/11/03 08:53:11 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #189
17/11/03 08:53:11 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 08:53:11 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:53:11 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042109_301338): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:11 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:53:11 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:53:11 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:53:11 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #190
17/11/03 08:53:11 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #190
17/11/03 08:53:11 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 4ms
17/11/03 08:53:11 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=2813568
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042109_301338; getBlockSize()=2813568; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042109_301338; getBlockSize()=2813568; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:53:11 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #191
17/11/03 08:53:11 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #191
17/11/03 08:53:11 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:53:11 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:53:11 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042109_301338): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:11 DEBUG BlockReaderFactory: Closed potentially stale remote peer NioInetPeer(Socket[addr=/172.30.1.218,port=50010,localport=32995])
java.io.EOFException: Premature EOF: no length prefix available
	at org.apache.hadoop.hdfs.protocolPB.PBHelper.vintPrefixed(PBHelper.java:2293)
	at org.apache.hadoop.hdfs.RemoteBlockReader2.newBlockReader(RemoteBlockReader2.java:422)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReader(BlockReaderFactory.java:816)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReaderFromTcp(BlockReaderFactory.java:695)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:662)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:898)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:955)
	at java.io.DataInputStream.readFully(DataInputStream.java:195)
	at org.apache.hadoop.hive.ql.io.orc.ReaderImpl.extractMetaInfoFromFooter(ReaderImpl.java:369)
	at org.apache.hadoop.hive.ql.io.orc.ReaderImpl.<init>(ReaderImpl.java:316)
	at org.apache.hadoop.hive.ql.io.orc.OrcFile.createReader(OrcFile.java:237)
	at org.apache.spark.sql.hive.orc.OrcFileFormat$$anonfun$buildReader$2.apply(OrcFileFormat.scala:178)
	at org.apache.spark.sql.hive.orc.OrcFileFormat$$anonfun$buildReader$2.apply(OrcFileFormat.scala:152)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(fileSourceInterfaces.scala:279)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(fileSourceInterfaces.scala:263)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.nextIterator(FileScanRDD.scala:116)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.hasNext(FileScanRDD.scala:91)
	at org.apache.spark.sql.catalyst.expressions.GeneratedClass$GeneratedIterator.processNext(generated.java:35)
	at org.apache.spark.sql.execution.BufferedRowIterator.hasNext(BufferedRowIterator.java:43)
	at org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8$$anon$1.hasNext(WholeStageCodegenExec.scala:370)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$4.apply(SparkPlan.scala:246)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$4.apply(SparkPlan.scala:240)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$24.apply(RDD.scala:803)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$24.apply(RDD.scala:803)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:319)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:283)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:70)
	at org.apache.spark.scheduler.Task.run(Task.scala:86)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:274)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)
17/11/03 08:53:11 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:53:11 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 08:53:11 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 2813568}
17/11/03 08:53:11 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #192
17/11/03 08:53:11 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #192
17/11/03 08:53:11 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:53:11 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=2813568
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042109_301338; getBlockSize()=2813568; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042109_301338; getBlockSize()=2813568; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:53:11 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 08:53:11 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:53:11 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042109_301338): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:11 DEBUG RecordReaderImpl: chunks = [range start: 20392 end: 976502]
17/11/03 08:53:11 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:53:11 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042109_301338): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:11 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:53:11 DEBUG RecordReaderImpl: merge = [data range [20392, 976502), size: 956110 type: array-backed]
17/11/03 08:53:11 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 08:53:19 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00010-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, range: 0-938620, partition values: [empty row]
17/11/03 08:53:19 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #193
17/11/03 08:53:19 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #193
17/11/03 08:53:19 DEBUG ProtobufRpcEngine: Call: getFileInfo took 2ms
17/11/03 08:53:19 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #194
17/11/03 08:53:19 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #194
17/11/03 08:53:19 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 0ms
17/11/03 08:53:19 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=938620
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042126_301355; getBlockSize()=938620; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042126_301355; getBlockSize()=938620; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:53:19 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #195
17/11/03 08:53:19 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #195
17/11/03 08:53:19 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 08:53:19 DEBUG DFSClient: Connecting to datanode 172.30.1.136:50010
17/11/03 08:53:19 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00010-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042126_301355): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:19 DEBUG BlockReaderFactory: Closed potentially stale remote peer NioInetPeer(Socket[addr=/172.30.1.136,port=50010,localport=59324])
java.io.EOFException: Premature EOF: no length prefix available
	at org.apache.hadoop.hdfs.protocolPB.PBHelper.vintPrefixed(PBHelper.java:2293)
	at org.apache.hadoop.hdfs.RemoteBlockReader2.newBlockReader(RemoteBlockReader2.java:422)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReader(BlockReaderFactory.java:816)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReaderFromTcp(BlockReaderFactory.java:695)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:662)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:898)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:955)
	at java.io.DataInputStream.readFully(DataInputStream.java:195)
	at org.apache.hadoop.hive.ql.io.orc.ReaderImpl.extractMetaInfoFromFooter(ReaderImpl.java:369)
	at org.apache.hadoop.hive.ql.io.orc.ReaderImpl.<init>(ReaderImpl.java:316)
	at org.apache.hadoop.hive.ql.io.orc.OrcFile.createReader(OrcFile.java:187)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$getFileReader$2.apply(OrcFileOperator.scala:68)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$getFileReader$2.apply(OrcFileOperator.scala:67)
	at scala.collection.Iterator$$anon$11.next(Iterator.scala:409)
	at scala.collection.TraversableOnce$class.collectFirst(TraversableOnce.scala:145)
	at scala.collection.AbstractIterator.collectFirst(Iterator.scala:1336)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$.getFileReader(OrcFileOperator.scala:69)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$readSchema$1.apply(OrcFileOperator.scala:77)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$$anonfun$readSchema$1.apply(OrcFileOperator.scala:77)
	at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
	at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)
	at scala.collection.immutable.List.foreach(List.scala:381)
	at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)
	at scala.collection.immutable.List.flatMap(List.scala:344)
	at org.apache.spark.sql.hive.orc.OrcFileOperator$.readSchema(OrcFileOperator.scala:77)
	at org.apache.spark.sql.hive.orc.OrcFileFormat$$anonfun$buildReader$2.apply(OrcFileFormat.scala:158)
	at org.apache.spark.sql.hive.orc.OrcFileFormat$$anonfun$buildReader$2.apply(OrcFileFormat.scala:152)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(fileSourceInterfaces.scala:279)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(fileSourceInterfaces.scala:263)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.nextIterator(FileScanRDD.scala:116)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.hasNext(FileScanRDD.scala:91)
	at org.apache.spark.sql.catalyst.expressions.GeneratedClass$GeneratedIterator.processNext(generated.java:35)
	at org.apache.spark.sql.execution.BufferedRowIterator.hasNext(BufferedRowIterator.java:43)
	at org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8$$anon$1.hasNext(WholeStageCodegenExec.scala:370)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$4.apply(SparkPlan.scala:246)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$4.apply(SparkPlan.scala:240)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$24.apply(RDD.scala:803)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$24.apply(RDD.scala:803)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:319)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:283)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:70)
	at org.apache.spark.scheduler.Task.run(Task.scala:86)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:274)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)
17/11/03 08:53:19 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.136, datanodeId = DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]
17/11/03 08:53:19 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00010-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:53:19 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 08:53:19 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #196
17/11/03 08:53:19 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #196
17/11/03 08:53:19 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 08:53:19 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=938620
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042126_301355; getBlockSize()=938620; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042126_301355; getBlockSize()=938620; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:53:19 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #197
17/11/03 08:53:19 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #197
17/11/03 08:53:19 DEBUG ProtobufRpcEngine: Call: getFileInfo took 0ms
17/11/03 08:53:19 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:53:19 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00010-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042126_301355): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:19 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:53:19 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 08:53:19 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00010-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 938620}
17/11/03 08:53:19 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #198
17/11/03 08:53:19 DEBUG Client: IPC Client (260580453) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #198
17/11/03 08:53:19 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 2ms
17/11/03 08:53:19 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=938620
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042126_301355; getBlockSize()=938620; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042126_301355; getBlockSize()=938620; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.136:50010,DS-1a938e67-2306-473d-9a8c-2520b370a30c,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}
  isLastBlockComplete=true}
17/11/03 08:53:19 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 08:53:19 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:53:19 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00010-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042126_301355): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:19 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 08:53:19 DEBUG RecordReaderImpl: chunks = [range start: 18496 end: 934057]
17/11/03 08:53:19 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 08:53:19 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00010-2ff955ed-b05d-4099-91a5-a832b62e1529_00001.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042126_301355): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:19 DEBUG RecordReaderImpl: merge = [data range [18496, 934057), size: 915561 type: array-backed]
17/11/03 08:53:19 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 08:53:20 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:53:20 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042109_301338): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:20 DEBUG RecordReaderImpl: chunks = [range start: 11943 end: 511695]
17/11/03 08:53:20 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 08:53:20 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00002.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042109_301338): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 08:53:20 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 08:53:20 DEBUG RecordReaderImpl: merge = [data range [11943, 511695), size: 499752 type: array-backed]

