scala> testbucket.printSchema()17/11/03 09:02:21 DEBUG Client: IPC Client (1087916281) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user: closed
17/11/03 09:02:21 DEBUG Client: IPC Client (1087916281) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user: stopped, remaining connections 0
17/11/03 09:02:21 DEBUG Client: The ping interval is 60000 ms.
17/11/03 09:02:21 DEBUG Client: Connecting to ip-172-30-1-247.ec2.internal/172.30.1.247:8020
17/11/03 09:02:21 DEBUG Client: IPC Client (1087916281) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user: starting, having connections 1
17/11/03 09:02:21 DEBUG Client: IPC Client (1087916281) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #74
17/11/03 09:02:21 DEBUG Client: IPC Client (1087916281) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #74
17/11/03 09:02:21 DEBUG ProtobufRpcEngine: Call: renewLease took 4ms
17/11/03 09:02:21 DEBUG LeaseRenewer: Lease renewed for client DFSClient_NONMAPREDUCE_-1913337261_1
17/11/03 09:02:21 DEBUG LeaseRenewer: Lease renewer daemon for [DFSClient_NONMAPREDUCE_-1913337261_1] with renew id 1 executed
17/11/03 09:02:22 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074042151_301380 sending packet packet seqno: -1 offsetInBlock: 0 lastPacketInBlock: false lastByteOffsetInBlock: 0
17/11/03 09:02:22 DEBUG DFSClient: DFSClient seqno: -1 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 917704 flag: 0 flag: 0 flag: 0

root
 |-- c_customer_sk: decimal(38,0) (nullable = true)
 |-- c_customer_id: string (nullable = true)
 |-- c_current_cdemo_sk: decimal(38,0) (nullable = true)
 |-- c_current_hdemo_sk: decimal(38,0) (nullable = true)
 |-- c_current_addr_sk: decimal(38,0) (nullable = true)
 |-- c_first_shipto_date_sk: decimal(38,0) (nullable = true)
 |-- c_first_sales_date_sk: decimal(38,0) (nullable = true)
 |-- c_first_name: string (nullable = true)
 |-- c_last_name: string (nullable = true)
 |-- c_preferred_cust_flag: string (nullable = true)
 |-- c_birth_day: decimal(38,0) (nullable = true)
 |-- c_birth_month: decimal(38,0) (nullable = true)
 |-- c_birth_year: decimal(38,0) (nullable = true)
 |-- c_birth_country: string (nullable = true)
 |-- c_login: string (nullable = true)
 |-- c_email_address: string (nullable = true)
 |-- c_last_review_date: string (nullable = true)
 |-- c_customer_sk__customer: decimal(38,0) (nullable = true)
 |-- c_customer_id__customer: string (nullable = true)
 |-- c_current_cdemo_sk__customer: decimal(38,0) (nullable = true)
 |-- c_current_hdemo_sk__customer: decimal(38,0) (nullable = true)
 |-- c_current_addr_sk__customer: decimal(38,0) (nullable = true)
 |-- c_first_shipto_date_sk__customer: decimal(38,0) (nullable = true)
 |-- c_first_sales_date_sk__customer: decimal(38,0) (nullable = true)
 |-- c_salutation__customer: string (nullable = true)
 |-- c_first_name__customer: string (nullable = true)
 |-- c_last_name__customer: string (nullable = true)
 |-- c_preferred_cust_flag__customer: string (nullable = true)
 |-- c_birth_day__customer: decimal(38,0) (nullable = true)
 |-- c_birth_month__customer: decimal(38,0) (nullable = true)
 |-- c_birth_year__customer: decimal(38,0) (nullable = true)
 |-- c_birth_country__customer: string (nullable = true)
 |-- c_login__customer: string (nullable = true)
 |-- c_email_address__customer: string (nullable = true)
 |-- c_last_review_date__customer: string (nullable = true)
 |-- c_customer_sk__customer_2: decimal(38,0) (nullable = true)
 |-- c_customer_id__customer_2: string (nullable = true)
 |-- c_current_cdemo_sk__customer_2: decimal(38,0) (nullable = true)
 |-- c_current_hdemo_sk__customer_2: decimal(38,0) (nullable = true)
 |-- c_current_addr_sk__customer_2: decimal(38,0) (nullable = true)
 |-- c_first_shipto_date_sk__customer_2: decimal(38,0) (nullable = true)
 |-- c_first_sales_date_sk__customer_2: decimal(38,0) (nullable = true)
 |-- c_salutation__customer_2: string (nullable = true)
 |-- c_first_name__customer_2: string (nullable = true)
 |-- c_last_name__customer_2: string (nullable = true)
 |-- c_preferred_cust_flag__customer_2: string (nullable = true)
 |-- c_birth_day__customer_2: decimal(38,0) (nullable = true)
 |-- c_birth_month__customer_2: decimal(38,0) (nullable = true)
 |-- c_birth_year__customer_2: decimal(38,0) (nullable = true)
 |-- c_birth_country__customer_2: string (nullable = true)
 |-- c_login__customer_2: string (nullable = true)
 |-- c_email_address__customer_2: string (nullable = true)
 |-- c_last_review_date__customer_2: string (nullable = true)
 |-- c_customer_sk__customer_3: decimal(38,0) (nullable = true)
 |-- c_customer_id__customer_3: string (nullable = true)
 |-- c_current_cdemo_sk__customer_3: decimal(38,0) (nullable = true)
 |-- c_current_hdemo_sk__customer_3: decimal(38,0) (nullable = true)
 |-- c_current_addr_sk__customer_3: decimal(38,0) (nullable = true)
 |-- c_first_shipto_date_sk__customer_3: decimal(38,0) (nullable = true)
 |-- c_first_sales_date_sk__customer_3: decimal(38,0) (nullable = true)
 |-- c_salutation__customer_3: string (nullable = true)
 |-- c_first_name__customer_3: string (nullable = true)
 |-- c_last_name__customer_3: string (nullable = true)
 |-- c_preferred_cust_flag__customer_3: string (nullable = true)
 |-- c_birth_day__customer_3: decimal(38,0) (nullable = true)
 |-- c_birth_month__customer_3: decimal(38,0) (nullable = true)
 |-- c_birth_year__customer_3: decimal(38,0) (nullable = true)
 |-- c_birth_country__customer_3: string (nullable = true)
 |-- c_login__customer_3: string (nullable = true)
 |-- c_email_address__customer_3: string (nullable = true)
 |-- c_last_review_date__customer_3: string (nullable = true)
 |-- ziw_row_id: string (nullable = true)
 |-- ziw_created_timestamp: timestamp (nullable = true)
 |-- ziw_updated_timestamp: timestamp (nullable = true)
 |-- ziw_status_flag: string (nullable = true)
 |-- c_salutation: string (nullable = true)


scala> 

scala> 

scala> testbucket.filter("ziw_row_id = '91c36e90096e5b5b6d5de85077018406'").take(10)
17/11/03 09:02:30 INFO SparkSqlParser: Parsing command: ziw_row_id = '91c36e90096e5b5b6d5de85077018406'
17/11/03 09:02:30 DEBUG Analyzer$ResolveReferences: Resolving 'ziw_row_id to ziw_row_id#71
17/11/03 09:02:30 WARN Utils: Truncated the string representation of a plan since it was too large. This behavior can be adjusted by setting 'spark.debug.maxToStringFields' in SparkEnv.conf.
17/11/03 09:02:30 DEBUG HiveSessionState$$anon$1: 
=== Result of Batch Resolution ===
!'Filter ('ziw_row_id = 91c36e90096e5b5b6d5deilter (ziw_row_id#71 = 91c36e90096e5b5b6d5de85077018406)
 +- Project [c_customer_sk#0, c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_shipto_date_sk#5, c_first_sales_date_sk#6, c_first_name#7, c_last_name#8, c_preferred_cust_flag#9, c_birth_day#10, c_birth_month#11, c_birth_year#12, c_birth_country#13, c_login#14, c_email_address#15, c_last_review_date#16, c_customer_sk__customer#17, c_customer_id__customer#18, c_current_cdemo_sk__customer#19, c_current_hdemo_sk__customer#20, c_current_addr_sk__customer#21, c_first_shipto_date_sk__customer#22, c_first_sales_date_sk__customer#23, ... 52 more fields]   +- Project [c_customer_sk#0, c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_shipto_date_sk#5, c_first_sales_date_sk#6, c_first_name#7, c_last_name#8, c_preferred_cust_flag#9, c_birth_day#10, c_birth_month#11, c_birth_year#12, c_birth_country#13, c_login#14, c_email_address#15, c_last_review_date#16, c_customer_sk__customer#17, c_customer_id__customer#18, c_current_cdemo_sk__customer#19, c_current_hdemo_sk__customer#20, c_current_addr_sk__customer#21, c_first_shipto_date_sk__customer#22, c_first_sales_date_sk__customer#23, ... 52 more fields]
    +- SubqueryAlias testbucketubqueryAlias testbucket
       +- Relation[c_customer_sk#0,c_customer_id#1,c_current_cdemo_sk#2,c_current_hdemo_sk#3,c_current_addr_sk#4,c_first_shipto_date_sk#5,c_first_sales_date_sk#6,c_first_name#7,c_last_name#8,c_preferred_cust_flag#9,c_birth_day#10,c_birth_month#11,c_birth_year#12,c_birth_country#13,c_login#14,c_email_address#15,c_last_review_date#16,c_customer_sk__customer#17,c_customer_id__customer#18,c_current_cdemo_sk__customer#19,c_current_hdemo_sk__customer#20,c_current_addr_sk__customer#21,c_first_shipto_date_sk__customer#22,c_first_sales_date_sk__customer#23,... 52 more fields] orc                       +- Relation[c_customer_sk#0,c_customer_id#1,c_current_cdemo_sk#2,c_current_hdemo_sk#3,c_current_addr_sk#4,c_first_shipto_date_sk#5,c_first_sales_date_sk#6,c_first_name#7,c_last_name#8,c_preferred_cust_flag#9,c_birth_day#10,c_birth_month#11,c_birth_year#12,c_birth_country#13,c_login#14,c_email_address#15,c_last_review_date#16,c_customer_sk__customer#17,c_customer_id__customer#18,c_current_cdemo_sk__customer#19,c_current_hdemo_sk__customer#20,c_current_addr_sk__customer#21,c_first_shipto_date_sk__customer#22,c_first_sales_date_sk__customer#23,... 52 more fields] orc
        
17/11/03 09:02:30 DEBUG HiveSessionState$$anon$1: 
=== Result of Batch Resolution ===
!'DeserializeToObject unresolveddeserializer(createexternalrow(getcolumnbyordinal(0, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(1, StringType).toString, getcolumnbyordinal(2, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(3, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(4, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(5, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(6, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(7, StringType).toString, getcolumnbyordinal(8, StringType).toString, getcolumnbyordinal(9, StringType).toString, getcolumnbyordinal(10, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(11, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(12, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(13, StringType).toString, getcolumnbyordinal(14, StringType).toString, getcolumnbyordinal(15, StringType).toString, getcolumnbyordinal(16, StringType).toString, getcolumnbyordinal(17, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(18, StringType).toString, getcolumnbyordinal(19, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(20, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(21, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(22, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(23, DecimalType(38,0)).toJavaBigDecimal, ... 128 more fields)), obj#153: org.apache.spark.sql.Row   DeserializeToObject createexternalrow(c_customer_sk#0.toJavaBigDecimal, c_customer_id#1.toString, c_current_cdemo_sk#2.toJavaBigDecimal, c_current_hdemo_sk#3.toJavaBigDecimal, c_current_addr_sk#4.toJavaBigDecimal, c_first_shipto_date_sk#5.toJavaBigDecimal, c_first_sales_date_sk#6.toJavaBigDecimal, c_first_name#7.toString, c_last_name#8.toString, c_preferred_cust_flag#9.toString, c_birth_day#10.toJavaBigDecimal, c_birth_month#11.toJavaBigDecimal, c_birth_year#12.toJavaBigDecimal, c_birth_country#13.toString, c_login#14.toString, c_email_address#15.toString, c_last_review_date#16.toString, c_customer_sk__customer#17.toJavaBigDecimal, c_customer_id__customer#18.toString, c_current_cdemo_sk__customer#19.toJavaBigDecimal, c_current_hdemo_sk__customer#20.toJavaBigDecimal, c_current_addr_sk__customer#21.toJavaBigDecimal, c_first_shipto_date_sk__customer#22.toJavaBigDecimal, c_first_sales_date_sk__customer#23.toJavaBigDecimal, ... 128 more fields), obj#153: org.apache.spark.sql.Row
 +- LocalRelation <empty>, [c_customer_sk#0, c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_shipto_date_sk#5, c_first_sales_date_sk#6, c_first_name#7, c_last_name#8, c_preferred_cust_flag#9, c_birth_day#10, c_birth_month#11, c_birth_year#12, c_birth_country#13, c_login#14, c_email_address#15, c_last_review_date#16, c_customer_sk__customer#17, c_customer_id__customer#18, c_current_cdemo_sk__customer#19, c_current_hdemo_sk__customer#20, c_current_addr_sk__customer#21, c_first_shipto_date_sk__customer#22, c_first_sales_date_sk__customer#23, ... 52 more fieldsocalRelation <empty>, [c_customer_sk#0, c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_shipto_date_sk#5, c_first_sales_date_sk#6, c_first_name#7, c_last_name#8, c_preferred_cust_flag#9, c_birth_day#10, c_birth_month#11, c_birth_year#12, c_birth_country#13, c_login#14, c_email_address#15, c_last_review_date#16, c_customer_sk__customer#17, c_customer_id__customer#18, c_current_cdemo_sk__customer#19, c_current_hdemo_sk__customer#20, c_current_addr_sk__customer#21, c_first_shipto_date_sk__customer#22, c_first_sales_date_sk__customer#23, ... 52 more fields]
        
17/11/03 09:02:30 DEBUG HiveSessionState$$anon$1: 
=== Result of Batch Resolution ===
!'DeserializeToObject unresolveddeserializer(createexternalrow(getcolumnbyordinal(0, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(1, StringType).toString, getcolumnbyordinal(2, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(3, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(4, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(5, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(6, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(7, StringType).toString, getcolumnbyordinal(8, StringType).toString, getcolumnbyordinal(9, StringType).toString, getcolumnbyordinal(10, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(11, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(12, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(13, StringType).toString, getcolumnbyordinal(14, StringType).toString, getcolumnbyordinal(15, StringType).toString, getcolumnbyordinal(16, StringType).toString, getcolumnbyordinal(17, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(18, StringType).toString, getcolumnbyordinal(19, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(20, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(21, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(22, DecimalType(38,0)).toJavaBigDecimal, getcolumnbyordinal(23, DecimalType(38,0)).toJavaBigDecimal, ... 128 more fields)), obj#154: org.apache.spark.sql.Row   DeserializeToObject createexternalrow(c_customer_sk#0.toJavaBigDecimal, c_customer_id#1.toString, c_current_cdemo_sk#2.toJavaBigDecimal, c_current_hdemo_sk#3.toJavaBigDecimal, c_current_addr_sk#4.toJavaBigDecimal, c_first_shipto_date_sk#5.toJavaBigDecimal, c_first_sales_date_sk#6.toJavaBigDecimal, c_first_name#7.toString, c_last_name#8.toString, c_preferred_cust_flag#9.toString, c_birth_day#10.toJavaBigDecimal, c_birth_month#11.toJavaBigDecimal, c_birth_year#12.toJavaBigDecimal, c_birth_country#13.toString, c_login#14.toString, c_email_address#15.toString, c_last_review_date#16.toString, c_customer_sk__customer#17.toJavaBigDecimal, c_customer_id__customer#18.toString, c_current_cdemo_sk__customer#19.toJavaBigDecimal, c_current_hdemo_sk__customer#20.toJavaBigDecimal, c_current_addr_sk__customer#21.toJavaBigDecimal, c_first_shipto_date_sk__customer#22.toJavaBigDecimal, c_first_sales_date_sk__customer#23.toJavaBigDecimal, ... 128 more fields), obj#154: org.apache.spark.sql.Row
 +- LocalRelation <empty>, [c_customer_sk#0, c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_shipto_date_sk#5, c_first_sales_date_sk#6, c_first_name#7, c_last_name#8, c_preferred_cust_flag#9, c_birth_day#10, c_birth_month#11, c_birth_year#12, c_birth_country#13, c_login#14, c_email_address#15, c_last_review_date#16, c_customer_sk__customer#17, c_customer_id__customer#18, c_current_cdemo_sk__customer#19, c_current_hdemo_sk__customer#20, c_current_addr_sk__customer#21, c_first_shipto_date_sk__customer#22, c_first_sales_date_sk__customer#23, ... 52 more fieldsocalRelation <empty>, [c_customer_sk#0, c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_shipto_date_sk#5, c_first_sales_date_sk#6, c_first_name#7, c_last_name#8, c_preferred_cust_flag#9, c_birth_day#10, c_birth_month#11, c_birth_year#12, c_birth_country#13, c_login#14, c_email_address#15, c_last_review_date#16, c_customer_sk__customer#17, c_customer_id__customer#18, c_current_cdemo_sk__customer#19, c_current_hdemo_sk__customer#20, c_current_addr_sk__customer#21, c_first_shipto_date_sk__customer#22, c_first_sales_date_sk__customer#23, ... 52 more fields]
        
17/11/03 09:02:30 DEBUG SparkOptimizer: 
=== Result of Batch Finish Analysis ===
 GlobalLimitlobalLimit 10
 +- LocalLimitocalLimit 10
    +- Filter (ziw_row_id#71 = 91c36e90096e5b5b6d5deilter (ziw_row_id#71 = 91c36e90096e5b5b6d5de85077018406)
       +- Project [c_customer_sk#0, c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_shipto_date_sk#5, c_first_sales_date_sk#6, c_first_name#7, c_last_name#8, c_preferred_cust_flag#9, c_birth_day#10, c_birth_month#11, c_birth_year#12, c_birth_country#13, c_login#14, c_email_address#15, c_last_review_date#16, c_customer_sk__customer#17, c_customer_id__customer#18, c_current_cdemo_sk__customer#19, c_current_hdemo_sk__customer#20, c_current_addr_sk__customer#21, c_first_shipto_date_sk__customer#22, c_first_sales_date_sk__customer#23, ... 52 more fields]         +- Project [c_customer_sk#0, c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_shipto_date_sk#5, c_first_sales_date_sk#6, c_first_name#7, c_last_name#8, c_preferred_cust_flag#9, c_birth_day#10, c_birth_month#11, c_birth_year#12, c_birth_country#13, c_login#14, c_email_address#15, c_last_review_date#16, c_customer_sk__customer#17, c_customer_id__customer#18, c_current_cdemo_sk__customer#19, c_current_hdemo_sk__customer#20, c_current_addr_sk__customer#21, c_first_shipto_date_sk__customer#22, c_first_sales_date_sk__customer#23, ... 52 more fields]
!         +- SubqueryAlias testbucketelation[c_customer_sk#0,c_customer_id#1,c_current_cdemo_sk#2,c_current_hdemo_sk#3,c_current_addr_sk#4,c_first_shipto_date_sk#5,c_first_sales_date_sk#6,c_first_name#7,c_last_name#8,c_preferred_cust_flag#9,c_birth_day#10,c_birth_month#11,c_birth_year#12,c_birth_country#13,c_login#14,c_email_address#15,c_last_review_date#16,c_customer_sk__customer#17,c_customer_id__customer#18,c_current_cdemo_sk__customer#19,c_current_hdemo_sk__customer#20,c_current_addr_sk__customer#21,c_first_shipto_date_sk__customer#22,c_first_sales_date_sk__customer#23,... 52 more fields] orc
!            +- Relation[c_customer_sk#0,c_customer_id#1,c_current_cdemo_sk#2,c_current_hdemo_sk#3,c_current_addr_sk#4,c_first_shipto_date_sk#5,c_first_sales_date_sk#6,c_first_name#7,c_last_name#8,c_preferred_cust_flag#9,c_birth_day#10,c_birth_month#11,c_birth_year#12,c_birth_country#13,c_login#14,c_email_address#15,c_last_review_date#16,c_customer_sk__customer#17,c_customer_id__customer#18,c_current_cdemo_sk__customer#19,c_current_hdemo_sk__customer#20,c_current_addr_sk__customer#21,c_first_shipto_date_sk__customer#22,c_first_sales_date_sk__customer#23,... 52 more fields] orc                 
        
17/11/03 09:02:30 DEBUG SparkOptimizer: 
=== Result of Batch Operator Optimizations ===
 GlobalLimitlobalLimit 10
 +- LocalLimitocalLimit 10
!   +- Filter (ziw_row_id#71 = 91c36e90096e5b5b6d5deilter (isnotnull(ziw_row_id#71) && (ziw_row_id#71 = 91c36e90096e5b5b6d5de85077018406))
!      +- Project [c_customer_sk#0, c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_shipto_date_sk#5, c_first_sales_date_sk#6, c_first_name#7, c_last_name#8, c_preferred_cust_flag#9, c_birth_day#10, c_birth_month#11, c_birth_year#12, c_birth_country#13, c_login#14, c_email_address#15, c_last_review_date#16, c_customer_sk__customer#17, c_customer_id__customer#18, c_current_cdemo_sk__customer#19, c_current_hdemo_sk__customer#20, c_current_addr_sk__customer#21, c_first_shipto_date_sk__customer#22, c_first_sales_date_sk__customer#23, ... 52 more fields]         +- Relation[c_customer_sk#0,c_customer_id#1,c_current_cdemo_sk#2,c_current_hdemo_sk#3,c_current_addr_sk#4,c_first_shipto_date_sk#5,c_first_sales_date_sk#6,c_first_name#7,c_last_name#8,c_preferred_cust_flag#9,c_birth_day#10,c_birth_month#11,c_birth_year#12,c_birth_country#13,c_login#14,c_email_address#15,c_last_review_date#16,c_customer_sk__customer#17,c_customer_id__customer#18,c_current_cdemo_sk__customer#19,c_current_hdemo_sk__customer#20,c_current_addr_sk__customer#21,c_first_shipto_date_sk__customer#22,c_first_sales_date_sk__customer#23,... 52 more fields] orc
!         +- SubqueryAlias testbucket
!            +- Relation[c_customer_sk#0,c_customer_id#1,c_current_cdemo_sk#2,c_current_hdemo_sk#3,c_current_addr_sk#4,c_first_shipto_date_sk#5,c_first_sales_date_sk#6,c_first_name#7,c_last_name#8,c_preferred_cust_flag#9,c_birth_day#10,c_birth_month#11,c_birth_year#12,c_birth_country#13,c_login#14,c_email_address#15,c_last_review_date#16,c_customer_sk__customer#17,c_customer_id__customer#18,c_current_cdemo_sk__customer#19,c_current_hdemo_sk__customer#20,c_current_addr_sk__customer#21,c_first_shipto_date_sk__customer#22,c_first_sales_date_sk__customer#23,... 52 more fields] orc                 
        
17/11/03 09:02:30 INFO FileSourceStrategy: Pruning directories with: 
17/11/03 09:02:30 INFO FileSourceStrategy: Post-Scan Filters: isnotnull(ziw_row_id#71),(ziw_row_id#71 = 91c36e90096e5b5b6d5de85077018406)
17/11/03 09:02:30 INFO FileSourceStrategy: Pruned Data Schema: struct<c_customer_sk: decimal(38,0), c_customer_id: string, c_current_cdemo_sk: decimal(38,0), c_current_hdemo_sk: decimal(38,0), c_current_addr_sk: decimal(38,0) ... 74 more fields>
17/11/03 09:02:30 INFO FileSourceStrategy: Pushed Filters: IsNotNull(ziw_row_id),EqualTo(ziw_row_id,91c36e90096e5b5b6d5de85077018406)
17/11/03 09:02:31 INFO MemoryStore: Block broadcast_0 stored as values in memory (estimated size 384.7 KB, free 365.9 MB)
17/11/03 09:02:31 DEBUG BlockManager: Put block broadcast_0 locally took  98 ms
17/11/03 09:02:31 DEBUG BlockManager: Putting block broadcast_0 without replication took  102 ms
17/11/03 09:02:31 INFO MemoryStore: Block broadcast_0_piece0 stored as bytes in memory (estimated size 32.5 KB, free 365.9 MB)
17/11/03 09:02:31 INFO BlockManagerInfo: Added broadcast_0_piece0 in memory on 172.30.1.247:49071 (size: 32.5 KB, free: 366.3 MB)
17/11/03 09:02:31 DEBUG BlockManagerMaster: Updated info of block broadcast_0_piece0
17/11/03 09:02:31 DEBUG BlockManager: Told master about block broadcast_0_piece0
17/11/03 09:02:31 DEBUG BlockManager: Put block broadcast_0_piece0 locally took  5 ms
17/11/03 09:02:31 DEBUG BlockManager: Putting block broadcast_0_piece0 without replication took  6 ms
17/11/03 09:02:31 INFO SparkContext: Created broadcast 0 from take at <console>:26
17/11/03 09:02:31 INFO FileSourceStrategy: Planning with 3 buckets
17/11/03 09:02:31 DEBUG DFSClient: DFSClient writeChunk allocating new packet seqno=3, src=/spark2-history/local-1509699167113.inprogress, packetSize=65016, chunksPerPacket=126, bytesCurBlock=23552
17/11/03 09:02:31 DEBUG DFSClient: DFSClient flush(): bytesCurBlock=34294 lastFlushOffset=23847 createNewBlock=false
17/11/03 09:02:31 DEBUG DFSClient: Queued packet 3
17/11/03 09:02:31 DEBUG DFSClient: Waiting for ack for: 3
17/11/03 09:02:31 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074042151_301380 sending packet packet seqno: 3 offsetInBlock: 23552 lastPacketInBlock: false lastByteOffsetInBlock: 34294
17/11/03 09:02:31 DEBUG DFSClient: DFSClient seqno: 3 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 1185996 flag: 0 flag: 0 flag: 0
17/11/03 09:02:31 DEBUG WholeStageCodegenExec: 
/* 001 */ public Object generate(Object[] references) {
/* 002 */   return new GeneratedIterator(references);
/* 003 */ }
/* 004 */
/* 005 */ final class GeneratedIterator extends org.apache.spark.sql.execution.BufferedRowIterator {
/* 006 */   private Object[] references;
/* 007 */   private org.apache.spark.sql.execution.metric.SQLMetric scan_numOutputRows;
/* 008 */   private scala.collection.Iterator scan_input;
/* 009 */   private org.apache.spark.sql.execution.metric.SQLMetric filter_numOutputRows;
/* 010 */   private UnsafeRow filter_result;
/* 011 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder filter_holder;
/* 012 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter filter_rowWriter;
/* 013 */   private UnsafeRow project_result;
/* 014 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder project_holder;
/* 015 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter project_rowWriter;
/* 016 */
/* 017 */   public GeneratedIterator(Object[] references) {
/* 018 */     this.references = references;
/* 019 */   }
/* 020 */
/* 021 */   public void init(int index, scala.collection.Iterator inputs[]) {
/* 022 */     partitionIndex = index;
/* 023 */     this.scan_numOutputRows = (org.apache.spark.sql.execution.metric.SQLMetric) references[0];
/* 024 */     scan_input = inputs[0];
/* 025 */     this.filter_numOutputRows = (org.apache.spark.sql.execution.metric.SQLMetric) references[1];
/* 026 */     filter_result = new UnsafeRow(76);
/* 027 */     this.filter_holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(filter_result, 2368);
/* 028 */     this.filter_rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(filter_holder, 76);
/* 029 */     project_result = new UnsafeRow(76);
/* 030 */     this.project_holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(project_result, 2368);
/* 031 */     this.project_rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(project_holder, 76);
/* 032 */   }
/* 033 */
/* 034 */   protected void processNext() throws java.io.IOException {
/* 035 */     while (scan_input.hasNext()) {
/* 036 */       InternalRow scan_row = (InternalRow) scan_input.next();
/* 037 */       scan_numOutputRows.add(1);
/* 038 */       boolean scan_isNull147 = scan_row.isNullAt(71);
/* 039 */       UTF8String scan_value147 = scan_isNull147 ? null : (scan_row.getUTF8String(71));
/* 040 */
/* 041 */       if (!(!(scan_isNull147))) continue;
/* 042 */
/* 043 */       boolean filter_isNull2 = false;
/* 044 */
/* 045 */       Object filter_obj = ((Expression) references[2]).eval(null);
/* 046 */       UTF8String filter_value4 = (UTF8String) filter_obj;
/* 047 */       boolean filter_value2 = false;
/* 048 */       filter_value2 = scan_value147.equals(filter_value4);
/* 049 */       if (!filter_value2) continue;
/* 050 */
/* 051 */       filter_numOutputRows.add(1);
/* 052 */
/* 053 */       boolean scan_isNull76 = scan_row.isNullAt(0);
/* 054 */       Decimal scan_value76 = scan_isNull76 ? null : (scan_row.getDecimal(0, 38, 0));
/* 055 */       boolean scan_isNull77 = scan_row.isNullAt(1);
/* 056 */       UTF8String scan_value77 = scan_isNull77 ? null : (scan_row.getUTF8String(1));
/* 057 */       boolean scan_isNull78 = scan_row.isNullAt(2);
/* 058 */       Decimal scan_value78 = scan_isNull78 ? null : (scan_row.getDecimal(2, 38, 0));
/* 059 */       boolean scan_isNull79 = scan_row.isNullAt(3);
/* 060 */       Decimal scan_value79 = scan_isNull79 ? null : (scan_row.getDecimal(3, 38, 0));
/* 061 */       boolean scan_isNull80 = scan_row.isNullAt(4);
/* 062 */       Decimal scan_value80 = scan_isNull80 ? null : (scan_row.getDecimal(4, 38, 0));
/* 063 */       boolean scan_isNull81 = scan_row.isNullAt(5);
/* 064 */       Decimal scan_value81 = scan_isNull81 ? null : (scan_row.getDecimal(5, 38, 0));
/* 065 */       boolean scan_isNull82 = scan_row.isNullAt(6);
/* 066 */       Decimal scan_value82 = scan_isNull82 ? null : (scan_row.getDecimal(6, 38, 0));
/* 067 */       boolean scan_isNull83 = scan_row.isNullAt(7);
/* 068 */       UTF8String scan_value83 = scan_isNull83 ? null : (scan_row.getUTF8String(7));
/* 069 */       boolean scan_isNull84 = scan_row.isNullAt(8);
/* 070 */       UTF8String scan_value84 = scan_isNull84 ? null : (scan_row.getUTF8String(8));
/* 071 */       boolean scan_isNull85 = scan_row.isNullAt(9);
/* 072 */       UTF8String scan_value85 = scan_isNull85 ? null : (scan_row.getUTF8String(9));
/* 073 */       boolean scan_isNull86 = scan_row.isNullAt(10);
/* 074 */       Decimal scan_value86 = scan_isNull86 ? null : (scan_row.getDecimal(10, 38, 0));
/* 075 */       boolean scan_isNull87 = scan_row.isNullAt(11);
/* 076 */       Decimal scan_value87 = scan_isNull87 ? null : (scan_row.getDecimal(11, 38, 0));
/* 077 */       boolean scan_isNull88 = scan_row.isNullAt(12);
/* 078 */       Decimal scan_value88 = scan_isNull88 ? null : (scan_row.getDecimal(12, 38, 0));
/* 079 */       boolean scan_isNull89 = scan_row.isNullAt(13);
/* 080 */       UTF8String scan_value89 = scan_isNull89 ? null : (scan_row.getUTF8String(13));
/* 081 */       boolean scan_isNull90 = scan_row.isNullAt(14);
/* 082 */       UTF8String scan_value90 = scan_isNull90 ? null : (scan_row.getUTF8String(14));
/* 083 */       boolean scan_isNull91 = scan_row.isNullAt(15);
/* 084 */       UTF8String scan_value91 = scan_isNull91 ? null : (scan_row.getUTF8String(15));
/* 085 */       boolean scan_isNull92 = scan_row.isNullAt(16);
/* 086 */       UTF8String scan_value92 = scan_isNull92 ? null : (scan_row.getUTF8String(16));
/* 087 */       boolean scan_isNull93 = scan_row.isNullAt(17);
/* 088 */       Decimal scan_value93 = scan_isNull93 ? null : (scan_row.getDecimal(17, 38, 0));
/* 089 */       boolean scan_isNull94 = scan_row.isNullAt(18);
/* 090 */       UTF8String scan_value94 = scan_isNull94 ? null : (scan_row.getUTF8String(18));
/* 091 */       boolean scan_isNull95 = scan_row.isNullAt(19);
/* 092 */       Decimal scan_value95 = scan_isNull95 ? null : (scan_row.getDecimal(19, 38, 0));
/* 093 */       boolean scan_isNull96 = scan_row.isNullAt(20);
/* 094 */       Decimal scan_value96 = scan_isNull96 ? null : (scan_row.getDecimal(20, 38, 0));
/* 095 */       boolean scan_isNull97 = scan_row.isNullAt(21);
/* 096 */       Decimal scan_value97 = scan_isNull97 ? null : (scan_row.getDecimal(21, 38, 0));
/* 097 */       boolean scan_isNull98 = scan_row.isNullAt(22);
/* 098 */       Decimal scan_value98 = scan_isNull98 ? null : (scan_row.getDecimal(22, 38, 0));
/* 099 */       boolean scan_isNull99 = scan_row.isNullAt(23);
/* 100 */       Decimal scan_value99 = scan_isNull99 ? null : (scan_row.getDecimal(23, 38, 0));
/* 101 */       boolean scan_isNull100 = scan_row.isNullAt(24);
/* 102 */       UTF8String scan_value100 = scan_isNull100 ? null : (scan_row.getUTF8String(24));
/* 103 */       boolean scan_isNull101 = scan_row.isNullAt(25);
/* 104 */       UTF8String scan_value101 = scan_isNull101 ? null : (scan_row.getUTF8String(25));
/* 105 */       boolean scan_isNull102 = scan_row.isNullAt(26);
/* 106 */       UTF8String scan_value102 = scan_isNull102 ? null : (scan_row.getUTF8String(26));
/* 107 */       boolean scan_isNull103 = scan_row.isNullAt(27);
/* 108 */       UTF8String scan_value103 = scan_isNull103 ? null : (scan_row.getUTF8String(27));
/* 109 */       boolean scan_isNull104 = scan_row.isNullAt(28);
/* 110 */       Decimal scan_value104 = scan_isNull104 ? null : (scan_row.getDecimal(28, 38, 0));
/* 111 */       boolean scan_isNull105 = scan_row.isNullAt(29);
/* 112 */       Decimal scan_value105 = scan_isNull105 ? null : (scan_row.getDecimal(29, 38, 0));
/* 113 */       boolean scan_isNull106 = scan_row.isNullAt(30);
/* 114 */       Decimal scan_value106 = scan_isNull106 ? null : (scan_row.getDecimal(30, 38, 0));
/* 115 */       boolean scan_isNull107 = scan_row.isNullAt(31);
/* 116 */       UTF8String scan_value107 = scan_isNull107 ? null : (scan_row.getUTF8String(31));
/* 117 */       boolean scan_isNull108 = scan_row.isNullAt(32);
/* 118 */       UTF8String scan_value108 = scan_isNull108 ? null : (scan_row.getUTF8String(32));
/* 119 */       boolean scan_isNull109 = scan_row.isNullAt(33);
/* 120 */       UTF8String scan_value109 = scan_isNull109 ? null : (scan_row.getUTF8String(33));
/* 121 */       boolean scan_isNull110 = scan_row.isNullAt(34);
/* 122 */       UTF8String scan_value110 = scan_isNull110 ? null : (scan_row.getUTF8String(34));
/* 123 */       boolean scan_isNull111 = scan_row.isNullAt(35);
/* 124 */       Decimal scan_value111 = scan_isNull111 ? null : (scan_row.getDecimal(35, 38, 0));
/* 125 */       boolean scan_isNull112 = scan_row.isNullAt(36);
/* 126 */       UTF8String scan_value112 = scan_isNull112 ? null : (scan_row.getUTF8String(36));
/* 127 */       boolean scan_isNull113 = scan_row.isNullAt(37);
/* 128 */       Decimal scan_value113 = scan_isNull113 ? null : (scan_row.getDecimal(37, 38, 0));
/* 129 */       boolean scan_isNull114 = scan_row.isNullAt(38);
/* 130 */       Decimal scan_value114 = scan_isNull114 ? null : (scan_row.getDecimal(38, 38, 0));
/* 131 */       boolean scan_isNull115 = scan_row.isNullAt(39);
/* 132 */       Decimal scan_value115 = scan_isNull115 ? null : (scan_row.getDecimal(39, 38, 0));
/* 133 */       boolean scan_isNull116 = scan_row.isNullAt(40);
/* 134 */       Decimal scan_value116 = scan_isNull116 ? null : (scan_row.getDecimal(40, 38, 0));
/* 135 */       boolean scan_isNull117 = scan_row.isNullAt(41);
/* 136 */       Decimal scan_value117 = scan_isNull117 ? null : (scan_row.getDecimal(41, 38, 0));
/* 137 */       boolean scan_isNull118 = scan_row.isNullAt(42);
/* 138 */       UTF8String scan_value118 = scan_isNull118 ? null : (scan_row.getUTF8String(42));
/* 139 */       boolean scan_isNull119 = scan_row.isNullAt(43);
/* 140 */       UTF8String scan_value119 = scan_isNull119 ? null : (scan_row.getUTF8String(43));
/* 141 */       boolean scan_isNull120 = scan_row.isNullAt(44);
/* 142 */       UTF8String scan_value120 = scan_isNull120 ? null : (scan_row.getUTF8String(44));
/* 143 */       boolean scan_isNull121 = scan_row.isNullAt(45);
/* 144 */       UTF8String scan_value121 = scan_isNull121 ? null : (scan_row.getUTF8String(45));
/* 145 */       boolean scan_isNull122 = scan_row.isNullAt(46);
/* 146 */       Decimal scan_value122 = scan_isNull122 ? null : (scan_row.getDecimal(46, 38, 0));
/* 147 */       boolean scan_isNull123 = scan_row.isNullAt(47);
/* 148 */       Decimal scan_value123 = scan_isNull123 ? null : (scan_row.getDecimal(47, 38, 0));
/* 149 */       boolean scan_isNull124 = scan_row.isNullAt(48);
/* 150 */       Decimal scan_value124 = scan_isNull124 ? null : (scan_row.getDecimal(48, 38, 0));
/* 151 */       boolean scan_isNull125 = scan_row.isNullAt(49);
/* 152 */       UTF8String scan_value125 = scan_isNull125 ? null : (scan_row.getUTF8String(49));
/* 153 */       boolean scan_isNull126 = scan_row.isNullAt(50);
/* 154 */       UTF8String scan_value126 = scan_isNull126 ? null : (scan_row.getUTF8String(50));
/* 155 */       boolean scan_isNull127 = scan_row.isNullAt(51);
/* 156 */       UTF8String scan_value127 = scan_isNull127 ? null : (scan_row.getUTF8String(51));
/* 157 */       boolean scan_isNull128 = scan_row.isNullAt(52);
/* 158 */       UTF8String scan_value128 = scan_isNull128 ? null : (scan_row.getUTF8String(52));
/* 159 */       boolean scan_isNull129 = scan_row.isNullAt(53);
/* 160 */       Decimal scan_value129 = scan_isNull129 ? null : (scan_row.getDecimal(53, 38, 0));
/* 161 */       boolean scan_isNull130 = scan_row.isNullAt(54);
/* 162 */       UTF8String scan_value130 = scan_isNull130 ? null : (scan_row.getUTF8String(54));
/* 163 */       boolean scan_isNull131 = scan_row.isNullAt(55);
/* 164 */       Decimal scan_value131 = scan_isNull131 ? null : (scan_row.getDecimal(55, 38, 0));
/* 165 */       boolean scan_isNull132 = scan_row.isNullAt(56);
/* 166 */       Decimal scan_value132 = scan_isNull132 ? null : (scan_row.getDecimal(56, 38, 0));
/* 167 */       boolean scan_isNull133 = scan_row.isNullAt(57);
/* 168 */       Decimal scan_value133 = scan_isNull133 ? null : (scan_row.getDecimal(57, 38, 0));
/* 169 */       boolean scan_isNull134 = scan_row.isNullAt(58);
/* 170 */       Decimal scan_value134 = scan_isNull134 ? null : (scan_row.getDecimal(58, 38, 0));
/* 171 */       boolean scan_isNull135 = scan_row.isNullAt(59);
/* 172 */       Decimal scan_value135 = scan_isNull135 ? null : (scan_row.getDecimal(59, 38, 0));
/* 173 */       boolean scan_isNull136 = scan_row.isNullAt(60);
/* 174 */       UTF8String scan_value136 = scan_isNull136 ? null : (scan_row.getUTF8String(60));
/* 175 */       boolean scan_isNull137 = scan_row.isNullAt(61);
/* 176 */       UTF8String scan_value137 = scan_isNull137 ? null : (scan_row.getUTF8String(61));
/* 177 */       boolean scan_isNull138 = scan_row.isNullAt(62);
/* 178 */       UTF8String scan_value138 = scan_isNull138 ? null : (scan_row.getUTF8String(62));
/* 179 */       boolean scan_isNull139 = scan_row.isNullAt(63);
/* 180 */       UTF8String scan_value139 = scan_isNull139 ? null : (scan_row.getUTF8String(63));
/* 181 */       boolean scan_isNull140 = scan_row.isNullAt(64);
/* 182 */       Decimal scan_value140 = scan_isNull140 ? null : (scan_row.getDecimal(64, 38, 0));
/* 183 */       boolean scan_isNull141 = scan_row.isNullAt(65);
/* 184 */       Decimal scan_value141 = scan_isNull141 ? null : (scan_row.getDecimal(65, 38, 0));
/* 185 */       boolean scan_isNull142 = scan_row.isNullAt(66);
/* 186 */       Decimal scan_value142 = scan_isNull142 ? null : (scan_row.getDecimal(66, 38, 0));
/* 187 */       boolean scan_isNull143 = scan_row.isNullAt(67);
/* 188 */       UTF8String scan_value143 = scan_isNull143 ? null : (scan_row.getUTF8String(67));
/* 189 */       boolean scan_isNull144 = scan_row.isNullAt(68);
/* 190 */       UTF8String scan_value144 = scan_isNull144 ? null : (scan_row.getUTF8String(68));
/* 191 */       boolean scan_isNull145 = scan_row.isNullAt(69);
/* 192 */       UTF8String scan_value145 = scan_isNull145 ? null : (scan_row.getUTF8String(69));
/* 193 */       boolean scan_isNull146 = scan_row.isNullAt(70);
/* 194 */       UTF8String scan_value146 = scan_isNull146 ? null : (scan_row.getUTF8String(70));
/* 195 */       boolean scan_isNull148 = scan_row.isNullAt(72);
/* 196 */       long scan_value148 = scan_isNull148 ? -1L : (scan_row.getLong(72));
/* 197 */       boolean scan_isNull149 = scan_row.isNullAt(73);
/* 198 */       long scan_value149 = scan_isNull149 ? -1L : (scan_row.getLong(73));
/* 199 */       boolean scan_isNull150 = scan_row.isNullAt(74);
/* 200 */       UTF8String scan_value150 = scan_isNull150 ? null : (scan_row.getUTF8String(74));
/* 201 */       boolean scan_isNull151 = scan_row.isNullAt(75);
/* 202 */       UTF8String scan_value151 = scan_isNull151 ? null : (scan_row.getUTF8String(75));
/* 203 */       project_holder.reset();
/* 204 */
/* 205 */       project_rowWriter.zeroOutNullBytes();
/* 206 */
/* 207 */       if (scan_isNull76) {
/* 208 */         project_rowWriter.write(0, (Decimal) null, 38, 0);
/* 209 */       } else {
/* 210 */         project_rowWriter.write(0, scan_value76, 38, 0);
/* 211 */       }
/* 212 */
/* 213 */       if (scan_isNull77) {
/* 214 */         project_rowWriter.setNullAt(1);
/* 215 */       } else {
/* 216 */         project_rowWriter.write(1, scan_value77);
/* 217 */       }
/* 218 */
/* 219 */       if (scan_isNull78) {
/* 220 */         project_rowWriter.write(2, (Decimal) null, 38, 0);
/* 221 */       } else {
/* 222 */         project_rowWriter.write(2, scan_value78, 38, 0);
/* 223 */       }
/* 224 */
/* 225 */       if (scan_isNull79) {
/* 226 */         project_rowWriter.write(3, (Decimal) null, 38, 0);
/* 227 */       } else {
/* 228 */         project_rowWriter.write(3, scan_value79, 38, 0);
/* 229 */       }
/* 230 */
/* 231 */       if (scan_isNull80) {
/* 232 */         project_rowWriter.write(4, (Decimal) null, 38, 0);
/* 233 */       } else {
/* 234 */         project_rowWriter.write(4, scan_value80, 38, 0);
/* 235 */       }
/* 236 */
/* 237 */       if (scan_isNull81) {
/* 238 */         project_rowWriter.write(5, (Decimal) null, 38, 0);
/* 239 */       } else {
/* 240 */         project_rowWriter.write(5, scan_value81, 38, 0);
/* 241 */       }
/* 242 */
/* 243 */       if (scan_isNull82) {
/* 244 */         project_rowWriter.write(6, (Decimal) null, 38, 0);
/* 245 */       } else {
/* 246 */         project_rowWriter.write(6, scan_value82, 38, 0);
/* 247 */       }
/* 248 */
/* 249 */       if (scan_isNull83) {
/* 250 */         project_rowWriter.setNullAt(7);
/* 251 */       } else {
/* 252 */         project_rowWriter.write(7, scan_value83);
/* 253 */       }
/* 254 */
/* 255 */       if (scan_isNull84) {
/* 256 */         project_rowWriter.setNullAt(8);
/* 257 */       } else {
/* 258 */         project_rowWriter.write(8, scan_value84);
/* 259 */       }
/* 260 */
/* 261 */       if (scan_isNull85) {
/* 262 */         project_rowWriter.setNullAt(9);
/* 263 */       } else {
/* 264 */         project_rowWriter.write(9, scan_value85);
/* 265 */       }
/* 266 */
/* 267 */       if (scan_isNull86) {
/* 268 */         project_rowWriter.write(10, (Decimal) null, 38, 0);
/* 269 */       } else {
/* 270 */         project_rowWriter.write(10, scan_value86, 38, 0);
/* 271 */       }
/* 272 */
/* 273 */       if (scan_isNull87) {
/* 274 */         project_rowWriter.write(11, (Decimal) null, 38, 0);
/* 275 */       } else {
/* 276 */         project_rowWriter.write(11, scan_value87, 38, 0);
/* 277 */       }
/* 278 */
/* 279 */       if (scan_isNull88) {
/* 280 */         project_rowWriter.write(12, (Decimal) null, 38, 0);
/* 281 */       } else {
/* 282 */         project_rowWriter.write(12, scan_value88, 38, 0);
/* 283 */       }
/* 284 */
/* 285 */       if (scan_isNull89) {
/* 286 */         project_rowWriter.setNullAt(13);
/* 287 */       } else {
/* 288 */         project_rowWriter.write(13, scan_value89);
/* 289 */       }
/* 290 */
/* 291 */       if (scan_isNull90) {
/* 292 */         project_rowWriter.setNullAt(14);
/* 293 */       } else {
/* 294 */         project_rowWriter.write(14, scan_value90);
/* 295 */       }
/* 296 */
/* 297 */       if (scan_isNull91) {
/* 298 */         project_rowWriter.setNullAt(15);
/* 299 */       } else {
/* 300 */         project_rowWriter.write(15, scan_value91);
/* 301 */       }
/* 302 */
/* 303 */       if (scan_isNull92) {
/* 304 */         project_rowWriter.setNullAt(16);
/* 305 */       } else {
/* 306 */         project_rowWriter.write(16, scan_value92);
/* 307 */       }
/* 308 */
/* 309 */       if (scan_isNull93) {
/* 310 */         project_rowWriter.write(17, (Decimal) null, 38, 0);
/* 311 */       } else {
/* 312 */         project_rowWriter.write(17, scan_value93, 38, 0);
/* 313 */       }
/* 314 */
/* 315 */       if (scan_isNull94) {
/* 316 */         project_rowWriter.setNullAt(18);
/* 317 */       } else {
/* 318 */         project_rowWriter.write(18, scan_value94);
/* 319 */       }
/* 320 */
/* 321 */       if (scan_isNull95) {
/* 322 */         project_rowWriter.write(19, (Decimal) null, 38, 0);
/* 323 */       } else {
/* 324 */         project_rowWriter.write(19, scan_value95, 38, 0);
/* 325 */       }
/* 326 */
/* 327 */       if (scan_isNull96) {
/* 328 */         project_rowWriter.write(20, (Decimal) null, 38, 0);
/* 329 */       } else {
/* 330 */         project_rowWriter.write(20, scan_value96, 38, 0);
/* 331 */       }
/* 332 */
/* 333 */       if (scan_isNull97) {
/* 334 */         project_rowWriter.write(21, (Decimal) null, 38, 0);
/* 335 */       } else {
/* 336 */         project_rowWriter.write(21, scan_value97, 38, 0);
/* 337 */       }
/* 338 */
/* 339 */       if (scan_isNull98) {
/* 340 */         project_rowWriter.write(22, (Decimal) null, 38, 0);
/* 341 */       } else {
/* 342 */         project_rowWriter.write(22, scan_value98, 38, 0);
/* 343 */       }
/* 344 */
/* 345 */       if (scan_isNull99) {
/* 346 */         project_rowWriter.write(23, (Decimal) null, 38, 0);
/* 347 */       } else {
/* 348 */         project_rowWriter.write(23, scan_value99, 38, 0);
/* 349 */       }
/* 350 */
/* 351 */       if (scan_isNull100) {
/* 352 */         project_rowWriter.setNullAt(24);
/* 353 */       } else {
/* 354 */         project_rowWriter.write(24, scan_value100);
/* 355 */       }
/* 356 */
/* 357 */       if (scan_isNull101) {
/* 358 */         project_rowWriter.setNullAt(25);
/* 359 */       } else {
/* 360 */         project_rowWriter.write(25, scan_value101);
/* 361 */       }
/* 362 */
/* 363 */       if (scan_isNull102) {
/* 364 */         project_rowWriter.setNullAt(26);
/* 365 */       } else {
/* 366 */         project_rowWriter.write(26, scan_value102);
/* 367 */       }
/* 368 */
/* 369 */       if (scan_isNull103) {
/* 370 */         project_rowWriter.setNullAt(27);
/* 371 */       } else {
/* 372 */         project_rowWriter.write(27, scan_value103);
/* 373 */       }
/* 374 */
/* 375 */       if (scan_isNull104) {
/* 376 */         project_rowWriter.write(28, (Decimal) null, 38, 0);
/* 377 */       } else {
/* 378 */         project_rowWriter.write(28, scan_value104, 38, 0);
/* 379 */       }
/* 380 */
/* 381 */       if (scan_isNull105) {
/* 382 */         project_rowWriter.write(29, (Decimal) null, 38, 0);
/* 383 */       } else {
/* 384 */         project_rowWriter.write(29, scan_value105, 38, 0);
/* 385 */       }
/* 386 */
/* 387 */       if (scan_isNull106) {
/* 388 */         project_rowWriter.write(30, (Decimal) null, 38, 0);
/* 389 */       } else {
/* 390 */         project_rowWriter.write(30, scan_value106, 38, 0);
/* 391 */       }
/* 392 */
/* 393 */       if (scan_isNull107) {
/* 394 */         project_rowWriter.setNullAt(31);
/* 395 */       } else {
/* 396 */         project_rowWriter.write(31, scan_value107);
/* 397 */       }
/* 398 */
/* 399 */       if (scan_isNull108) {
/* 400 */         project_rowWriter.setNullAt(32);
/* 401 */       } else {
/* 402 */         project_rowWriter.write(32, scan_value108);
/* 403 */       }
/* 404 */
/* 405 */       if (scan_isNull109) {
/* 406 */         project_rowWriter.setNullAt(33);
/* 407 */       } else {
/* 408 */         project_rowWriter.write(33, scan_value109);
/* 409 */       }
/* 410 */
/* 411 */       if (scan_isNull110) {
/* 412 */         project_rowWriter.setNullAt(34);
/* 413 */       } else {
/* 414 */         project_rowWriter.write(34, scan_value110);
/* 415 */       }
/* 416 */
/* 417 */       if (scan_isNull111) {
/* 418 */         project_rowWriter.write(35, (Decimal) null, 38, 0);
/* 419 */       } else {
/* 420 */         project_rowWriter.write(35, scan_value111, 38, 0);
/* 421 */       }
/* 422 */
/* 423 */       if (scan_isNull112) {
/* 424 */         project_rowWriter.setNullAt(36);
/* 425 */       } else {
/* 426 */         project_rowWriter.write(36, scan_value112);
/* 427 */       }
/* 428 */
/* 429 */       if (scan_isNull113) {
/* 430 */         project_rowWriter.write(37, (Decimal) null, 38, 0);
/* 431 */       } else {
/* 432 */         project_rowWriter.write(37, scan_value113, 38, 0);
/* 433 */       }
/* 434 */
/* 435 */       if (scan_isNull114) {
/* 436 */         project_rowWriter.write(38, (Decimal) null, 38, 0);
/* 437 */       } else {
/* 438 */         project_rowWriter.write(38, scan_value114, 38, 0);
/* 439 */       }
/* 440 */
/* 441 */       if (scan_isNull115) {
/* 442 */         project_rowWriter.write(39, (Decimal) null, 38, 0);
/* 443 */       } else {
/* 444 */         project_rowWriter.write(39, scan_value115, 38, 0);
/* 445 */       }
/* 446 */
/* 447 */       if (scan_isNull116) {
/* 448 */         project_rowWriter.write(40, (Decimal) null, 38, 0);
/* 449 */       } else {
/* 450 */         project_rowWriter.write(40, scan_value116, 38, 0);
/* 451 */       }
/* 452 */
/* 453 */       if (scan_isNull117) {
/* 454 */         project_rowWriter.write(41, (Decimal) null, 38, 0);
/* 455 */       } else {
/* 456 */         project_rowWriter.write(41, scan_value117, 38, 0);
/* 457 */       }
/* 458 */
/* 459 */       if (scan_isNull118) {
/* 460 */         project_rowWriter.setNullAt(42);
/* 461 */       } else {
/* 462 */         project_rowWriter.write(42, scan_value118);
/* 463 */       }
/* 464 */
/* 465 */       if (scan_isNull119) {
/* 466 */         project_rowWriter.setNullAt(43);
/* 467 */       } else {
/* 468 */         project_rowWriter.write(43, scan_value119);
/* 469 */       }
/* 470 */
/* 471 */       if (scan_isNull120) {
/* 472 */         project_rowWriter.setNullAt(44);
/* 473 */       } else {
/* 474 */         project_rowWriter.write(44, scan_value120);
/* 475 */       }
/* 476 */
/* 477 */       if (scan_isNull121) {
/* 478 */         project_rowWriter.setNullAt(45);
/* 479 */       } else {
/* 480 */         project_rowWriter.write(45, scan_value121);
/* 481 */       }
/* 482 */
/* 483 */       if (scan_isNull122) {
/* 484 */         project_rowWriter.write(46, (Decimal) null, 38, 0);
/* 485 */       } else {
/* 486 */         project_rowWriter.write(46, scan_value122, 38, 0);
/* 487 */       }
/* 488 */
/* 489 */       if (scan_isNull123) {
/* 490 */         project_rowWriter.write(47, (Decimal) null, 38, 0);
/* 491 */       } else {
/* 492 */         project_rowWriter.write(47, scan_value123, 38, 0);
/* 493 */       }
/* 494 */
/* 495 */       if (scan_isNull124) {
/* 496 */         project_rowWriter.write(48, (Decimal) null, 38, 0);
/* 497 */       } else {
/* 498 */         project_rowWriter.write(48, scan_value124, 38, 0);
/* 499 */       }
/* 500 */
/* 501 */       if (scan_isNull125) {
/* 502 */         project_rowWriter.setNullAt(49);
/* 503 */       } else {
/* 504 */         project_rowWriter.write(49, scan_value125);
/* 505 */       }
/* 506 */
/* 507 */       if (scan_isNull126) {
/* 508 */         project_rowWriter.setNullAt(50);
/* 509 */       } else {
/* 510 */         project_rowWriter.write(50, scan_value126);
/* 511 */       }
/* 512 */
/* 513 */       if (scan_isNull127) {
/* 514 */         project_rowWriter.setNullAt(51);
/* 515 */       } else {
/* 516 */         project_rowWriter.write(51, scan_value127);
/* 517 */       }
/* 518 */
/* 519 */       if (scan_isNull128) {
/* 520 */         project_rowWriter.setNullAt(52);
/* 521 */       } else {
/* 522 */         project_rowWriter.write(52, scan_value128);
/* 523 */       }
/* 524 */
/* 525 */       if (scan_isNull129) {
/* 526 */         project_rowWriter.write(53, (Decimal) null, 38, 0);
/* 527 */       } else {
/* 528 */         project_rowWriter.write(53, scan_value129, 38, 0);
/* 529 */       }
/* 530 */
/* 531 */       if (scan_isNull130) {
/* 532 */         project_rowWriter.setNullAt(54);
/* 533 */       } else {
/* 534 */         project_rowWriter.write(54, scan_value130);
/* 535 */       }
/* 536 */
/* 537 */       if (scan_isNull131) {
/* 538 */         project_rowWriter.write(55, (Decimal) null, 38, 0);
/* 539 */       } else {
/* 540 */         project_rowWriter.write(55, scan_value131, 38, 0);
/* 541 */       }
/* 542 */
/* 543 */       if (scan_isNull132) {
/* 544 */         project_rowWriter.write(56, (Decimal) null, 38, 0);
/* 545 */       } else {
/* 546 */         project_rowWriter.write(56, scan_value132, 38, 0);
/* 547 */       }
/* 548 */
/* 549 */       if (scan_isNull133) {
/* 550 */         project_rowWriter.write(57, (Decimal) null, 38, 0);
/* 551 */       } else {
/* 552 */         project_rowWriter.write(57, scan_value133, 38, 0);
/* 553 */       }
/* 554 */
/* 555 */       if (scan_isNull134) {
/* 556 */         project_rowWriter.write(58, (Decimal) null, 38, 0);
/* 557 */       } else {
/* 558 */         project_rowWriter.write(58, scan_value134, 38, 0);
/* 559 */       }
/* 560 */
/* 561 */       if (scan_isNull135) {
/* 562 */         project_rowWriter.write(59, (Decimal) null, 38, 0);
/* 563 */       } else {
/* 564 */         project_rowWriter.write(59, scan_value135, 38, 0);
/* 565 */       }
/* 566 */
/* 567 */       if (scan_isNull136) {
/* 568 */         project_rowWriter.setNullAt(60);
/* 569 */       } else {
/* 570 */         project_rowWriter.write(60, scan_value136);
/* 571 */       }
/* 572 */
/* 573 */       if (scan_isNull137) {
/* 574 */         project_rowWriter.setNullAt(61);
/* 575 */       } else {
/* 576 */         project_rowWriter.write(61, scan_value137);
/* 577 */       }
/* 578 */
/* 579 */       if (scan_isNull138) {
/* 580 */         project_rowWriter.setNullAt(62);
/* 581 */       } else {
/* 582 */         project_rowWriter.write(62, scan_value138);
/* 583 */       }
/* 584 */
/* 585 */       if (scan_isNull139) {
/* 586 */         project_rowWriter.setNullAt(63);
/* 587 */       } else {
/* 588 */         project_rowWriter.write(63, scan_value139);
/* 589 */       }
/* 590 */
/* 591 */       if (scan_isNull140) {
/* 592 */         project_rowWriter.write(64, (Decimal) null, 38, 0);
/* 593 */       } else {
/* 594 */         project_rowWriter.write(64, scan_value140, 38, 0);
/* 595 */       }
/* 596 */
/* 597 */       if (scan_isNull141) {
/* 598 */         project_rowWriter.write(65, (Decimal) null, 38, 0);
/* 599 */       } else {
/* 600 */         project_rowWriter.write(65, scan_value141, 38, 0);
/* 601 */       }
/* 602 */
/* 603 */       if (scan_isNull142) {
/* 604 */         project_rowWriter.write(66, (Decimal) null, 38, 0);
/* 605 */       } else {
/* 606 */         project_rowWriter.write(66, scan_value142, 38, 0);
/* 607 */       }
/* 608 */
/* 609 */       if (scan_isNull143) {
/* 610 */         project_rowWriter.setNullAt(67);
/* 611 */       } else {
/* 612 */         project_rowWriter.write(67, scan_value143);
/* 613 */       }
/* 614 */
/* 615 */       if (scan_isNull144) {
/* 616 */         project_rowWriter.setNullAt(68);
/* 617 */       } else {
/* 618 */         project_rowWriter.write(68, scan_value144);
/* 619 */       }
/* 620 */
/* 621 */       if (scan_isNull145) {
/* 622 */         project_rowWriter.setNullAt(69);
/* 623 */       } else {
/* 624 */         project_rowWriter.write(69, scan_value145);
/* 625 */       }
/* 626 */
/* 627 */       if (scan_isNull146) {
/* 628 */         project_rowWriter.setNullAt(70);
/* 629 */       } else {
/* 630 */         project_rowWriter.write(70, scan_value146);
/* 631 */       }
/* 632 */
/* 633 */       project_rowWriter.write(71, scan_value147);
/* 634 */
/* 635 */       if (scan_isNull148) {
/* 636 */         project_rowWriter.setNullAt(72);
/* 637 */       } else {
/* 638 */         project_rowWriter.write(72, scan_value148);
/* 639 */       }
/* 640 */
/* 641 */       if (scan_isNull149) {
/* 642 */         project_rowWriter.setNullAt(73);
/* 643 */       } else {
/* 644 */         project_rowWriter.write(73, scan_value149);
/* 645 */       }
/* 646 */
/* 647 */       if (scan_isNull150) {
/* 648 */         project_rowWriter.setNullAt(74);
/* 649 */       } else {
/* 650 */         project_rowWriter.write(74, scan_value150);
/* 651 */       }
/* 652 */
/* 653 */       if (scan_isNull151) {
/* 654 */         project_rowWriter.setNullAt(75);
/* 655 */       } else {
/* 656 */         project_rowWriter.write(75, scan_value151);
/* 657 */       }
/* 658 */       project_result.setTotalSize(project_holder.totalSize());
/* 659 */       append(project_result);
/* 660 */       if (shouldStop()) return;
/* 661 */     }
/* 662 */   }
/* 663 */ }

17/11/03 09:02:31 DEBUG CodeGenerator: 
/* 001 */ public Object generate(Object[] references) {
/* 002 */   return new GeneratedIterator(references);
/* 003 */ }
/* 004 */
/* 005 */ final class GeneratedIterator extends org.apache.spark.sql.execution.BufferedRowIterator {
/* 006 */   private Object[] references;
/* 007 */   private org.apache.spark.sql.execution.metric.SQLMetric scan_numOutputRows;
/* 008 */   private scala.collection.Iterator scan_input;
/* 009 */   private org.apache.spark.sql.execution.metric.SQLMetric filter_numOutputRows;
/* 010 */   private UnsafeRow filter_result;
/* 011 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder filter_holder;
/* 012 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter filter_rowWriter;
/* 013 */   private UnsafeRow project_result;
/* 014 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder project_holder;
/* 015 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter project_rowWriter;
/* 016 */
/* 017 */   public GeneratedIterator(Object[] references) {
/* 018 */     this.references = references;
/* 019 */   }
/* 020 */
/* 021 */   public void init(int index, scala.collection.Iterator inputs[]) {
/* 022 */     partitionIndex = index;
/* 023 */     this.scan_numOutputRows = (org.apache.spark.sql.execution.metric.SQLMetric) references[0];
/* 024 */     scan_input = inputs[0];
/* 025 */     this.filter_numOutputRows = (org.apache.spark.sql.execution.metric.SQLMetric) references[1];
/* 026 */     filter_result = new UnsafeRow(76);
/* 027 */     this.filter_holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(filter_result, 2368);
/* 028 */     this.filter_rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(filter_holder, 76);
/* 029 */     project_result = new UnsafeRow(76);
/* 030 */     this.project_holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(project_result, 2368);
/* 031 */     this.project_rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(project_holder, 76);
/* 032 */   }
/* 033 */
/* 034 */   protected void processNext() throws java.io.IOException {
/* 035 */     while (scan_input.hasNext()) {
/* 036 */       InternalRow scan_row = (InternalRow) scan_input.next();
/* 037 */       scan_numOutputRows.add(1);
/* 038 */       boolean scan_isNull147 = scan_row.isNullAt(71);
/* 039 */       UTF8String scan_value147 = scan_isNull147 ? null : (scan_row.getUTF8String(71));
/* 040 */
/* 041 */       if (!(!(scan_isNull147))) continue;
/* 042 */
/* 043 */       boolean filter_isNull2 = false;
/* 044 */
/* 045 */       Object filter_obj = ((Expression) references[2]).eval(null);
/* 046 */       UTF8String filter_value4 = (UTF8String) filter_obj;
/* 047 */       boolean filter_value2 = false;
/* 048 */       filter_value2 = scan_value147.equals(filter_value4);
/* 049 */       if (!filter_value2) continue;
/* 050 */
/* 051 */       filter_numOutputRows.add(1);
/* 052 */
/* 053 */       boolean scan_isNull76 = scan_row.isNullAt(0);
/* 054 */       Decimal scan_value76 = scan_isNull76 ? null : (scan_row.getDecimal(0, 38, 0));
/* 055 */       boolean scan_isNull77 = scan_row.isNullAt(1);
/* 056 */       UTF8String scan_value77 = scan_isNull77 ? null : (scan_row.getUTF8String(1));
/* 057 */       boolean scan_isNull78 = scan_row.isNullAt(2);
/* 058 */       Decimal scan_value78 = scan_isNull78 ? null : (scan_row.getDecimal(2, 38, 0));
/* 059 */       boolean scan_isNull79 = scan_row.isNullAt(3);
/* 060 */       Decimal scan_value79 = scan_isNull79 ? null : (scan_row.getDecimal(3, 38, 0));
/* 061 */       boolean scan_isNull80 = scan_row.isNullAt(4);
/* 062 */       Decimal scan_value80 = scan_isNull80 ? null : (scan_row.getDecimal(4, 38, 0));
/* 063 */       boolean scan_isNull81 = scan_row.isNullAt(5);
/* 064 */       Decimal scan_value81 = scan_isNull81 ? null : (scan_row.getDecimal(5, 38, 0));
/* 065 */       boolean scan_isNull82 = scan_row.isNullAt(6);
/* 066 */       Decimal scan_value82 = scan_isNull82 ? null : (scan_row.getDecimal(6, 38, 0));
/* 067 */       boolean scan_isNull83 = scan_row.isNullAt(7);
/* 068 */       UTF8String scan_value83 = scan_isNull83 ? null : (scan_row.getUTF8String(7));
/* 069 */       boolean scan_isNull84 = scan_row.isNullAt(8);
/* 070 */       UTF8String scan_value84 = scan_isNull84 ? null : (scan_row.getUTF8String(8));
/* 071 */       boolean scan_isNull85 = scan_row.isNullAt(9);
/* 072 */       UTF8String scan_value85 = scan_isNull85 ? null : (scan_row.getUTF8String(9));
/* 073 */       boolean scan_isNull86 = scan_row.isNullAt(10);
/* 074 */       Decimal scan_value86 = scan_isNull86 ? null : (scan_row.getDecimal(10, 38, 0));
/* 075 */       boolean scan_isNull87 = scan_row.isNullAt(11);
/* 076 */       Decimal scan_value87 = scan_isNull87 ? null : (scan_row.getDecimal(11, 38, 0));
/* 077 */       boolean scan_isNull88 = scan_row.isNullAt(12);
/* 078 */       Decimal scan_value88 = scan_isNull88 ? null : (scan_row.getDecimal(12, 38, 0));
/* 079 */       boolean scan_isNull89 = scan_row.isNullAt(13);
/* 080 */       UTF8String scan_value89 = scan_isNull89 ? null : (scan_row.getUTF8String(13));
/* 081 */       boolean scan_isNull90 = scan_row.isNullAt(14);
/* 082 */       UTF8String scan_value90 = scan_isNull90 ? null : (scan_row.getUTF8String(14));
/* 083 */       boolean scan_isNull91 = scan_row.isNullAt(15);
/* 084 */       UTF8String scan_value91 = scan_isNull91 ? null : (scan_row.getUTF8String(15));
/* 085 */       boolean scan_isNull92 = scan_row.isNullAt(16);
/* 086 */       UTF8String scan_value92 = scan_isNull92 ? null : (scan_row.getUTF8String(16));
/* 087 */       boolean scan_isNull93 = scan_row.isNullAt(17);
/* 088 */       Decimal scan_value93 = scan_isNull93 ? null : (scan_row.getDecimal(17, 38, 0));
/* 089 */       boolean scan_isNull94 = scan_row.isNullAt(18);
/* 090 */       UTF8String scan_value94 = scan_isNull94 ? null : (scan_row.getUTF8String(18));
/* 091 */       boolean scan_isNull95 = scan_row.isNullAt(19);
/* 092 */       Decimal scan_value95 = scan_isNull95 ? null : (scan_row.getDecimal(19, 38, 0));
/* 093 */       boolean scan_isNull96 = scan_row.isNullAt(20);
/* 094 */       Decimal scan_value96 = scan_isNull96 ? null : (scan_row.getDecimal(20, 38, 0));
/* 095 */       boolean scan_isNull97 = scan_row.isNullAt(21);
/* 096 */       Decimal scan_value97 = scan_isNull97 ? null : (scan_row.getDecimal(21, 38, 0));
/* 097 */       boolean scan_isNull98 = scan_row.isNullAt(22);
/* 098 */       Decimal scan_value98 = scan_isNull98 ? null : (scan_row.getDecimal(22, 38, 0));
/* 099 */       boolean scan_isNull99 = scan_row.isNullAt(23);
/* 100 */       Decimal scan_value99 = scan_isNull99 ? null : (scan_row.getDecimal(23, 38, 0));
/* 101 */       boolean scan_isNull100 = scan_row.isNullAt(24);
/* 102 */       UTF8String scan_value100 = scan_isNull100 ? null : (scan_row.getUTF8String(24));
/* 103 */       boolean scan_isNull101 = scan_row.isNullAt(25);
/* 104 */       UTF8String scan_value101 = scan_isNull101 ? null : (scan_row.getUTF8String(25));
/* 105 */       boolean scan_isNull102 = scan_row.isNullAt(26);
/* 106 */       UTF8String scan_value102 = scan_isNull102 ? null : (scan_row.getUTF8String(26));
/* 107 */       boolean scan_isNull103 = scan_row.isNullAt(27);
/* 108 */       UTF8String scan_value103 = scan_isNull103 ? null : (scan_row.getUTF8String(27));
/* 109 */       boolean scan_isNull104 = scan_row.isNullAt(28);
/* 110 */       Decimal scan_value104 = scan_isNull104 ? null : (scan_row.getDecimal(28, 38, 0));
/* 111 */       boolean scan_isNull105 = scan_row.isNullAt(29);
/* 112 */       Decimal scan_value105 = scan_isNull105 ? null : (scan_row.getDecimal(29, 38, 0));
/* 113 */       boolean scan_isNull106 = scan_row.isNullAt(30);
/* 114 */       Decimal scan_value106 = scan_isNull106 ? null : (scan_row.getDecimal(30, 38, 0));
/* 115 */       boolean scan_isNull107 = scan_row.isNullAt(31);
/* 116 */       UTF8String scan_value107 = scan_isNull107 ? null : (scan_row.getUTF8String(31));
/* 117 */       boolean scan_isNull108 = scan_row.isNullAt(32);
/* 118 */       UTF8String scan_value108 = scan_isNull108 ? null : (scan_row.getUTF8String(32));
/* 119 */       boolean scan_isNull109 = scan_row.isNullAt(33);
/* 120 */       UTF8String scan_value109 = scan_isNull109 ? null : (scan_row.getUTF8String(33));
/* 121 */       boolean scan_isNull110 = scan_row.isNullAt(34);
/* 122 */       UTF8String scan_value110 = scan_isNull110 ? null : (scan_row.getUTF8String(34));
/* 123 */       boolean scan_isNull111 = scan_row.isNullAt(35);
/* 124 */       Decimal scan_value111 = scan_isNull111 ? null : (scan_row.getDecimal(35, 38, 0));
/* 125 */       boolean scan_isNull112 = scan_row.isNullAt(36);
/* 126 */       UTF8String scan_value112 = scan_isNull112 ? null : (scan_row.getUTF8String(36));
/* 127 */       boolean scan_isNull113 = scan_row.isNullAt(37);
/* 128 */       Decimal scan_value113 = scan_isNull113 ? null : (scan_row.getDecimal(37, 38, 0));
/* 129 */       boolean scan_isNull114 = scan_row.isNullAt(38);
/* 130 */       Decimal scan_value114 = scan_isNull114 ? null : (scan_row.getDecimal(38, 38, 0));
/* 131 */       boolean scan_isNull115 = scan_row.isNullAt(39);
/* 132 */       Decimal scan_value115 = scan_isNull115 ? null : (scan_row.getDecimal(39, 38, 0));
/* 133 */       boolean scan_isNull116 = scan_row.isNullAt(40);
/* 134 */       Decimal scan_value116 = scan_isNull116 ? null : (scan_row.getDecimal(40, 38, 0));
/* 135 */       boolean scan_isNull117 = scan_row.isNullAt(41);
/* 136 */       Decimal scan_value117 = scan_isNull117 ? null : (scan_row.getDecimal(41, 38, 0));
/* 137 */       boolean scan_isNull118 = scan_row.isNullAt(42);
/* 138 */       UTF8String scan_value118 = scan_isNull118 ? null : (scan_row.getUTF8String(42));
/* 139 */       boolean scan_isNull119 = scan_row.isNullAt(43);
/* 140 */       UTF8String scan_value119 = scan_isNull119 ? null : (scan_row.getUTF8String(43));
/* 141 */       boolean scan_isNull120 = scan_row.isNullAt(44);
/* 142 */       UTF8String scan_value120 = scan_isNull120 ? null : (scan_row.getUTF8String(44));
/* 143 */       boolean scan_isNull121 = scan_row.isNullAt(45);
/* 144 */       UTF8String scan_value121 = scan_isNull121 ? null : (scan_row.getUTF8String(45));
/* 145 */       boolean scan_isNull122 = scan_row.isNullAt(46);
/* 146 */       Decimal scan_value122 = scan_isNull122 ? null : (scan_row.getDecimal(46, 38, 0));
/* 147 */       boolean scan_isNull123 = scan_row.isNullAt(47);
/* 148 */       Decimal scan_value123 = scan_isNull123 ? null : (scan_row.getDecimal(47, 38, 0));
/* 149 */       boolean scan_isNull124 = scan_row.isNullAt(48);
/* 150 */       Decimal scan_value124 = scan_isNull124 ? null : (scan_row.getDecimal(48, 38, 0));
/* 151 */       boolean scan_isNull125 = scan_row.isNullAt(49);
/* 152 */       UTF8String scan_value125 = scan_isNull125 ? null : (scan_row.getUTF8String(49));
/* 153 */       boolean scan_isNull126 = scan_row.isNullAt(50);
/* 154 */       UTF8String scan_value126 = scan_isNull126 ? null : (scan_row.getUTF8String(50));
/* 155 */       boolean scan_isNull127 = scan_row.isNullAt(51);
/* 156 */       UTF8String scan_value127 = scan_isNull127 ? null : (scan_row.getUTF8String(51));
/* 157 */       boolean scan_isNull128 = scan_row.isNullAt(52);
/* 158 */       UTF8String scan_value128 = scan_isNull128 ? null : (scan_row.getUTF8String(52));
/* 159 */       boolean scan_isNull129 = scan_row.isNullAt(53);
/* 160 */       Decimal scan_value129 = scan_isNull129 ? null : (scan_row.getDecimal(53, 38, 0));
/* 161 */       boolean scan_isNull130 = scan_row.isNullAt(54);
/* 162 */       UTF8String scan_value130 = scan_isNull130 ? null : (scan_row.getUTF8String(54));
/* 163 */       boolean scan_isNull131 = scan_row.isNullAt(55);
/* 164 */       Decimal scan_value131 = scan_isNull131 ? null : (scan_row.getDecimal(55, 38, 0));
/* 165 */       boolean scan_isNull132 = scan_row.isNullAt(56);
/* 166 */       Decimal scan_value132 = scan_isNull132 ? null : (scan_row.getDecimal(56, 38, 0));
/* 167 */       boolean scan_isNull133 = scan_row.isNullAt(57);
/* 168 */       Decimal scan_value133 = scan_isNull133 ? null : (scan_row.getDecimal(57, 38, 0));
/* 169 */       boolean scan_isNull134 = scan_row.isNullAt(58);
/* 170 */       Decimal scan_value134 = scan_isNull134 ? null : (scan_row.getDecimal(58, 38, 0));
/* 171 */       boolean scan_isNull135 = scan_row.isNullAt(59);
/* 172 */       Decimal scan_value135 = scan_isNull135 ? null : (scan_row.getDecimal(59, 38, 0));
/* 173 */       boolean scan_isNull136 = scan_row.isNullAt(60);
/* 174 */       UTF8String scan_value136 = scan_isNull136 ? null : (scan_row.getUTF8String(60));
/* 175 */       boolean scan_isNull137 = scan_row.isNullAt(61);
/* 176 */       UTF8String scan_value137 = scan_isNull137 ? null : (scan_row.getUTF8String(61));
/* 177 */       boolean scan_isNull138 = scan_row.isNullAt(62);
/* 178 */       UTF8String scan_value138 = scan_isNull138 ? null : (scan_row.getUTF8String(62));
/* 179 */       boolean scan_isNull139 = scan_row.isNullAt(63);
/* 180 */       UTF8String scan_value139 = scan_isNull139 ? null : (scan_row.getUTF8String(63));
/* 181 */       boolean scan_isNull140 = scan_row.isNullAt(64);
/* 182 */       Decimal scan_value140 = scan_isNull140 ? null : (scan_row.getDecimal(64, 38, 0));
/* 183 */       boolean scan_isNull141 = scan_row.isNullAt(65);
/* 184 */       Decimal scan_value141 = scan_isNull141 ? null : (scan_row.getDecimal(65, 38, 0));
/* 185 */       boolean scan_isNull142 = scan_row.isNullAt(66);
/* 186 */       Decimal scan_value142 = scan_isNull142 ? null : (scan_row.getDecimal(66, 38, 0));
/* 187 */       boolean scan_isNull143 = scan_row.isNullAt(67);
/* 188 */       UTF8String scan_value143 = scan_isNull143 ? null : (scan_row.getUTF8String(67));
/* 189 */       boolean scan_isNull144 = scan_row.isNullAt(68);
/* 190 */       UTF8String scan_value144 = scan_isNull144 ? null : (scan_row.getUTF8String(68));
/* 191 */       boolean scan_isNull145 = scan_row.isNullAt(69);
/* 192 */       UTF8String scan_value145 = scan_isNull145 ? null : (scan_row.getUTF8String(69));
/* 193 */       boolean scan_isNull146 = scan_row.isNullAt(70);
/* 194 */       UTF8String scan_value146 = scan_isNull146 ? null : (scan_row.getUTF8String(70));
/* 195 */       boolean scan_isNull148 = scan_row.isNullAt(72);
/* 196 */       long scan_value148 = scan_isNull148 ? -1L : (scan_row.getLong(72));
/* 197 */       boolean scan_isNull149 = scan_row.isNullAt(73);
/* 198 */       long scan_value149 = scan_isNull149 ? -1L : (scan_row.getLong(73));
/* 199 */       boolean scan_isNull150 = scan_row.isNullAt(74);
/* 200 */       UTF8String scan_value150 = scan_isNull150 ? null : (scan_row.getUTF8String(74));
/* 201 */       boolean scan_isNull151 = scan_row.isNullAt(75);
/* 202 */       UTF8String scan_value151 = scan_isNull151 ? null : (scan_row.getUTF8String(75));
/* 203 */       project_holder.reset();
/* 204 */
/* 205 */       project_rowWriter.zeroOutNullBytes();
/* 206 */
/* 207 */       if (scan_isNull76) {
/* 208 */         project_rowWriter.write(0, (Decimal) null, 38, 0);
/* 209 */       } else {
/* 210 */         project_rowWriter.write(0, scan_value76, 38, 0);
/* 211 */       }
/* 212 */
/* 213 */       if (scan_isNull77) {
/* 214 */         project_rowWriter.setNullAt(1);
/* 215 */       } else {
/* 216 */         project_rowWriter.write(1, scan_value77);
/* 217 */       }
/* 218 */
/* 219 */       if (scan_isNull78) {
/* 220 */         project_rowWriter.write(2, (Decimal) null, 38, 0);
/* 221 */       } else {
/* 222 */         project_rowWriter.write(2, scan_value78, 38, 0);
/* 223 */       }
/* 224 */
/* 225 */       if (scan_isNull79) {
/* 226 */         project_rowWriter.write(3, (Decimal) null, 38, 0);
/* 227 */       } else {
/* 228 */         project_rowWriter.write(3, scan_value79, 38, 0);
/* 229 */       }
/* 230 */
/* 231 */       if (scan_isNull80) {
/* 232 */         project_rowWriter.write(4, (Decimal) null, 38, 0);
/* 233 */       } else {
/* 234 */         project_rowWriter.write(4, scan_value80, 38, 0);
/* 235 */       }
/* 236 */
/* 237 */       if (scan_isNull81) {
/* 238 */         project_rowWriter.write(5, (Decimal) null, 38, 0);
/* 239 */       } else {
/* 240 */         project_rowWriter.write(5, scan_value81, 38, 0);
/* 241 */       }
/* 242 */
/* 243 */       if (scan_isNull82) {
/* 244 */         project_rowWriter.write(6, (Decimal) null, 38, 0);
/* 245 */       } else {
/* 246 */         project_rowWriter.write(6, scan_value82, 38, 0);
/* 247 */       }
/* 248 */
/* 249 */       if (scan_isNull83) {
/* 250 */         project_rowWriter.setNullAt(7);
/* 251 */       } else {
/* 252 */         project_rowWriter.write(7, scan_value83);
/* 253 */       }
/* 254 */
/* 255 */       if (scan_isNull84) {
/* 256 */         project_rowWriter.setNullAt(8);
/* 257 */       } else {
/* 258 */         project_rowWriter.write(8, scan_value84);
/* 259 */       }
/* 260 */
/* 261 */       if (scan_isNull85) {
/* 262 */         project_rowWriter.setNullAt(9);
/* 263 */       } else {
/* 264 */         project_rowWriter.write(9, scan_value85);
/* 265 */       }
/* 266 */
/* 267 */       if (scan_isNull86) {
/* 268 */         project_rowWriter.write(10, (Decimal) null, 38, 0);
/* 269 */       } else {
/* 270 */         project_rowWriter.write(10, scan_value86, 38, 0);
/* 271 */       }
/* 272 */
/* 273 */       if (scan_isNull87) {
/* 274 */         project_rowWriter.write(11, (Decimal) null, 38, 0);
/* 275 */       } else {
/* 276 */         project_rowWriter.write(11, scan_value87, 38, 0);
/* 277 */       }
/* 278 */
/* 279 */       if (scan_isNull88) {
/* 280 */         project_rowWriter.write(12, (Decimal) null, 38, 0);
/* 281 */       } else {
/* 282 */         project_rowWriter.write(12, scan_value88, 38, 0);
/* 283 */       }
/* 284 */
/* 285 */       if (scan_isNull89) {
/* 286 */         project_rowWriter.setNullAt(13);
/* 287 */       } else {
/* 288 */         project_rowWriter.write(13, scan_value89);
/* 289 */       }
/* 290 */
/* 291 */       if (scan_isNull90) {
/* 292 */         project_rowWriter.setNullAt(14);
/* 293 */       } else {
/* 294 */         project_rowWriter.write(14, scan_value90);
/* 295 */       }
/* 296 */
/* 297 */       if (scan_isNull91) {
/* 298 */         project_rowWriter.setNullAt(15);
/* 299 */       } else {
/* 300 */         project_rowWriter.write(15, scan_value91);
/* 301 */       }
/* 302 */
/* 303 */       if (scan_isNull92) {
/* 304 */         project_rowWriter.setNullAt(16);
/* 305 */       } else {
/* 306 */         project_rowWriter.write(16, scan_value92);
/* 307 */       }
/* 308 */
/* 309 */       if (scan_isNull93) {
/* 310 */         project_rowWriter.write(17, (Decimal) null, 38, 0);
/* 311 */       } else {
/* 312 */         project_rowWriter.write(17, scan_value93, 38, 0);
/* 313 */       }
/* 314 */
/* 315 */       if (scan_isNull94) {
/* 316 */         project_rowWriter.setNullAt(18);
/* 317 */       } else {
/* 318 */         project_rowWriter.write(18, scan_value94);
/* 319 */       }
/* 320 */
/* 321 */       if (scan_isNull95) {
/* 322 */         project_rowWriter.write(19, (Decimal) null, 38, 0);
/* 323 */       } else {
/* 324 */         project_rowWriter.write(19, scan_value95, 38, 0);
/* 325 */       }
/* 326 */
/* 327 */       if (scan_isNull96) {
/* 328 */         project_rowWriter.write(20, (Decimal) null, 38, 0);
/* 329 */       } else {
/* 330 */         project_rowWriter.write(20, scan_value96, 38, 0);
/* 331 */       }
/* 332 */
/* 333 */       if (scan_isNull97) {
/* 334 */         project_rowWriter.write(21, (Decimal) null, 38, 0);
/* 335 */       } else {
/* 336 */         project_rowWriter.write(21, scan_value97, 38, 0);
/* 337 */       }
/* 338 */
/* 339 */       if (scan_isNull98) {
/* 340 */         project_rowWriter.write(22, (Decimal) null, 38, 0);
/* 341 */       } else {
/* 342 */         project_rowWriter.write(22, scan_value98, 38, 0);
/* 343 */       }
/* 344 */
/* 345 */       if (scan_isNull99) {
/* 346 */         project_rowWriter.write(23, (Decimal) null, 38, 0);
/* 347 */       } else {
/* 348 */         project_rowWriter.write(23, scan_value99, 38, 0);
/* 349 */       }
/* 350 */
/* 351 */       if (scan_isNull100) {
/* 352 */         project_rowWriter.setNullAt(24);
/* 353 */       } else {
/* 354 */         project_rowWriter.write(24, scan_value100);
/* 355 */       }
/* 356 */
/* 357 */       if (scan_isNull101) {
/* 358 */         project_rowWriter.setNullAt(25);
/* 359 */       } else {
/* 360 */         project_rowWriter.write(25, scan_value101);
/* 361 */       }
/* 362 */
/* 363 */       if (scan_isNull102) {
/* 364 */         project_rowWriter.setNullAt(26);
/* 365 */       } else {
/* 366 */         project_rowWriter.write(26, scan_value102);
/* 367 */       }
/* 368 */
/* 369 */       if (scan_isNull103) {
/* 370 */         project_rowWriter.setNullAt(27);
/* 371 */       } else {
/* 372 */         project_rowWriter.write(27, scan_value103);
/* 373 */       }
/* 374 */
/* 375 */       if (scan_isNull104) {
/* 376 */         project_rowWriter.write(28, (Decimal) null, 38, 0);
/* 377 */       } else {
/* 378 */         project_rowWriter.write(28, scan_value104, 38, 0);
/* 379 */       }
/* 380 */
/* 381 */       if (scan_isNull105) {
/* 382 */         project_rowWriter.write(29, (Decimal) null, 38, 0);
/* 383 */       } else {
/* 384 */         project_rowWriter.write(29, scan_value105, 38, 0);
/* 385 */       }
/* 386 */
/* 387 */       if (scan_isNull106) {
/* 388 */         project_rowWriter.write(30, (Decimal) null, 38, 0);
/* 389 */       } else {
/* 390 */         project_rowWriter.write(30, scan_value106, 38, 0);
/* 391 */       }
/* 392 */
/* 393 */       if (scan_isNull107) {
/* 394 */         project_rowWriter.setNullAt(31);
/* 395 */       } else {
/* 396 */         project_rowWriter.write(31, scan_value107);
/* 397 */       }
/* 398 */
/* 399 */       if (scan_isNull108) {
/* 400 */         project_rowWriter.setNullAt(32);
/* 401 */       } else {
/* 402 */         project_rowWriter.write(32, scan_value108);
/* 403 */       }
/* 404 */
/* 405 */       if (scan_isNull109) {
/* 406 */         project_rowWriter.setNullAt(33);
/* 407 */       } else {
/* 408 */         project_rowWriter.write(33, scan_value109);
/* 409 */       }
/* 410 */
/* 411 */       if (scan_isNull110) {
/* 412 */         project_rowWriter.setNullAt(34);
/* 413 */       } else {
/* 414 */         project_rowWriter.write(34, scan_value110);
/* 415 */       }
/* 416 */
/* 417 */       if (scan_isNull111) {
/* 418 */         project_rowWriter.write(35, (Decimal) null, 38, 0);
/* 419 */       } else {
/* 420 */         project_rowWriter.write(35, scan_value111, 38, 0);
/* 421 */       }
/* 422 */
/* 423 */       if (scan_isNull112) {
/* 424 */         project_rowWriter.setNullAt(36);
/* 425 */       } else {
/* 426 */         project_rowWriter.write(36, scan_value112);
/* 427 */       }
/* 428 */
/* 429 */       if (scan_isNull113) {
/* 430 */         project_rowWriter.write(37, (Decimal) null, 38, 0);
/* 431 */       } else {
/* 432 */         project_rowWriter.write(37, scan_value113, 38, 0);
/* 433 */       }
/* 434 */
/* 435 */       if (scan_isNull114) {
/* 436 */         project_rowWriter.write(38, (Decimal) null, 38, 0);
/* 437 */       } else {
/* 438 */         project_rowWriter.write(38, scan_value114, 38, 0);
/* 439 */       }
/* 440 */
/* 441 */       if (scan_isNull115) {
/* 442 */         project_rowWriter.write(39, (Decimal) null, 38, 0);
/* 443 */       } else {
/* 444 */         project_rowWriter.write(39, scan_value115, 38, 0);
/* 445 */       }
/* 446 */
/* 447 */       if (scan_isNull116) {
/* 448 */         project_rowWriter.write(40, (Decimal) null, 38, 0);
/* 449 */       } else {
/* 450 */         project_rowWriter.write(40, scan_value116, 38, 0);
/* 451 */       }
/* 452 */
/* 453 */       if (scan_isNull117) {
/* 454 */         project_rowWriter.write(41, (Decimal) null, 38, 0);
/* 455 */       } else {
/* 456 */         project_rowWriter.write(41, scan_value117, 38, 0);
/* 457 */       }
/* 458 */
/* 459 */       if (scan_isNull118) {
/* 460 */         project_rowWriter.setNullAt(42);
/* 461 */       } else {
/* 462 */         project_rowWriter.write(42, scan_value118);
/* 463 */       }
/* 464 */
/* 465 */       if (scan_isNull119) {
/* 466 */         project_rowWriter.setNullAt(43);
/* 467 */       } else {
/* 468 */         project_rowWriter.write(43, scan_value119);
/* 469 */       }
/* 470 */
/* 471 */       if (scan_isNull120) {
/* 472 */         project_rowWriter.setNullAt(44);
/* 473 */       } else {
/* 474 */         project_rowWriter.write(44, scan_value120);
/* 475 */       }
/* 476 */
/* 477 */       if (scan_isNull121) {
/* 478 */         project_rowWriter.setNullAt(45);
/* 479 */       } else {
/* 480 */         project_rowWriter.write(45, scan_value121);
/* 481 */       }
/* 482 */
/* 483 */       if (scan_isNull122) {
/* 484 */         project_rowWriter.write(46, (Decimal) null, 38, 0);
/* 485 */       } else {
/* 486 */         project_rowWriter.write(46, scan_value122, 38, 0);
/* 487 */       }
/* 488 */
/* 489 */       if (scan_isNull123) {
/* 490 */         project_rowWriter.write(47, (Decimal) null, 38, 0);
/* 491 */       } else {
/* 492 */         project_rowWriter.write(47, scan_value123, 38, 0);
/* 493 */       }
/* 494 */
/* 495 */       if (scan_isNull124) {
/* 496 */         project_rowWriter.write(48, (Decimal) null, 38, 0);
/* 497 */       } else {
/* 498 */         project_rowWriter.write(48, scan_value124, 38, 0);
/* 499 */       }
/* 500 */
/* 501 */       if (scan_isNull125) {
/* 502 */         project_rowWriter.setNullAt(49);
/* 503 */       } else {
/* 504 */         project_rowWriter.write(49, scan_value125);
/* 505 */       }
/* 506 */
/* 507 */       if (scan_isNull126) {
/* 508 */         project_rowWriter.setNullAt(50);
/* 509 */       } else {
/* 510 */         project_rowWriter.write(50, scan_value126);
/* 511 */       }
/* 512 */
/* 513 */       if (scan_isNull127) {
/* 514 */         project_rowWriter.setNullAt(51);
/* 515 */       } else {
/* 516 */         project_rowWriter.write(51, scan_value127);
/* 517 */       }
/* 518 */
/* 519 */       if (scan_isNull128) {
/* 520 */         project_rowWriter.setNullAt(52);
/* 521 */       } else {
/* 522 */         project_rowWriter.write(52, scan_value128);
/* 523 */       }
/* 524 */
/* 525 */       if (scan_isNull129) {
/* 526 */         project_rowWriter.write(53, (Decimal) null, 38, 0);
/* 527 */       } else {
/* 528 */         project_rowWriter.write(53, scan_value129, 38, 0);
/* 529 */       }
/* 530 */
/* 531 */       if (scan_isNull130) {
/* 532 */         project_rowWriter.setNullAt(54);
/* 533 */       } else {
/* 534 */         project_rowWriter.write(54, scan_value130);
/* 535 */       }
/* 536 */
/* 537 */       if (scan_isNull131) {
/* 538 */         project_rowWriter.write(55, (Decimal) null, 38, 0);
/* 539 */       } else {
/* 540 */         project_rowWriter.write(55, scan_value131, 38, 0);
/* 541 */       }
/* 542 */
/* 543 */       if (scan_isNull132) {
/* 544 */         project_rowWriter.write(56, (Decimal) null, 38, 0);
/* 545 */       } else {
/* 546 */         project_rowWriter.write(56, scan_value132, 38, 0);
/* 547 */       }
/* 548 */
/* 549 */       if (scan_isNull133) {
/* 550 */         project_rowWriter.write(57, (Decimal) null, 38, 0);
/* 551 */       } else {
/* 552 */         project_rowWriter.write(57, scan_value133, 38, 0);
/* 553 */       }
/* 554 */
/* 555 */       if (scan_isNull134) {
/* 556 */         project_rowWriter.write(58, (Decimal) null, 38, 0);
/* 557 */       } else {
/* 558 */         project_rowWriter.write(58, scan_value134, 38, 0);
/* 559 */       }
/* 560 */
/* 561 */       if (scan_isNull135) {
/* 562 */         project_rowWriter.write(59, (Decimal) null, 38, 0);
/* 563 */       } else {
/* 564 */         project_rowWriter.write(59, scan_value135, 38, 0);
/* 565 */       }
/* 566 */
/* 567 */       if (scan_isNull136) {
/* 568 */         project_rowWriter.setNullAt(60);
/* 569 */       } else {
/* 570 */         project_rowWriter.write(60, scan_value136);
/* 571 */       }
/* 572 */
/* 573 */       if (scan_isNull137) {
/* 574 */         project_rowWriter.setNullAt(61);
/* 575 */       } else {
/* 576 */         project_rowWriter.write(61, scan_value137);
/* 577 */       }
/* 578 */
/* 579 */       if (scan_isNull138) {
/* 580 */         project_rowWriter.setNullAt(62);
/* 581 */       } else {
/* 582 */         project_rowWriter.write(62, scan_value138);
/* 583 */       }
/* 584 */
/* 585 */       if (scan_isNull139) {
/* 586 */         project_rowWriter.setNullAt(63);
/* 587 */       } else {
/* 588 */         project_rowWriter.write(63, scan_value139);
/* 589 */       }
/* 590 */
/* 591 */       if (scan_isNull140) {
/* 592 */         project_rowWriter.write(64, (Decimal) null, 38, 0);
/* 593 */       } else {
/* 594 */         project_rowWriter.write(64, scan_value140, 38, 0);
/* 595 */       }
/* 596 */
/* 597 */       if (scan_isNull141) {
/* 598 */         project_rowWriter.write(65, (Decimal) null, 38, 0);
/* 599 */       } else {
/* 600 */         project_rowWriter.write(65, scan_value141, 38, 0);
/* 601 */       }
/* 602 */
/* 603 */       if (scan_isNull142) {
/* 604 */         project_rowWriter.write(66, (Decimal) null, 38, 0);
/* 605 */       } else {
/* 606 */         project_rowWriter.write(66, scan_value142, 38, 0);
/* 607 */       }
/* 608 */
/* 609 */       if (scan_isNull143) {
/* 610 */         project_rowWriter.setNullAt(67);
/* 611 */       } else {
/* 612 */         project_rowWriter.write(67, scan_value143);
/* 613 */       }
/* 614 */
/* 615 */       if (scan_isNull144) {
/* 616 */         project_rowWriter.setNullAt(68);
/* 617 */       } else {
/* 618 */         project_rowWriter.write(68, scan_value144);
/* 619 */       }
/* 620 */
/* 621 */       if (scan_isNull145) {
/* 622 */         project_rowWriter.setNullAt(69);
/* 623 */       } else {
/* 624 */         project_rowWriter.write(69, scan_value145);
/* 625 */       }
/* 626 */
/* 627 */       if (scan_isNull146) {
/* 628 */         project_rowWriter.setNullAt(70);
/* 629 */       } else {
/* 630 */         project_rowWriter.write(70, scan_value146);
/* 631 */       }
/* 632 */
/* 633 */       project_rowWriter.write(71, scan_value147);
/* 634 */
/* 635 */       if (scan_isNull148) {
/* 636 */         project_rowWriter.setNullAt(72);
/* 637 */       } else {
/* 638 */         project_rowWriter.write(72, scan_value148);
/* 639 */       }
/* 640 */
/* 641 */       if (scan_isNull149) {
/* 642 */         project_rowWriter.setNullAt(73);
/* 643 */       } else {
/* 644 */         project_rowWriter.write(73, scan_value149);
/* 645 */       }
/* 646 */
/* 647 */       if (scan_isNull150) {
/* 648 */         project_rowWriter.setNullAt(74);
/* 649 */       } else {
/* 650 */         project_rowWriter.write(74, scan_value150);
/* 651 */       }
/* 652 */
/* 653 */       if (scan_isNull151) {
/* 654 */         project_rowWriter.setNullAt(75);
/* 655 */       } else {
/* 656 */         project_rowWriter.write(75, scan_value151);
/* 657 */       }
/* 658 */       project_result.setTotalSize(project_holder.totalSize());
/* 659 */       append(project_result);
/* 660 */       if (shouldStop()) return;
/* 661 */     }
/* 662 */   }
/* 663 */ }

17/11/03 09:02:32 INFO CodeGenerator: Code generated in 792.830887 ms
17/11/03 09:02:32 DEBUG ClosureCleaner: +++ Cleaning closure <function2> (org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8) +++
17/11/03 09:02:32 DEBUG ClosureCleaner:  + declared fields: 4
17/11/03 09:02:32 DEBUG ClosureCleaner:      public static final long org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8.serialVersionUID
17/11/03 09:02:32 DEBUG ClosureCleaner:      private final org.apache.spark.sql.catalyst.expressions.codegen.CodeAndComment org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8.cleanedSource$2
17/11/03 09:02:32 DEBUG ClosureCleaner:      private final java.lang.Object[] org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8.references$1
17/11/03 09:02:32 DEBUG ClosureCleaner:      public final org.apache.spark.sql.execution.metric.SQLMetric org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8.durationMs$1
17/11/03 09:02:32 DEBUG ClosureCleaner:  + declared methods: 2
17/11/03 09:02:32 DEBUG ClosureCleaner:      public final java.lang.Object org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8.apply(java.lang.Object,java.lang.Object)
17/11/03 09:02:32 DEBUG ClosureCleaner:      public final scala.collection.Iterator org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8.apply(int,scala.collection.Iterator)
17/11/03 09:02:32 DEBUG ClosureCleaner:  + inner classes: 1
17/11/03 09:02:32 DEBUG ClosureCleaner:      org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8$$anon$1
17/11/03 09:02:32 DEBUG ClosureCleaner:  + outer classes: 0
17/11/03 09:02:32 DEBUG ClosureCleaner:  + outer objects: 0
17/11/03 09:02:32 DEBUG ClosureCleaner:  + populating accessed fields because this is the starting closure
17/11/03 09:02:32 DEBUG ClosureCleaner:  + fields accessed by starting closure: 0
17/11/03 09:02:32 DEBUG ClosureCleaner:  + there are no enclosing objects!
17/11/03 09:02:32 DEBUG ClosureCleaner:  +++ closure <function2> (org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8) is now cleaned +++
17/11/03 09:02:32 DEBUG ClosureCleaner: +++ Cleaning closure <function1> (org.apache.spark.sql.execution.SparkPlan$$anonfun$5) +++
17/11/03 09:02:32 DEBUG ClosureCleaner:  + declared fields: 1
17/11/03 09:02:32 DEBUG ClosureCleaner:      public static final long org.apache.spark.sql.execution.SparkPlan$$anonfun$5.serialVersionUID
17/11/03 09:02:32 DEBUG ClosureCleaner:  + declared methods: 2
17/11/03 09:02:32 DEBUG ClosureCleaner:      public final java.lang.Object org.apache.spark.sql.execution.SparkPlan$$anonfun$5.apply(java.lang.Object)
17/11/03 09:02:32 DEBUG ClosureCleaner:      public final java.lang.Object org.apache.spark.sql.execution.SparkPlan$$anonfun$5.apply(scala.collection.Iterator)
17/11/03 09:02:32 DEBUG ClosureCleaner:  + inner classes: 0
17/11/03 09:02:32 DEBUG ClosureCleaner:  + outer classes: 0
17/11/03 09:02:32 DEBUG ClosureCleaner:  + outer objects: 0
17/11/03 09:02:32 DEBUG ClosureCleaner:  + populating accessed fields because this is the starting closure
17/11/03 09:02:32 DEBUG ClosureCleaner:  + fields accessed by starting closure: 0
17/11/03 09:02:32 DEBUG ClosureCleaner:  + there are no enclosing objects!
17/11/03 09:02:32 DEBUG ClosureCleaner:  +++ closure <function1> (org.apache.spark.sql.execution.SparkPlan$$anonfun$5) is now cleaned +++
17/11/03 09:02:32 DEBUG ClosureCleaner: +++ Cleaning closure <function2> (org.apache.spark.SparkContext$$anonfun$runJob$5) +++
17/11/03 09:02:32 DEBUG ClosureCleaner:  + declared fields: 2
17/11/03 09:02:32 DEBUG ClosureCleaner:      public static final long org.apache.spark.SparkContext$$anonfun$runJob$5.serialVersionUID
17/11/03 09:02:32 DEBUG ClosureCleaner:      private final scala.Function1 org.apache.spark.SparkContext$$anonfun$runJob$5.cleanedFunc$1
17/11/03 09:02:32 DEBUG ClosureCleaner:  + declared methods: 2
17/11/03 09:02:32 DEBUG ClosureCleaner:      public final java.lang.Object org.apache.spark.SparkContext$$anonfun$runJob$5.apply(java.lang.Object,java.lang.Object)
17/11/03 09:02:32 DEBUG ClosureCleaner:      public final java.lang.Object org.apache.spark.SparkContext$$anonfun$runJob$5.apply(org.apache.spark.TaskContext,scala.collection.Iterator)
17/11/03 09:02:32 DEBUG ClosureCleaner:  + inner classes: 0
17/11/03 09:02:32 DEBUG ClosureCleaner:  + outer classes: 0
17/11/03 09:02:32 DEBUG ClosureCleaner:  + outer objects: 0
17/11/03 09:02:32 DEBUG ClosureCleaner:  + populating accessed fields because this is the starting closure
17/11/03 09:02:32 DEBUG ClosureCleaner:  + fields accessed by starting closure: 0
17/11/03 09:02:32 DEBUG ClosureCleaner:  + there are no enclosing objects!
17/11/03 09:02:32 DEBUG ClosureCleaner:  +++ closure <function2> (org.apache.spark.SparkContext$$anonfun$runJob$5) is now cleaned +++
17/11/03 09:02:32 INFO SparkContext: Starting job: take at <console>:26
17/11/03 09:02:32 INFO DAGScheduler: Got job 0 (take at <console>:26) with 1 output partitions
17/11/03 09:02:32 INFO DAGScheduler: Final stage: ResultStage 0 (take at <console>:26)
17/11/03 09:02:32 INFO DAGScheduler: Parents of final stage: List()
17/11/03 09:02:32 INFO DAGScheduler: Missing parents: List()
17/11/03 09:02:32 DEBUG DAGScheduler: submitStage(ResultStage 0)
17/11/03 09:02:32 DEBUG DAGScheduler: missing: List()
17/11/03 09:02:32 INFO DAGScheduler: Submitting ResultStage 0 (MapPartitionsRDD[2] at take at <console>:26), which has no missing parents
17/11/03 09:02:32 DEBUG DAGScheduler: submitMissingTasks(ResultStage 0)
17/11/03 09:02:32 DEBUG DFSClient: DFSClient writeChunk allocating new packet seqno=4, src=/spark2-history/local-1509699167113.inprogress, packetSize=65016, chunksPerPacket=126, bytesCurBlock=33792
17/11/03 09:02:32 DEBUG DFSClient: DFSClient flush(): bytesCurBlock=36571 lastFlushOffset=34294 createNewBlock=false
17/11/03 09:02:32 DEBUG DFSClient: Queued packet 4
17/11/03 09:02:32 DEBUG DFSClient: Waiting for ack for: 4
17/11/03 09:02:32 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074042151_301380 sending packet packet seqno: 4 offsetInBlock: 33792 lastPacketInBlock: false lastByteOffsetInBlock: 36571
17/11/03 09:02:32 DEBUG DFSClient: DFSClient seqno: 4 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 976453 flag: 0 flag: 0 flag: 0
17/11/03 09:02:32 INFO MemoryStore: Block broadcast_1 stored as values in memory (estimated size 37.6 KB, free 365.9 MB)
17/11/03 09:02:32 DEBUG BlockManager: Put block broadcast_1 locally took  2 ms
17/11/03 09:02:32 DEBUG BlockManager: Putting block broadcast_1 without replication took  2 ms
17/11/03 09:02:32 INFO MemoryStore: Block broadcast_1_piece0 stored as bytes in memory (estimated size 11.7 KB, free 365.8 MB)
17/11/03 09:02:32 INFO BlockManagerInfo: Added broadcast_1_piece0 in memory on 172.30.1.247:49071 (size: 11.7 KB, free: 366.3 MB)
17/11/03 09:02:32 DEBUG BlockManagerMaster: Updated info of block broadcast_1_piece0
17/11/03 09:02:32 DEBUG BlockManager: Told master about block broadcast_1_piece0
17/11/03 09:02:32 DEBUG BlockManager: Put block broadcast_1_piece0 locally took  2 ms
17/11/03 09:02:32 DEBUG BlockManager: Putting block broadcast_1_piece0 without replication took  2 ms
17/11/03 09:02:32 INFO SparkContext: Created broadcast 1 from broadcast at DAGScheduler.scala:1012
17/11/03 09:02:32 INFO DAGScheduler: Submitting 1 missing tasks from ResultStage 0 (MapPartitionsRDD[2] at take at <console>:26)
17/11/03 09:02:32 DEBUG DAGScheduler: New pending partitions: Set(0)
17/11/03 09:02:32 INFO TaskSchedulerImpl: Adding task set 0.0 with 1 tasks
17/11/03 09:02:32 DEBUG TaskSetManager: Epoch for TaskSet 0.0: 0
17/11/03 09:02:32 DEBUG TaskSetManager: Valid locality levels for TaskSet 0.0: ANY
17/11/03 09:02:32 DEBUG TaskSchedulerImpl: parentName: , name: TaskSet_0, runningTasks: 0
17/11/03 09:02:32 DEBUG TaskSetManager: Valid locality levels for TaskSet 0.0: ANY
17/11/03 09:02:32 INFO TaskSetManager: Starting task 0.0 in stage 0.0 (TID 0, localhost, partition 0, ANY, 8952 bytes)
17/11/03 09:02:32 INFO Executor: Running task 0.0 in stage 0.0 (TID 0)
17/11/03 09:02:32 DEBUG Executor: Task 0's epoch is 0
17/11/03 09:02:32 DEBUG BlockManager: Getting local block broadcast_1
17/11/03 09:02:32 DEBUG BlockManager: Level for block broadcast_1 is StorageLevel(disk, memory, deserialized, 1 replicas)
17/11/03 09:02:32 INFO FileScanRDD: Reading File path: hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, range: 0-951814, partition values: [empty row]
17/11/03 09:02:32 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 09:02:32 DEBUG CodeGenerator: 
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 09:02:32 DEBUG TransportClientFactory: Creating new connection to /172.30.1.247:55570
17/11/03 09:02:32 DEBUG ResourceLeakDetector: -Dio.netty.leakDetectionLevel: simple
17/11/03 09:02:32 DEBUG TransportClientFactory: Connection to /172.30.1.247:55570 successful, running bootstraps...
17/11/03 09:02:32 INFO TransportClientFactory: Successfully created connection to /172.30.1.247:55570 after 30 ms (0 ms spent in bootstraps)
17/11/03 09:02:32 DEBUG TransportClient: Sending stream request for /classes/org/apache/spark/sql/catalyst/expressions/Object.class to /172.30.1.247:55570
17/11/03 09:02:32 DEBUG Recycler: -Dio.netty.recycler.maxCapacity.default: 262144
17/11/03 09:02:32 DEBUG NettyRpcEnv: Error downloading stream /classes/org/apache/spark/sql/catalyst/expressions/Object.class.
java.lang.RuntimeException: Stream '/classes/org/apache/spark/sql/catalyst/expressions/Object.class' was not found.
	at org.apache.spark.network.client.TransportResponseHandler.handle(TransportResponseHandler.java:222)
	at org.apache.spark.network.server.TransportChannelHandler.channelRead0(TransportChannelHandler.java:121)
	at org.apache.spark.network.server.TransportChannelHandler.channelRead0(TransportChannelHandler.java:51)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:266)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at org.apache.spark.network.util.TransportFrameDecoder.channelRead(TransportFrameDecoder.java:85)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:846)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
	at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
	at java.lang.Thread.run(Thread.java:748)
17/11/03 09:02:32 DEBUG ExecutorClassLoader: Did not load class org.apache.spark.sql.catalyst.expressions.Object from REPL class server at spark://172.30.1.247:55570/classes
java.lang.ClassNotFoundException: org/apache/spark/sql/catalyst/expressions/Object.class
	at org.apache.spark.repl.ExecutorClassLoader$$anon$1.toClassNotFound(ExecutorClassLoader.scala:105)
	at org.apache.spark.repl.ExecutorClassLoader$$anon$1.read(ExecutorClassLoader.scala:95)
	at org.apache.spark.repl.ExecutorClassLoader.readAndTransformClass(ExecutorClassLoader.scala:203)
	at org.apache.spark.repl.ExecutorClassLoader.findClassLocally(ExecutorClassLoader.scala:162)
	at org.apache.spark.repl.ExecutorClassLoader.findClass(ExecutorClassLoader.scala:80)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:411)
	at org.apache.spark.util.ParentClassLoader.loadClass(ParentClassLoader.scala:34)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at org.apache.spark.util.ParentClassLoader.loadClass(ParentClassLoader.scala:30)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:348)
	at org.codehaus.janino.ClassLoaderIClassLoader.findIClass(ClassLoaderIClassLoader.java:78)
	at org.codehaus.janino.IClassLoader.loadIClass(IClassLoader.java:254)
	at org.codehaus.janino.UnitCompiler.findTypeByName(UnitCompiler.java:6893)
	at org.codehaus.janino.UnitCompiler.getReferenceType(UnitCompiler.java:5331)
	at org.codehaus.janino.UnitCompiler.getReferenceType(UnitCompiler.java:5207)
	at org.codehaus.janino.UnitCompiler.getType2(UnitCompiler.java:5188)
	at org.codehaus.janino.UnitCompiler.access$12600(UnitCompiler.java:185)
	at org.codehaus.janino.UnitCompiler$16.visitReferenceType(UnitCompiler.java:5119)
	at org.codehaus.janino.Java$ReferenceType.accept(Java.java:2880)
	at org.codehaus.janino.UnitCompiler.getType(UnitCompiler.java:5159)
	at org.codehaus.janino.UnitCompiler.getType2(UnitCompiler.java:5414)
	at org.codehaus.janino.UnitCompiler.access$12400(UnitCompiler.java:185)
	at org.codehaus.janino.UnitCompiler$16.visitArrayType(UnitCompiler.java:5117)
	at org.codehaus.janino.Java$ArrayType.accept(Java.java:2954)
	at org.codehaus.janino.UnitCompiler.getType(UnitCompiler.java:5159)
	at org.codehaus.janino.UnitCompiler.access$16700(UnitCompiler.java:185)
	at org.codehaus.janino.UnitCompiler$31.getParameterTypes2(UnitCompiler.java:8533)
	at org.codehaus.janino.IClass$IInvocable.getParameterTypes(IClass.java:835)
	at org.codehaus.janino.IClass$IMethod.getDescriptor2(IClass.java:1063)
	at org.codehaus.janino.IClass$IInvocable.getDescriptor(IClass.java:849)
	at org.codehaus.janino.IClass.getIMethods(IClass.java:211)
	at org.codehaus.janino.IClass.getIMethods(IClass.java:199)
	at org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:409)
	at org.codehaus.janino.UnitCompiler.compile2(UnitCompiler.java:393)
	at org.codehaus.janino.UnitCompiler.access$400(UnitCompiler.java:185)
	at org.codehaus.janino.UnitCompiler$2.visitPackageMemberClassDeclaration(UnitCompiler.java:347)
	at org.codehaus.janino.Java$PackageMemberClassDeclaration.accept(Java.java:1139)
	at org.codehaus.janino.UnitCompiler.compile(UnitCompiler.java:354)
	at org.codehaus.janino.UnitCompiler.compileUnit(UnitCompiler.java:322)
	at org.codehaus.janino.SimpleCompiler.compileToClassLoader(SimpleCompiler.java:383)
	at org.codehaus.janino.ClassBodyEvaluator.compileToClass(ClassBodyEvaluator.java:315)
	at org.codehaus.janino.ClassBodyEvaluator.cook(ClassBodyEvaluator.java:233)
	at org.codehaus.janino.SimpleCompiler.cook(SimpleCompiler.java:192)
	at org.codehaus.commons.compiler.Cookable.cook(Cookable.java:84)
	at org.apache.spark.sql.catalyst.expressions.codegen.CodeGenerator$.org$apache$spark$sql$catalyst$expressions$codegen$CodeGenerator$$doCompile(CodeGenerator.scala:887)
	at org.apache.spark.sql.catalyst.expressions.codegen.CodeGenerator$$anon$1.load(CodeGenerator.scala:950)
	at org.apache.spark.sql.catalyst.expressions.codegen.CodeGenerator$$anon$1.load(CodeGenerator.scala:947)
	at org.spark_project.guava.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3599)
	at org.spark_project.guava.cache.LocalCache$Segment.loadSync(LocalCache.java:2379)
	at org.spark_project.guava.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2342)
	at org.spark_project.guava.cache.LocalCache$Segment.get(LocalCache.java:2257)
	at org.spark_project.guava.cache.LocalCache.get(LocalCache.java:4000)
	at org.spark_project.guava.cache.LocalCache.getOrLoad(LocalCache.java:4004)
	at org.spark_project.guava.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4874)
	at org.apache.spark.sql.catalyst.expressions.codegen.CodeGenerator$.compile(CodeGenerator.scala:841)
	at org.apache.spark.sql.catalyst.expressions.codegen.GenerateUnsafeProjection$.create(GenerateUnsafeProjection.scala:397)
	at org.apache.spark.sql.catalyst.expressions.codegen.GenerateUnsafeProjection$.create(GenerateUnsafeProjection.scala:356)
	at org.apache.spark.sql.catalyst.expressions.codegen.GenerateUnsafeProjection$.create(GenerateUnsafeProjection.scala:32)
	at org.apache.spark.sql.catalyst.expressions.codegen.CodeGenerator.generate(CodeGenerator.scala:825)
	at org.apache.spark.sql.catalyst.expressions.codegen.CodeGenerator.generate(CodeGenerator.scala:822)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.appendPartitionColumns$lzycompute(fileSourceInterfaces.scala:270)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.appendPartitionColumns(fileSourceInterfaces.scala:269)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(fileSourceInterfaces.scala:274)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(fileSourceInterfaces.scala:263)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.nextIterator(FileScanRDD.scala:116)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.hasNext(FileScanRDD.scala:91)
	at org.apache.spark.sql.catalyst.expressions.GeneratedClass$GeneratedIterator.processNext(generated.java:35)
	at org.apache.spark.sql.execution.BufferedRowIterator.hasNext(BufferedRowIterator.java:43)
	at org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8$$anon$1.hasNext(WholeStageCodegenExec.scala:370)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$4.apply(SparkPlan.scala:246)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$4.apply(SparkPlan.scala:240)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$24.apply(RDD.scala:803)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$24.apply(RDD.scala:803)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:319)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:283)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:70)
	at org.apache.spark.scheduler.Task.run(Task.scala:86)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:274)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.ClassNotFoundException: org/apache/spark/sql/catalyst/expressions/Object.class
	at org.apache.spark.repl.ExecutorClassLoader$$anon$1.toClassNotFound(ExecutorClassLoader.scala:105)
	at org.apache.spark.repl.ExecutorClassLoader$$anon$1.read(ExecutorClassLoader.scala:98)
	at java.io.FilterInputStream.read(FilterInputStream.java:107)
	at org.apache.spark.repl.ExecutorClassLoader$$anon$1.org$apache$spark$repl$ExecutorClassLoader$$anon$$super$read(ExecutorClassLoader.scala:95)
	at org.apache.spark.repl.ExecutorClassLoader$$anon$1$$anonfun$read$2.apply$mcI$sp(ExecutorClassLoader.scala:95)
	at org.apache.spark.repl.ExecutorClassLoader$$anon$1.toClassNotFound(ExecutorClassLoader.scala:102)
	... 83 more
Caused by: java.lang.RuntimeException: Stream '/classes/org/apache/spark/sql/catalyst/expressions/Object.class' was not found.
	at org.apache.spark.network.client.TransportResponseHandler.handle(TransportResponseHandler.java:222)
	at org.apache.spark.network.server.TransportChannelHandler.channelRead0(TransportChannelHandler.java:121)
	at org.apache.spark.network.server.TransportChannelHandler.channelRead0(TransportChannelHandler.java:51)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:266)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at org.apache.spark.network.util.TransportFrameDecoder.channelRead(TransportFrameDecoder.java:85)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:846)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
	at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
	... 1 more
17/11/03 09:02:32 DEBUG TransportClient: Sending stream request for /classes/org/apache/spark/sql/catalyst/expressions/GeneratedClass.class to /172.30.1.247:55570
17/11/03 09:02:32 DEBUG NettyRpcEnv: Error downloading stream /classes/org/apache/spark/sql/catalyst/expressions/GeneratedClass.class.
java.lang.RuntimeException: Stream '/classes/org/apache/spark/sql/catalyst/expressions/GeneratedClass.class' was not found.
	at org.apache.spark.network.client.TransportResponseHandler.handle(TransportResponseHandler.java:222)
	at org.apache.spark.network.server.TransportChannelHandler.channelRead0(TransportChannelHandler.java:121)
	at org.apache.spark.network.server.TransportChannelHandler.channelRead0(TransportChannelHandler.java:51)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:266)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at org.apache.spark.network.util.TransportFrameDecoder.channelRead(TransportFrameDecoder.java:85)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:846)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
	at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
	at java.lang.Thread.run(Thread.java:748)
17/11/03 09:02:32 DEBUG ExecutorClassLoader: Did not load class org.apache.spark.sql.catalyst.expressions.GeneratedClass from REPL class server at spark://172.30.1.247:55570/classes
java.lang.ClassNotFoundException: org/apache/spark/sql/catalyst/expressions/GeneratedClass.class
	at org.apache.spark.repl.ExecutorClassLoader$$anon$1.toClassNotFound(ExecutorClassLoader.scala:105)
	at org.apache.spark.repl.ExecutorClassLoader$$anon$1.read(ExecutorClassLoader.scala:95)
	at org.apache.spark.repl.ExecutorClassLoader.readAndTransformClass(ExecutorClassLoader.scala:203)
	at org.apache.spark.repl.ExecutorClassLoader.findClassLocally(ExecutorClassLoader.scala:162)
	at org.apache.spark.repl.ExecutorClassLoader.findClass(ExecutorClassLoader.scala:80)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:411)
	at org.apache.spark.util.ParentClassLoader.loadClass(ParentClassLoader.scala:34)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:411)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at org.codehaus.janino.ClassBodyEvaluator.compileToClass(ClassBodyEvaluator.java:319)
	at org.codehaus.janino.ClassBodyEvaluator.cook(ClassBodyEvaluator.java:233)
	at org.codehaus.janino.SimpleCompiler.cook(SimpleCompiler.java:192)
	at org.codehaus.commons.compiler.Cookable.cook(Cookable.java:84)
	at org.apache.spark.sql.catalyst.expressions.codegen.CodeGenerator$.org$apache$spark$sql$catalyst$expressions$codegen$CodeGenerator$$doCompile(CodeGenerator.scala:887)
	at org.apache.spark.sql.catalyst.expressions.codegen.CodeGenerator$$anon$1.load(CodeGenerator.scala:950)
	at org.apache.spark.sql.catalyst.expressions.codegen.CodeGenerator$$anon$1.load(CodeGenerator.scala:947)
	at org.spark_project.guava.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3599)
	at org.spark_project.guava.cache.LocalCache$Segment.loadSync(LocalCache.java:2379)
	at org.spark_project.guava.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2342)
	at org.spark_project.guava.cache.LocalCache$Segment.get(LocalCache.java:2257)
	at org.spark_project.guava.cache.LocalCache.get(LocalCache.java:4000)
	at org.spark_project.guava.cache.LocalCache.getOrLoad(LocalCache.java:4004)
	at org.spark_project.guava.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4874)
	at org.apache.spark.sql.catalyst.expressions.codegen.CodeGenerator$.compile(CodeGenerator.scala:841)
	at org.apache.spark.sql.catalyst.expressions.codegen.GenerateUnsafeProjection$.create(GenerateUnsafeProjection.scala:397)
	at org.apache.spark.sql.catalyst.expressions.codegen.GenerateUnsafeProjection$.create(GenerateUnsafeProjection.scala:356)
	at org.apache.spark.sql.catalyst.expressions.codegen.GenerateUnsafeProjection$.create(GenerateUnsafeProjection.scala:32)
	at org.apache.spark.sql.catalyst.expressions.codegen.CodeGenerator.generate(CodeGenerator.scala:825)
	at org.apache.spark.sql.catalyst.expressions.codegen.CodeGenerator.generate(CodeGenerator.scala:822)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.appendPartitionColumns$lzycompute(fileSourceInterfaces.scala:270)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.appendPartitionColumns(fileSourceInterfaces.scala:269)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(fileSourceInterfaces.scala:274)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(fileSourceInterfaces.scala:263)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.nextIterator(FileScanRDD.scala:116)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.hasNext(FileScanRDD.scala:91)
	at org.apache.spark.sql.catalyst.expressions.GeneratedClass$GeneratedIterator.processNext(generated.java:35)
	at org.apache.spark.sql.execution.BufferedRowIterator.hasNext(BufferedRowIterator.java:43)
	at org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8$$anon$1.hasNext(WholeStageCodegenExec.scala:370)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$4.apply(SparkPlan.scala:246)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$4.apply(SparkPlan.scala:240)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$24.apply(RDD.scala:803)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$24.apply(RDD.scala:803)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:319)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:283)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:70)
	at org.apache.spark.scheduler.Task.run(Task.scala:86)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:274)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.ClassNotFoundException: org/apache/spark/sql/catalyst/expressions/GeneratedClass.class
	at org.apache.spark.repl.ExecutorClassLoader$$anon$1.toClassNotFound(ExecutorClassLoader.scala:105)
	at org.apache.spark.repl.ExecutorClassLoader$$anon$1.read(ExecutorClassLoader.scala:98)
	at java.io.FilterInputStream.read(FilterInputStream.java:107)
	at org.apache.spark.repl.ExecutorClassLoader$$anon$1.org$apache$spark$repl$ExecutorClassLoader$$anon$$super$read(ExecutorClassLoader.scala:95)
	at org.apache.spark.repl.ExecutorClassLoader$$anon$1$$anonfun$read$2.apply$mcI$sp(ExecutorClassLoader.scala:95)
	at org.apache.spark.repl.ExecutorClassLoader$$anon$1.toClassNotFound(ExecutorClassLoader.scala:102)
	... 51 more
Caused by: java.lang.RuntimeException: Stream '/classes/org/apache/spark/sql/catalyst/expressions/GeneratedClass.class' was not found.
	at org.apache.spark.network.client.TransportResponseHandler.handle(TransportResponseHandler.java:222)
	at org.apache.spark.network.server.TransportChannelHandler.channelRead0(TransportChannelHandler.java:121)
	at org.apache.spark.network.server.TransportChannelHandler.channelRead0(TransportChannelHandler.java:51)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:266)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at org.apache.spark.network.util.TransportFrameDecoder.channelRead(TransportFrameDecoder.java:85)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:846)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
	at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
	... 1 more
17/11/03 09:02:32 INFO CodeGenerator: Code generated in 231.785082 ms
17/11/03 09:02:32 DEBUG TransportClient: Sending stream request for /classes/org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.class to /172.30.1.247:55570
17/11/03 09:02:32 DEBUG NettyRpcEnv: Error downloading stream /classes/org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.class.
java.lang.RuntimeException: Stream '/classes/org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.class' was not found.
	at org.apache.spark.network.client.TransportResponseHandler.handle(TransportResponseHandler.java:222)
	at org.apache.spark.network.server.TransportChannelHandler.channelRead0(TransportChannelHandler.java:121)
	at org.apache.spark.network.server.TransportChannelHandler.channelRead0(TransportChannelHandler.java:51)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:266)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at org.apache.spark.network.util.TransportFrameDecoder.channelRead(TransportFrameDecoder.java:85)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:846)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
	at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
	at java.lang.Thread.run(Thread.java:748)
17/11/03 09:02:32 DEBUG ExecutorClassLoader: Did not load class org.apache.spark.sql.catalyst.expressions.GeneratedClass$SpecificUnsafeProjection from REPL class server at spark://172.30.1.247:55570/classes
java.lang.ClassNotFoundException: org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.class
	at org.apache.spark.repl.ExecutorClassLoader$$anon$1.toClassNotFound(ExecutorClassLoader.scala:105)
	at org.apache.spark.repl.ExecutorClassLoader$$anon$1.read(ExecutorClassLoader.scala:95)
	at org.apache.spark.repl.ExecutorClassLoader.readAndTransformClass(ExecutorClassLoader.scala:203)
	at org.apache.spark.repl.ExecutorClassLoader.findClassLocally(ExecutorClassLoader.scala:162)
	at org.apache.spark.repl.ExecutorClassLoader.findClass(ExecutorClassLoader.scala:80)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:411)
	at org.apache.spark.util.ParentClassLoader.loadClass(ParentClassLoader.scala:34)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:411)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at org.apache.spark.sql.catalyst.expressions.GeneratedClass.generate(generated.java:2)
	at org.apache.spark.sql.catalyst.expressions.codegen.GenerateUnsafeProjection$.create(GenerateUnsafeProjection.scala:398)
	at org.apache.spark.sql.catalyst.expressions.codegen.GenerateUnsafeProjection$.create(GenerateUnsafeProjection.scala:356)
	at org.apache.spark.sql.catalyst.expressions.codegen.GenerateUnsafeProjection$.create(GenerateUnsafeProjection.scala:32)
	at org.apache.spark.sql.catalyst.expressions.codegen.CodeGenerator.generate(CodeGenerator.scala:825)
	at org.apache.spark.sql.catalyst.expressions.codegen.CodeGenerator.generate(CodeGenerator.scala:822)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.appendPartitionColumns$lzycompute(fileSourceInterfaces.scala:270)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.appendPartitionColumns(fileSourceInterfaces.scala:269)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(fileSourceInterfaces.scala:274)
	at org.apache.spark.sql.execution.datasources.FileFormat$$anon$1.apply(fileSourceInterfaces.scala:263)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.nextIterator(FileScanRDD.scala:116)
	at org.apache.spark.sql.execution.datasources.FileScanRDD$$anon$1.hasNext(FileScanRDD.scala:91)
	at org.apache.spark.sql.catalyst.expressions.GeneratedClass$GeneratedIterator.processNext(generated.java:35)
	at org.apache.spark.sql.execution.BufferedRowIterator.hasNext(BufferedRowIterator.java:43)
	at org.apache.spark.sql.execution.WholeStageCodegenExec$$anonfun$8$$anon$1.hasNext(WholeStageCodegenExec.scala:370)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$4.apply(SparkPlan.scala:246)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$4.apply(SparkPlan.scala:240)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$24.apply(RDD.scala:803)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsInternal$1$$anonfun$apply$24.apply(RDD.scala:803)
	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38)
	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:319)
	at org.apache.spark.rdd.RDD.iterator(RDD.scala:283)
	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:70)
	at org.apache.spark.scheduler.Task.run(Task.scala:86)
	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:274)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.ClassNotFoundException: org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.class
	at org.apache.spark.repl.ExecutorClassLoader$$anon$1.toClassNotFound(ExecutorClassLoader.scala:105)
	at org.apache.spark.repl.ExecutorClassLoader$$anon$1.read(ExecutorClassLoader.scala:98)
	at java.io.FilterInputStream.read(FilterInputStream.java:107)
	at org.apache.spark.repl.ExecutorClassLoader$$anon$1.org$apache$spark$repl$ExecutorClassLoader$$anon$$super$read(ExecutorClassLoader.scala:95)
	at org.apache.spark.repl.ExecutorClassLoader$$anon$1$$anonfun$read$2.apply$mcI$sp(ExecutorClassLoader.scala:95)
	at org.apache.spark.repl.ExecutorClassLoader$$anon$1.toClassNotFound(ExecutorClassLoader.scala:102)
	... 37 more
Caused by: java.lang.RuntimeException: Stream '/classes/org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.class' was not found.
	at org.apache.spark.network.client.TransportResponseHandler.handle(TransportResponseHandler.java:222)
	at org.apache.spark.network.server.TransportChannelHandler.channelRead0(TransportChannelHandler.java:121)
	at org.apache.spark.network.server.TransportChannelHandler.channelRead0(TransportChannelHandler.java:51)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:266)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at org.apache.spark.network.util.TransportFrameDecoder.channelRead(TransportFrameDecoder.java:85)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:846)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:131)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)
	at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111)
	... 1 more
17/11/03 09:02:32 DEBUG BlockManager: Getting local block broadcast_0
17/11/03 09:02:32 DEBUG BlockManager: Level for block broadcast_0 is StorageLevel(disk, memory, deserialized, 1 replicas)
17/11/03 09:02:32 DEBUG Client: IPC Client (1087916281) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #75
17/11/03 09:02:32 DEBUG Client: IPC Client (1087916281) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #75
17/11/03 09:02:32 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 09:02:32 DEBUG Client: IPC Client (1087916281) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #76
17/11/03 09:02:32 DEBUG Client: IPC Client (1087916281) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #76
17/11/03 09:02:32 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 09:02:32 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=951814
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042105_301334; getBlockSize()=951814; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042105_301334; getBlockSize()=951814; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 09:02:32 DEBUG Client: IPC Client (1087916281) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #77
17/11/03 09:02:32 DEBUG Client: IPC Client (1087916281) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #77
17/11/03 09:02:32 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 09:02:32 DEBUG DFSClient: Connecting to datanode 172.30.1.46:50010
17/11/03 09:02:32 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042105_301334): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 09:02:32 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.46, datanodeId = DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]
17/11/03 09:02:32 DEBUG OrcFileOperator: Reading schema from file List(hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc), got Hive schema string: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 09:02:32 INFO CatalystSqlParser: Parsing command: struct<c_customer_sk:decimal(38,0),c_customer_id:string,c_current_cdemo_sk:decimal(38,0),c_current_hdemo_sk:decimal(38,0),c_current_addr_sk:decimal(38,0),c_first_shipto_date_sk:decimal(38,0),c_first_sales_date_sk:decimal(38,0),c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:decimal(38,0),c_birth_month:decimal(38,0),c_birth_year:decimal(38,0),c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:string,c_customer_sk__customer:decimal(38,0),c_customer_id__customer:string,c_current_cdemo_sk__customer:decimal(38,0),c_current_hdemo_sk__customer:decimal(38,0),c_current_addr_sk__customer:decimal(38,0),c_first_shipto_date_sk__customer:decimal(38,0),c_first_sales_date_sk__customer:decimal(38,0),c_salutation__customer:string,c_first_name__customer:string,c_last_name__customer:string,c_preferred_cust_flag__customer:string,c_birth_day__customer:decimal(38,0),c_birth_month__customer:decimal(38,0),c_birth_year__customer:decimal(38,0),c_birth_country__customer:string,c_login__customer:string,c_email_address__customer:string,c_last_review_date__customer:string,c_customer_sk__customer_2:decimal(38,0),c_customer_id__customer_2:string,c_current_cdemo_sk__customer_2:decimal(38,0),c_current_hdemo_sk__customer_2:decimal(38,0),c_current_addr_sk__customer_2:decimal(38,0),c_first_shipto_date_sk__customer_2:decimal(38,0),c_first_sales_date_sk__customer_2:decimal(38,0),c_salutation__customer_2:string,c_first_name__customer_2:string,c_last_name__customer_2:string,c_preferred_cust_flag__customer_2:string,c_birth_day__customer_2:decimal(38,0),c_birth_month__customer_2:decimal(38,0),c_birth_year__customer_2:decimal(38,0),c_birth_country__customer_2:string,c_login__customer_2:string,c_email_address__customer_2:string,c_last_review_date__customer_2:string,c_customer_sk__customer_3:decimal(38,0),c_customer_id__customer_3:string,c_current_cdemo_sk__customer_3:decimal(38,0),c_current_hdemo_sk__customer_3:decimal(38,0),c_current_addr_sk__customer_3:decimal(38,0),c_first_shipto_date_sk__customer_3:decimal(38,0),c_first_sales_date_sk__customer_3:decimal(38,0),c_salutation__customer_3:string,c_first_name__customer_3:string,c_last_name__customer_3:string,c_preferred_cust_flag__customer_3:string,c_birth_day__customer_3:decimal(38,0),c_birth_month__customer_3:decimal(38,0),c_birth_year__customer_3:decimal(38,0),c_birth_country__customer_3:string,c_login__customer_3:string,c_email_address__customer_3:string,c_last_review_date__customer_3:string,ziw_row_id:string,ziw_created_timestamp:timestamp,ziw_updated_timestamp:timestamp,ziw_status_flag:string,c_salutation:string>
17/11/03 09:02:32 DEBUG Client: IPC Client (1087916281) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #78
17/11/03 09:02:32 DEBUG Client: IPC Client (1087916281) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #78
17/11/03 09:02:32 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 09:02:32 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=951814
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042105_301334; getBlockSize()=951814; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042105_301334; getBlockSize()=951814; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK]]}
  isLastBlockComplete=true}
17/11/03 09:02:32 DEBUG Client: IPC Client (1087916281) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #79
17/11/03 09:02:32 DEBUG Client: IPC Client (1087916281) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #79
17/11/03 09:02:32 DEBUG ProtobufRpcEngine: Call: getFileInfo took 1ms
17/11/03 09:02:32 DEBUG DFSClient: Connecting to datanode 172.30.1.218:50010
17/11/03 09:02:32 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042105_301334): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 09:02:32 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.218, datanodeId = DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]
17/11/03 09:02:32 DEBUG OrcInputFormat: No ORC pushdown predicate
17/11/03 09:02:32 INFO ReaderImpl: Reading ORC rows from hdfs://ip-172-30-1-247.ec2.internal:8020/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc with {include: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], offset: 0, length: 951814}
17/11/03 09:02:32 DEBUG Client: IPC Client (1087916281) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user sending #80
17/11/03 09:02:32 DEBUG Client: IPC Client (1087916281) connection to ip-172-30-1-247.ec2.internal/172.30.1.247:8020 from ec2-user got value #80
17/11/03 09:02:32 DEBUG ProtobufRpcEngine: Call: getBlockLocations took 1ms
17/11/03 09:02:32 DEBUG DFSClient: newInfo = LocatedBlocks{
  fileLength=951814
  underConstruction=false
  blocks=[LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042105_301334; getBlockSize()=951814; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK], DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK]]}]
  lastLocatedBlock=LocatedBlock{BP-387439159-172.30.1.247-1493051499278:blk_1074042105_301334; getBlockSize()=951814; corrupt=false; offset=0; locs=[DatanodeInfoWithStorage[172.30.1.46:50010,DS-a13d22c6-dda8-470b-84a3-ab3bacf403b2,DISK], DatanodeInfoWithStorage[172.30.1.218:50010,DS-0aa7cf13-9c71-4b07-b486-0d065e987a58,DISK], DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]]}
  isLastBlockComplete=true}
17/11/03 09:02:32 INFO RecordReaderFactory: Schema is not specified on read. Using file schema.
17/11/03 09:02:32 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 09:02:32 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042105_301334): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 09:02:32 DEBUG SaslDataTransferClient: SASL client skipping handshake in unsecured configuration for addr = /172.30.1.239, datanodeId = DatanodeInfoWithStorage[172.30.1.239:50010,DS-4d9bdf79-d4c4-4cc0-bc6f-7ad8efb426a8,DISK]
17/11/03 09:02:32 DEBUG RecordReaderImpl: chunks = [range start: 18863 end: 947247]
17/11/03 09:02:32 DEBUG DFSClient: Connecting to datanode 172.30.1.239:50010
17/11/03 09:02:32 DEBUG PerformanceAdvisory: BlockReaderFactory(fileName=/apps/hive/warehouse/testbucket/part-r-00001-2ff955ed-b05d-4099-91a5-a832b62e1529_00000.snappy.orc, block=BP-387439159-172.30.1.247-1493051499278:blk_1074042105_301334): PathInfo{path=, state=UNUSABLE} is not usable for short circuit; giving up on BlockReaderLocal.
17/11/03 09:02:32 DEBUG RecordReaderImpl: merge = [data range [18863, 947247), size: 928384 type: array-backed]
17/11/03 09:02:33 DEBUG GenerateUnsafeProjection: code for input[0, decimal(38,0), true],input[1, string, true],input[2, decimal(38,0), true],input[3, decimal(38,0), true],input[4, decimal(38,0), true],input[5, decimal(38,0), true],input[6, decimal(38,0), true],input[7, string, true],input[8, string, true],input[9, string, true],input[10, decimal(38,0), true],input[11, decimal(38,0), true],input[12, decimal(38,0), true],input[13, string, true],input[14, string, true],input[15, string, true],input[16, string, true],input[17, decimal(38,0), true],input[18, string, true],input[19, decimal(38,0), true],input[20, decimal(38,0), true],input[21, decimal(38,0), true],input[22, decimal(38,0), true],input[23, decimal(38,0), true],input[24, string, true],input[25, string, true],input[26, string, true],input[27, string, true],input[28, decimal(38,0), true],input[29, decimal(38,0), true],input[30, decimal(38,0), true],input[31, string, true],input[32, string, true],input[33, string, true],input[34, string, true],input[35, decimal(38,0), true],input[36, string, true],input[37, decimal(38,0), true],input[38, decimal(38,0), true],input[39, decimal(38,0), true],input[40, decimal(38,0), true],input[41, decimal(38,0), true],input[42, string, true],input[43, string, true],input[44, string, true],input[45, string, true],input[46, decimal(38,0), true],input[47, decimal(38,0), true],input[48, decimal(38,0), true],input[49, string, true],input[50, string, true],input[51, string, true],input[52, string, true],input[53, decimal(38,0), true],input[54, string, true],input[55, decimal(38,0), true],input[56, decimal(38,0), true],input[57, decimal(38,0), true],input[58, decimal(38,0), true],input[59, decimal(38,0), true],input[60, string, true],input[61, string, true],input[62, string, true],input[63, string, true],input[64, decimal(38,0), true],input[65, decimal(38,0), true],input[66, decimal(38,0), true],input[67, string, true],input[68, string, true],input[69, string, true],input[70, string, true],input[71, string, true],input[72, timestamp, true],input[73, timestamp, true],input[74, string, true],input[75, string, true]:
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificUnsafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificUnsafeProjection extends org.apache.spark.sql.catalyst.expressions.UnsafeProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private UnsafeRow result;
/* 009 */   private org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder holder;
/* 010 */   private org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter rowWriter;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */
/* 015 */     boolean isNull64 = i.isNullAt(64);
/* 016 */     Decimal value64 = isNull64 ? null : (i.getDecimal(64, 38, 0));
/* 017 */     if (isNull64) {
/* 018 */       rowWriter.write(64, (Decimal) null, 38, 0);
/* 019 */     } else {
/* 020 */       rowWriter.write(64, value64, 38, 0);
/* 021 */     }
/* 022 */
/* 023 */
/* 024 */     boolean isNull65 = i.isNullAt(65);
/* 025 */     Decimal value65 = isNull65 ? null : (i.getDecimal(65, 38, 0));
/* 026 */     if (isNull65) {
/* 027 */       rowWriter.write(65, (Decimal) null, 38, 0);
/* 028 */     } else {
/* 029 */       rowWriter.write(65, value65, 38, 0);
/* 030 */     }
/* 031 */
/* 032 */
/* 033 */     boolean isNull66 = i.isNullAt(66);
/* 034 */     Decimal value66 = isNull66 ? null : (i.getDecimal(66, 38, 0));
/* 035 */     if (isNull66) {
/* 036 */       rowWriter.write(66, (Decimal) null, 38, 0);
/* 037 */     } else {
/* 038 */       rowWriter.write(66, value66, 38, 0);
/* 039 */     }
/* 040 */
/* 041 */
/* 042 */     boolean isNull67 = i.isNullAt(67);
/* 043 */     UTF8String value67 = isNull67 ? null : (i.getUTF8String(67));
/* 044 */     if (isNull67) {
/* 045 */       rowWriter.setNullAt(67);
/* 046 */     } else {
/* 047 */       rowWriter.write(67, value67);
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_4(InternalRow i) {
/* 054 */
/* 055 */
/* 056 */     boolean isNull16 = i.isNullAt(16);
/* 057 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(16));
/* 058 */     if (isNull16) {
/* 059 */       rowWriter.setNullAt(16);
/* 060 */     } else {
/* 061 */       rowWriter.write(16, value16);
/* 062 */     }
/* 063 */
/* 064 */
/* 065 */     boolean isNull17 = i.isNullAt(17);
/* 066 */     Decimal value17 = isNull17 ? null : (i.getDecimal(17, 38, 0));
/* 067 */     if (isNull17) {
/* 068 */       rowWriter.write(17, (Decimal) null, 38, 0);
/* 069 */     } else {
/* 070 */       rowWriter.write(17, value17, 38, 0);
/* 071 */     }
/* 072 */
/* 073 */
/* 074 */     boolean isNull18 = i.isNullAt(18);
/* 075 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(18));
/* 076 */     if (isNull18) {
/* 077 */       rowWriter.setNullAt(18);
/* 078 */     } else {
/* 079 */       rowWriter.write(18, value18);
/* 080 */     }
/* 081 */
/* 082 */
/* 083 */     boolean isNull19 = i.isNullAt(19);
/* 084 */     Decimal value19 = isNull19 ? null : (i.getDecimal(19, 38, 0));
/* 085 */     if (isNull19) {
/* 086 */       rowWriter.write(19, (Decimal) null, 38, 0);
/* 087 */     } else {
/* 088 */       rowWriter.write(19, value19, 38, 0);
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_7(InternalRow i) {
/* 095 */
/* 096 */
/* 097 */     boolean isNull28 = i.isNullAt(28);
/* 098 */     Decimal value28 = isNull28 ? null : (i.getDecimal(28, 38, 0));
/* 099 */     if (isNull28) {
/* 100 */       rowWriter.write(28, (Decimal) null, 38, 0);
/* 101 */     } else {
/* 102 */       rowWriter.write(28, value28, 38, 0);
/* 103 */     }
/* 104 */
/* 105 */
/* 106 */     boolean isNull29 = i.isNullAt(29);
/* 107 */     Decimal value29 = isNull29 ? null : (i.getDecimal(29, 38, 0));
/* 108 */     if (isNull29) {
/* 109 */       rowWriter.write(29, (Decimal) null, 38, 0);
/* 110 */     } else {
/* 111 */       rowWriter.write(29, value29, 38, 0);
/* 112 */     }
/* 113 */
/* 114 */
/* 115 */     boolean isNull30 = i.isNullAt(30);
/* 116 */     Decimal value30 = isNull30 ? null : (i.getDecimal(30, 38, 0));
/* 117 */     if (isNull30) {
/* 118 */       rowWriter.write(30, (Decimal) null, 38, 0);
/* 119 */     } else {
/* 120 */       rowWriter.write(30, value30, 38, 0);
/* 121 */     }
/* 122 */
/* 123 */
/* 124 */     boolean isNull31 = i.isNullAt(31);
/* 125 */     UTF8String value31 = isNull31 ? null : (i.getUTF8String(31));
/* 126 */     if (isNull31) {
/* 127 */       rowWriter.setNullAt(31);
/* 128 */     } else {
/* 129 */       rowWriter.write(31, value31);
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_1(InternalRow i) {
/* 136 */
/* 137 */
/* 138 */     boolean isNull4 = i.isNullAt(4);
/* 139 */     Decimal value4 = isNull4 ? null : (i.getDecimal(4, 38, 0));
/* 140 */     if (isNull4) {
/* 141 */       rowWriter.write(4, (Decimal) null, 38, 0);
/* 142 */     } else {
/* 143 */       rowWriter.write(4, value4, 38, 0);
/* 144 */     }
/* 145 */
/* 146 */
/* 147 */     boolean isNull5 = i.isNullAt(5);
/* 148 */     Decimal value5 = isNull5 ? null : (i.getDecimal(5, 38, 0));
/* 149 */     if (isNull5) {
/* 150 */       rowWriter.write(5, (Decimal) null, 38, 0);
/* 151 */     } else {
/* 152 */       rowWriter.write(5, value5, 38, 0);
/* 153 */     }
/* 154 */
/* 155 */
/* 156 */     boolean isNull6 = i.isNullAt(6);
/* 157 */     Decimal value6 = isNull6 ? null : (i.getDecimal(6, 38, 0));
/* 158 */     if (isNull6) {
/* 159 */       rowWriter.write(6, (Decimal) null, 38, 0);
/* 160 */     } else {
/* 161 */       rowWriter.write(6, value6, 38, 0);
/* 162 */     }
/* 163 */
/* 164 */
/* 165 */     boolean isNull7 = i.isNullAt(7);
/* 166 */     UTF8String value7 = isNull7 ? null : (i.getUTF8String(7));
/* 167 */     if (isNull7) {
/* 168 */       rowWriter.setNullAt(7);
/* 169 */     } else {
/* 170 */       rowWriter.write(7, value7);
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_18(InternalRow i) {
/* 177 */
/* 178 */
/* 179 */     boolean isNull72 = i.isNullAt(72);
/* 180 */     long value72 = isNull72 ? -1L : (i.getLong(72));
/* 181 */     if (isNull72) {
/* 182 */       rowWriter.setNullAt(72);
/* 183 */     } else {
/* 184 */       rowWriter.write(72, value72);
/* 185 */     }
/* 186 */
/* 187 */
/* 188 */     boolean isNull73 = i.isNullAt(73);
/* 189 */     long value73 = isNull73 ? -1L : (i.getLong(73));
/* 190 */     if (isNull73) {
/* 191 */       rowWriter.setNullAt(73);
/* 192 */     } else {
/* 193 */       rowWriter.write(73, value73);
/* 194 */     }
/* 195 */
/* 196 */
/* 197 */     boolean isNull74 = i.isNullAt(74);
/* 198 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(74));
/* 199 */     if (isNull74) {
/* 200 */       rowWriter.setNullAt(74);
/* 201 */     } else {
/* 202 */       rowWriter.write(74, value74);
/* 203 */     }
/* 204 */
/* 205 */
/* 206 */     boolean isNull75 = i.isNullAt(75);
/* 207 */     UTF8String value75 = isNull75 ? null : (i.getUTF8String(75));
/* 208 */     if (isNull75) {
/* 209 */       rowWriter.setNullAt(75);
/* 210 */     } else {
/* 211 */       rowWriter.write(75, value75);
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_12(InternalRow i) {
/* 218 */
/* 219 */
/* 220 */     boolean isNull48 = i.isNullAt(48);
/* 221 */     Decimal value48 = isNull48 ? null : (i.getDecimal(48, 38, 0));
/* 222 */     if (isNull48) {
/* 223 */       rowWriter.write(48, (Decimal) null, 38, 0);
/* 224 */     } else {
/* 225 */       rowWriter.write(48, value48, 38, 0);
/* 226 */     }
/* 227 */
/* 228 */
/* 229 */     boolean isNull49 = i.isNullAt(49);
/* 230 */     UTF8String value49 = isNull49 ? null : (i.getUTF8String(49));
/* 231 */     if (isNull49) {
/* 232 */       rowWriter.setNullAt(49);
/* 233 */     } else {
/* 234 */       rowWriter.write(49, value49);
/* 235 */     }
/* 236 */
/* 237 */
/* 238 */     boolean isNull50 = i.isNullAt(50);
/* 239 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(50));
/* 240 */     if (isNull50) {
/* 241 */       rowWriter.setNullAt(50);
/* 242 */     } else {
/* 243 */       rowWriter.write(50, value50);
/* 244 */     }
/* 245 */
/* 246 */
/* 247 */     boolean isNull51 = i.isNullAt(51);
/* 248 */     UTF8String value51 = isNull51 ? null : (i.getUTF8String(51));
/* 249 */     if (isNull51) {
/* 250 */       rowWriter.setNullAt(51);
/* 251 */     } else {
/* 252 */       rowWriter.write(51, value51);
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_15(InternalRow i) {
/* 259 */
/* 260 */
/* 261 */     boolean isNull60 = i.isNullAt(60);
/* 262 */     UTF8String value60 = isNull60 ? null : (i.getUTF8String(60));
/* 263 */     if (isNull60) {
/* 264 */       rowWriter.setNullAt(60);
/* 265 */     } else {
/* 266 */       rowWriter.write(60, value60);
/* 267 */     }
/* 268 */
/* 269 */
/* 270 */     boolean isNull61 = i.isNullAt(61);
/* 271 */     UTF8String value61 = isNull61 ? null : (i.getUTF8String(61));
/* 272 */     if (isNull61) {
/* 273 */       rowWriter.setNullAt(61);
/* 274 */     } else {
/* 275 */       rowWriter.write(61, value61);
/* 276 */     }
/* 277 */
/* 278 */
/* 279 */     boolean isNull62 = i.isNullAt(62);
/* 280 */     UTF8String value62 = isNull62 ? null : (i.getUTF8String(62));
/* 281 */     if (isNull62) {
/* 282 */       rowWriter.setNullAt(62);
/* 283 */     } else {
/* 284 */       rowWriter.write(62, value62);
/* 285 */     }
/* 286 */
/* 287 */
/* 288 */     boolean isNull63 = i.isNullAt(63);
/* 289 */     UTF8String value63 = isNull63 ? null : (i.getUTF8String(63));
/* 290 */     if (isNull63) {
/* 291 */       rowWriter.setNullAt(63);
/* 292 */     } else {
/* 293 */       rowWriter.write(63, value63);
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_9(InternalRow i) {
/* 300 */
/* 301 */
/* 302 */     boolean isNull36 = i.isNullAt(36);
/* 303 */     UTF8String value36 = isNull36 ? null : (i.getUTF8String(36));
/* 304 */     if (isNull36) {
/* 305 */       rowWriter.setNullAt(36);
/* 306 */     } else {
/* 307 */       rowWriter.write(36, value36);
/* 308 */     }
/* 309 */
/* 310 */
/* 311 */     boolean isNull37 = i.isNullAt(37);
/* 312 */     Decimal value37 = isNull37 ? null : (i.getDecimal(37, 38, 0));
/* 313 */     if (isNull37) {
/* 314 */       rowWriter.write(37, (Decimal) null, 38, 0);
/* 315 */     } else {
/* 316 */       rowWriter.write(37, value37, 38, 0);
/* 317 */     }
/* 318 */
/* 319 */
/* 320 */     boolean isNull38 = i.isNullAt(38);
/* 321 */     Decimal value38 = isNull38 ? null : (i.getDecimal(38, 38, 0));
/* 322 */     if (isNull38) {
/* 323 */       rowWriter.write(38, (Decimal) null, 38, 0);
/* 324 */     } else {
/* 325 */       rowWriter.write(38, value38, 38, 0);
/* 326 */     }
/* 327 */
/* 328 */
/* 329 */     boolean isNull39 = i.isNullAt(39);
/* 330 */     Decimal value39 = isNull39 ? null : (i.getDecimal(39, 38, 0));
/* 331 */     if (isNull39) {
/* 332 */       rowWriter.write(39, (Decimal) null, 38, 0);
/* 333 */     } else {
/* 334 */       rowWriter.write(39, value39, 38, 0);
/* 335 */     }
/* 336 */
/* 337 */   }
/* 338 */
/* 339 */
/* 340 */   private void apply_3(InternalRow i) {
/* 341 */
/* 342 */
/* 343 */     boolean isNull12 = i.isNullAt(12);
/* 344 */     Decimal value12 = isNull12 ? null : (i.getDecimal(12, 38, 0));
/* 345 */     if (isNull12) {
/* 346 */       rowWriter.write(12, (Decimal) null, 38, 0);
/* 347 */     } else {
/* 348 */       rowWriter.write(12, value12, 38, 0);
/* 349 */     }
/* 350 */
/* 351 */
/* 352 */     boolean isNull13 = i.isNullAt(13);
/* 353 */     UTF8String value13 = isNull13 ? null : (i.getUTF8String(13));
/* 354 */     if (isNull13) {
/* 355 */       rowWriter.setNullAt(13);
/* 356 */     } else {
/* 357 */       rowWriter.write(13, value13);
/* 358 */     }
/* 359 */
/* 360 */
/* 361 */     boolean isNull14 = i.isNullAt(14);
/* 362 */     UTF8String value14 = isNull14 ? null : (i.getUTF8String(14));
/* 363 */     if (isNull14) {
/* 364 */       rowWriter.setNullAt(14);
/* 365 */     } else {
/* 366 */       rowWriter.write(14, value14);
/* 367 */     }
/* 368 */
/* 369 */
/* 370 */     boolean isNull15 = i.isNullAt(15);
/* 371 */     UTF8String value15 = isNull15 ? null : (i.getUTF8String(15));
/* 372 */     if (isNull15) {
/* 373 */       rowWriter.setNullAt(15);
/* 374 */     } else {
/* 375 */       rowWriter.write(15, value15);
/* 376 */     }
/* 377 */
/* 378 */   }
/* 379 */
/* 380 */
/* 381 */   private void apply_6(InternalRow i) {
/* 382 */
/* 383 */
/* 384 */     boolean isNull24 = i.isNullAt(24);
/* 385 */     UTF8String value24 = isNull24 ? null : (i.getUTF8String(24));
/* 386 */     if (isNull24) {
/* 387 */       rowWriter.setNullAt(24);
/* 388 */     } else {
/* 389 */       rowWriter.write(24, value24);
/* 390 */     }
/* 391 */
/* 392 */
/* 393 */     boolean isNull25 = i.isNullAt(25);
/* 394 */     UTF8String value25 = isNull25 ? null : (i.getUTF8String(25));
/* 395 */     if (isNull25) {
/* 396 */       rowWriter.setNullAt(25);
/* 397 */     } else {
/* 398 */       rowWriter.write(25, value25);
/* 399 */     }
/* 400 */
/* 401 */
/* 402 */     boolean isNull26 = i.isNullAt(26);
/* 403 */     UTF8String value26 = isNull26 ? null : (i.getUTF8String(26));
/* 404 */     if (isNull26) {
/* 405 */       rowWriter.setNullAt(26);
/* 406 */     } else {
/* 407 */       rowWriter.write(26, value26);
/* 408 */     }
/* 409 */
/* 410 */
/* 411 */     boolean isNull27 = i.isNullAt(27);
/* 412 */     UTF8String value27 = isNull27 ? null : (i.getUTF8String(27));
/* 413 */     if (isNull27) {
/* 414 */       rowWriter.setNullAt(27);
/* 415 */     } else {
/* 416 */       rowWriter.write(27, value27);
/* 417 */     }
/* 418 */
/* 419 */   }
/* 420 */
/* 421 */
/* 422 */   private void apply_14(InternalRow i) {
/* 423 */
/* 424 */
/* 425 */     boolean isNull56 = i.isNullAt(56);
/* 426 */     Decimal value56 = isNull56 ? null : (i.getDecimal(56, 38, 0));
/* 427 */     if (isNull56) {
/* 428 */       rowWriter.write(56, (Decimal) null, 38, 0);
/* 429 */     } else {
/* 430 */       rowWriter.write(56, value56, 38, 0);
/* 431 */     }
/* 432 */
/* 433 */
/* 434 */     boolean isNull57 = i.isNullAt(57);
/* 435 */     Decimal value57 = isNull57 ? null : (i.getDecimal(57, 38, 0));
/* 436 */     if (isNull57) {
/* 437 */       rowWriter.write(57, (Decimal) null, 38, 0);
/* 438 */     } else {
/* 439 */       rowWriter.write(57, value57, 38, 0);
/* 440 */     }
/* 441 */
/* 442 */
/* 443 */     boolean isNull58 = i.isNullAt(58);
/* 444 */     Decimal value58 = isNull58 ? null : (i.getDecimal(58, 38, 0));
/* 445 */     if (isNull58) {
/* 446 */       rowWriter.write(58, (Decimal) null, 38, 0);
/* 447 */     } else {
/* 448 */       rowWriter.write(58, value58, 38, 0);
/* 449 */     }
/* 450 */
/* 451 */
/* 452 */     boolean isNull59 = i.isNullAt(59);
/* 453 */     Decimal value59 = isNull59 ? null : (i.getDecimal(59, 38, 0));
/* 454 */     if (isNull59) {
/* 455 */       rowWriter.write(59, (Decimal) null, 38, 0);
/* 456 */     } else {
/* 457 */       rowWriter.write(59, value59, 38, 0);
/* 458 */     }
/* 459 */
/* 460 */   }
/* 461 */
/* 462 */
/* 463 */   private void apply_0(InternalRow i) {
/* 464 */
/* 465 */
/* 466 */     boolean isNull = i.isNullAt(0);
/* 467 */     Decimal value = isNull ? null : (i.getDecimal(0, 38, 0));
/* 468 */     if (isNull) {
/* 469 */       rowWriter.write(0, (Decimal) null, 38, 0);
/* 470 */     } else {
/* 471 */       rowWriter.write(0, value, 38, 0);
/* 472 */     }
/* 473 */
/* 474 */
/* 475 */     boolean isNull1 = i.isNullAt(1);
/* 476 */     UTF8String value1 = isNull1 ? null : (i.getUTF8String(1));
/* 477 */     if (isNull1) {
/* 478 */       rowWriter.setNullAt(1);
/* 479 */     } else {
/* 480 */       rowWriter.write(1, value1);
/* 481 */     }
/* 482 */
/* 483 */
/* 484 */     boolean isNull2 = i.isNullAt(2);
/* 485 */     Decimal value2 = isNull2 ? null : (i.getDecimal(2, 38, 0));
/* 486 */     if (isNull2) {
/* 487 */       rowWriter.write(2, (Decimal) null, 38, 0);
/* 488 */     } else {
/* 489 */       rowWriter.write(2, value2, 38, 0);
/* 490 */     }
/* 491 */
/* 492 */
/* 493 */     boolean isNull3 = i.isNullAt(3);
/* 494 */     Decimal value3 = isNull3 ? null : (i.getDecimal(3, 38, 0));
/* 495 */     if (isNull3) {
/* 496 */       rowWriter.write(3, (Decimal) null, 38, 0);
/* 497 */     } else {
/* 498 */       rowWriter.write(3, value3, 38, 0);
/* 499 */     }
/* 500 */
/* 501 */   }
/* 502 */
/* 503 */
/* 504 */   private void apply_17(InternalRow i) {
/* 505 */
/* 506 */
/* 507 */     boolean isNull68 = i.isNullAt(68);
/* 508 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(68));
/* 509 */     if (isNull68) {
/* 510 */       rowWriter.setNullAt(68);
/* 511 */     } else {
/* 512 */       rowWriter.write(68, value68);
/* 513 */     }
/* 514 */
/* 515 */
/* 516 */     boolean isNull69 = i.isNullAt(69);
/* 517 */     UTF8String value69 = isNull69 ? null : (i.getUTF8String(69));
/* 518 */     if (isNull69) {
/* 519 */       rowWriter.setNullAt(69);
/* 520 */     } else {
/* 521 */       rowWriter.write(69, value69);
/* 522 */     }
/* 523 */
/* 524 */
/* 525 */     boolean isNull70 = i.isNullAt(70);
/* 526 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(70));
/* 527 */     if (isNull70) {
/* 528 */       rowWriter.setNullAt(70);
/* 529 */     } else {
/* 530 */       rowWriter.write(70, value70);
/* 531 */     }
/* 532 */
/* 533 */
/* 534 */     boolean isNull71 = i.isNullAt(71);
/* 535 */     UTF8String value71 = isNull71 ? null : (i.getUTF8String(71));
/* 536 */     if (isNull71) {
/* 537 */       rowWriter.setNullAt(71);
/* 538 */     } else {
/* 539 */       rowWriter.write(71, value71);
/* 540 */     }
/* 541 */
/* 542 */   }
/* 543 */
/* 544 */
/* 545 */   private void apply_11(InternalRow i) {
/* 546 */
/* 547 */
/* 548 */     boolean isNull44 = i.isNullAt(44);
/* 549 */     UTF8String value44 = isNull44 ? null : (i.getUTF8String(44));
/* 550 */     if (isNull44) {
/* 551 */       rowWriter.setNullAt(44);
/* 552 */     } else {
/* 553 */       rowWriter.write(44, value44);
/* 554 */     }
/* 555 */
/* 556 */
/* 557 */     boolean isNull45 = i.isNullAt(45);
/* 558 */     UTF8String value45 = isNull45 ? null : (i.getUTF8String(45));
/* 559 */     if (isNull45) {
/* 560 */       rowWriter.setNullAt(45);
/* 561 */     } else {
/* 562 */       rowWriter.write(45, value45);
/* 563 */     }
/* 564 */
/* 565 */
/* 566 */     boolean isNull46 = i.isNullAt(46);
/* 567 */     Decimal value46 = isNull46 ? null : (i.getDecimal(46, 38, 0));
/* 568 */     if (isNull46) {
/* 569 */       rowWriter.write(46, (Decimal) null, 38, 0);
/* 570 */     } else {
/* 571 */       rowWriter.write(46, value46, 38, 0);
/* 572 */     }
/* 573 */
/* 574 */
/* 575 */     boolean isNull47 = i.isNullAt(47);
/* 576 */     Decimal value47 = isNull47 ? null : (i.getDecimal(47, 38, 0));
/* 577 */     if (isNull47) {
/* 578 */       rowWriter.write(47, (Decimal) null, 38, 0);
/* 579 */     } else {
/* 580 */       rowWriter.write(47, value47, 38, 0);
/* 581 */     }
/* 582 */
/* 583 */   }
/* 584 */
/* 585 */
/* 586 */   private void apply_8(InternalRow i) {
/* 587 */
/* 588 */
/* 589 */     boolean isNull32 = i.isNullAt(32);
/* 590 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(32));
/* 591 */     if (isNull32) {
/* 592 */       rowWriter.setNullAt(32);
/* 593 */     } else {
/* 594 */       rowWriter.write(32, value32);
/* 595 */     }
/* 596 */
/* 597 */
/* 598 */     boolean isNull33 = i.isNullAt(33);
/* 599 */     UTF8String value33 = isNull33 ? null : (i.getUTF8String(33));
/* 600 */     if (isNull33) {
/* 601 */       rowWriter.setNullAt(33);
/* 602 */     } else {
/* 603 */       rowWriter.write(33, value33);
/* 604 */     }
/* 605 */
/* 606 */
/* 607 */     boolean isNull34 = i.isNullAt(34);
/* 608 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(34));
/* 609 */     if (isNull34) {
/* 610 */       rowWriter.setNullAt(34);
/* 611 */     } else {
/* 612 */       rowWriter.write(34, value34);
/* 613 */     }
/* 614 */
/* 615 */
/* 616 */     boolean isNull35 = i.isNullAt(35);
/* 617 */     Decimal value35 = isNull35 ? null : (i.getDecimal(35, 38, 0));
/* 618 */     if (isNull35) {
/* 619 */       rowWriter.write(35, (Decimal) null, 38, 0);
/* 620 */     } else {
/* 621 */       rowWriter.write(35, value35, 38, 0);
/* 622 */     }
/* 623 */
/* 624 */   }
/* 625 */
/* 626 */
/* 627 */   private void apply_2(InternalRow i) {
/* 628 */
/* 629 */
/* 630 */     boolean isNull8 = i.isNullAt(8);
/* 631 */     UTF8String value8 = isNull8 ? null : (i.getUTF8String(8));
/* 632 */     if (isNull8) {
/* 633 */       rowWriter.setNullAt(8);
/* 634 */     } else {
/* 635 */       rowWriter.write(8, value8);
/* 636 */     }
/* 637 */
/* 638 */
/* 639 */     boolean isNull9 = i.isNullAt(9);
/* 640 */     UTF8String value9 = isNull9 ? null : (i.getUTF8String(9));
/* 641 */     if (isNull9) {
/* 642 */       rowWriter.setNullAt(9);
/* 643 */     } else {
/* 644 */       rowWriter.write(9, value9);
/* 645 */     }
/* 646 */
/* 647 */
/* 648 */     boolean isNull10 = i.isNullAt(10);
/* 649 */     Decimal value10 = isNull10 ? null : (i.getDecimal(10, 38, 0));
/* 650 */     if (isNull10) {
/* 651 */       rowWriter.write(10, (Decimal) null, 38, 0);
/* 652 */     } else {
/* 653 */       rowWriter.write(10, value10, 38, 0);
/* 654 */     }
/* 655 */
/* 656 */
/* 657 */     boolean isNull11 = i.isNullAt(11);
/* 658 */     Decimal value11 = isNull11 ? null : (i.getDecimal(11, 38, 0));
/* 659 */     if (isNull11) {
/* 660 */       rowWriter.write(11, (Decimal) null, 38, 0);
/* 661 */     } else {
/* 662 */       rowWriter.write(11, value11, 38, 0);
/* 663 */     }
/* 664 */
/* 665 */   }
/* 666 */
/* 667 */
/* 668 */   private void apply_5(InternalRow i) {
/* 669 */
/* 670 */
/* 671 */     boolean isNull20 = i.isNullAt(20);
/* 672 */     Decimal value20 = isNull20 ? null : (i.getDecimal(20, 38, 0));
/* 673 */     if (isNull20) {
/* 674 */       rowWriter.write(20, (Decimal) null, 38, 0);
/* 675 */     } else {
/* 676 */       rowWriter.write(20, value20, 38, 0);
/* 677 */     }
/* 678 */
/* 679 */
/* 680 */     boolean isNull21 = i.isNullAt(21);
/* 681 */     Decimal value21 = isNull21 ? null : (i.getDecimal(21, 38, 0));
/* 682 */     if (isNull21) {
/* 683 */       rowWriter.write(21, (Decimal) null, 38, 0);
/* 684 */     } else {
/* 685 */       rowWriter.write(21, value21, 38, 0);
/* 686 */     }
/* 687 */
/* 688 */
/* 689 */     boolean isNull22 = i.isNullAt(22);
/* 690 */     Decimal value22 = isNull22 ? null : (i.getDecimal(22, 38, 0));
/* 691 */     if (isNull22) {
/* 692 */       rowWriter.write(22, (Decimal) null, 38, 0);
/* 693 */     } else {
/* 694 */       rowWriter.write(22, value22, 38, 0);
/* 695 */     }
/* 696 */
/* 697 */
/* 698 */     boolean isNull23 = i.isNullAt(23);
/* 699 */     Decimal value23 = isNull23 ? null : (i.getDecimal(23, 38, 0));
/* 700 */     if (isNull23) {
/* 701 */       rowWriter.write(23, (Decimal) null, 38, 0);
/* 702 */     } else {
/* 703 */       rowWriter.write(23, value23, 38, 0);
/* 704 */     }
/* 705 */
/* 706 */   }
/* 707 */
/* 708 */
/* 709 */   private void apply_10(InternalRow i) {
/* 710 */
/* 711 */
/* 712 */     boolean isNull40 = i.isNullAt(40);
/* 713 */     Decimal value40 = isNull40 ? null : (i.getDecimal(40, 38, 0));
/* 714 */     if (isNull40) {
/* 715 */       rowWriter.write(40, (Decimal) null, 38, 0);
/* 716 */     } else {
/* 717 */       rowWriter.write(40, value40, 38, 0);
/* 718 */     }
/* 719 */
/* 720 */
/* 721 */     boolean isNull41 = i.isNullAt(41);
/* 722 */     Decimal value41 = isNull41 ? null : (i.getDecimal(41, 38, 0));
/* 723 */     if (isNull41) {
/* 724 */       rowWriter.write(41, (Decimal) null, 38, 0);
/* 725 */     } else {
/* 726 */       rowWriter.write(41, value41, 38, 0);
/* 727 */     }
/* 728 */
/* 729 */
/* 730 */     boolean isNull42 = i.isNullAt(42);
/* 731 */     UTF8String value42 = isNull42 ? null : (i.getUTF8String(42));
/* 732 */     if (isNull42) {
/* 733 */       rowWriter.setNullAt(42);
/* 734 */     } else {
/* 735 */       rowWriter.write(42, value42);
/* 736 */     }
/* 737 */
/* 738 */
/* 739 */     boolean isNull43 = i.isNullAt(43);
/* 740 */     UTF8String value43 = isNull43 ? null : (i.getUTF8String(43));
/* 741 */     if (isNull43) {
/* 742 */       rowWriter.setNullAt(43);
/* 743 */     } else {
/* 744 */       rowWriter.write(43, value43);
/* 745 */     }
/* 746 */
/* 747 */   }
/* 748 */
/* 749 */
/* 750 */   private void apply_13(InternalRow i) {
/* 751 */
/* 752 */
/* 753 */     boolean isNull52 = i.isNullAt(52);
/* 754 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(52));
/* 755 */     if (isNull52) {
/* 756 */       rowWriter.setNullAt(52);
/* 757 */     } else {
/* 758 */       rowWriter.write(52, value52);
/* 759 */     }
/* 760 */
/* 761 */
/* 762 */     boolean isNull53 = i.isNullAt(53);
/* 763 */     Decimal value53 = isNull53 ? null : (i.getDecimal(53, 38, 0));
/* 764 */     if (isNull53) {
/* 765 */       rowWriter.write(53, (Decimal) null, 38, 0);
/* 766 */     } else {
/* 767 */       rowWriter.write(53, value53, 38, 0);
/* 768 */     }
/* 769 */
/* 770 */
/* 771 */     boolean isNull54 = i.isNullAt(54);
/* 772 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(54));
/* 773 */     if (isNull54) {
/* 774 */       rowWriter.setNullAt(54);
/* 775 */     } else {
/* 776 */       rowWriter.write(54, value54);
/* 777 */     }
/* 778 */
/* 779 */
/* 780 */     boolean isNull55 = i.isNullAt(55);
/* 781 */     Decimal value55 = isNull55 ? null : (i.getDecimal(55, 38, 0));
/* 782 */     if (isNull55) {
/* 783 */       rowWriter.write(55, (Decimal) null, 38, 0);
/* 784 */     } else {
/* 785 */       rowWriter.write(55, value55, 38, 0);
/* 786 */     }
/* 787 */
/* 788 */   }
/* 789 */
/* 790 */
/* 791 */   public SpecificUnsafeProjection(Object[] references) {
/* 792 */     this.references = references;
/* 793 */     result = new UnsafeRow(76);
/* 794 */     this.holder = new org.apache.spark.sql.catalyst.expressions.codegen.BufferHolder(result, 2368);
/* 795 */     this.rowWriter = new org.apache.spark.sql.catalyst.expressions.codegen.UnsafeRowWriter(holder, 76);
/* 796 */   }
/* 797 */
/* 798 */   // Scala.Function1 need this
/* 799 */   public java.lang.Object apply(java.lang.Object row) {
/* 800 */     return apply((InternalRow) row);
/* 801 */   }
/* 802 */
/* 803 */   public UnsafeRow apply(InternalRow i) {
/* 804 */     holder.reset();
/* 805 */
/* 806 */     rowWriter.zeroOutNullBytes();
/* 807 */     apply_0(i);
/* 808 */     apply_1(i);
/* 809 */     apply_2(i);
/* 810 */     apply_3(i);
/* 811 */     apply_4(i);
/* 812 */     apply_5(i);
/* 813 */     apply_6(i);
/* 814 */     apply_7(i);
/* 815 */     apply_8(i);
/* 816 */     apply_9(i);
/* 817 */     apply_10(i);
/* 818 */     apply_11(i);
/* 819 */     apply_12(i);
/* 820 */     apply_13(i);
/* 821 */     apply_14(i);
/* 822 */     apply_15(i);
/* 823 */     apply_16(i);
/* 824 */     apply_17(i);
/* 825 */     apply_18(i);
/* 826 */     result.setTotalSize(holder.totalSize());
/* 827 */     return result;
/* 828 */   }
/* 829 */ }

17/11/03 09:02:33 INFO Executor: Finished task 0.0 in stage 0.0 (TID 0). 4186 bytes result sent to driver
17/11/03 09:02:33 DEBUG TaskSchedulerImpl: parentName: , name: TaskSet_0, runningTasks: 0
17/11/03 09:02:33 INFO TaskSetManager: Finished task 0.0 in stage 0.0 (TID 0) in 758 ms on localhost (1/1)
17/11/03 09:02:33 INFO DAGScheduler: ResultStage 0 (take at <console>:26) finished in 0.772 s
17/11/03 09:02:33 INFO TaskSchedulerImpl: Removed TaskSet 0.0, whose tasks have all completed, from pool 
17/11/03 09:02:33 DEBUG DAGScheduler: After removal of stage 0, remaining stages = 0
17/11/03 09:02:33 INFO DAGScheduler: Job 0 finished: take at <console>:26, took 0.893806 s
17/11/03 09:02:33 DEBUG GenerateSafeProjection: code for createexternalrow(input[0, decimal(38,0), true].toJavaBigDecimal, input[1, string, true].toString, input[2, decimal(38,0), true].toJavaBigDecimal, input[3, decimal(38,0), true].toJavaBigDecimal, input[4, decimal(38,0), true].toJavaBigDecimal, input[5, decimal(38,0), true].toJavaBigDecimal, input[6, decimal(38,0), true].toJavaBigDecimal, input[7, string, true].toString, input[8, string, true].toString, input[9, string, true].toString, input[10, decimal(38,0), true].toJavaBigDecimal, input[11, decimal(38,0), true].toJavaBigDecimal, input[12, decimal(38,0), true].toJavaBigDecimal, input[13, string, true].toString, input[14, string, true].toString, input[15, string, true].toString, input[16, string, true].toString, input[17, decimal(38,0), true].toJavaBigDecimal, input[18, string, true].toString, input[19, decimal(38,0), true].toJavaBigDecimal, input[20, decimal(38,0), true].toJavaBigDecimal, input[21, decimal(38,0), true].toJavaBigDecimal, input[22, decimal(38,0), true].toJavaBigDecimal, input[23, decimal(38,0), true].toJavaBigDecimal, ... 128 more fields):
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificSafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificSafeProjection extends org.apache.spark.sql.catalyst.expressions.codegen.BaseProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private MutableRow mutableRow;
/* 009 */   private Object[] values;
/* 010 */   private org.apache.spark.sql.types.StructType schema;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */     boolean isNull98 = i.isNullAt(48);
/* 015 */     Decimal value98 = isNull98 ? null : (i.getDecimal(48, 38, 0));
/* 016 */
/* 017 */     boolean isNull97 = isNull98;
/* 018 */     final java.math.BigDecimal value97 = isNull97 ? null : (java.math.BigDecimal) value98.toJavaBigDecimal();
/* 019 */     isNull97 = value97 == null;
/* 020 */     if (isNull97) {
/* 021 */       values[48] = null;
/* 022 */     } else {
/* 023 */       values[48] = value97;
/* 024 */     }
/* 025 */
/* 026 */     boolean isNull100 = i.isNullAt(49);
/* 027 */     UTF8String value100 = isNull100 ? null : (i.getUTF8String(49));
/* 028 */
/* 029 */     boolean isNull99 = isNull100;
/* 030 */     final java.lang.String value99 = isNull99 ? null : (java.lang.String) value100.toString();
/* 031 */     isNull99 = value99 == null;
/* 032 */     if (isNull99) {
/* 033 */       values[49] = null;
/* 034 */     } else {
/* 035 */       values[49] = value99;
/* 036 */     }
/* 037 */
/* 038 */     boolean isNull102 = i.isNullAt(50);
/* 039 */     UTF8String value102 = isNull102 ? null : (i.getUTF8String(50));
/* 040 */
/* 041 */     boolean isNull101 = isNull102;
/* 042 */     final java.lang.String value101 = isNull101 ? null : (java.lang.String) value102.toString();
/* 043 */     isNull101 = value101 == null;
/* 044 */     if (isNull101) {
/* 045 */       values[50] = null;
/* 046 */     } else {
/* 047 */       values[50] = value101;
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_22(InternalRow i) {
/* 054 */
/* 055 */     boolean isNull134 = i.isNullAt(66);
/* 056 */     Decimal value134 = isNull134 ? null : (i.getDecimal(66, 38, 0));
/* 057 */
/* 058 */     boolean isNull133 = isNull134;
/* 059 */     final java.math.BigDecimal value133 = isNull133 ? null : (java.math.BigDecimal) value134.toJavaBigDecimal();
/* 060 */     isNull133 = value133 == null;
/* 061 */     if (isNull133) {
/* 062 */       values[66] = null;
/* 063 */     } else {
/* 064 */       values[66] = value133;
/* 065 */     }
/* 066 */
/* 067 */     boolean isNull136 = i.isNullAt(67);
/* 068 */     UTF8String value136 = isNull136 ? null : (i.getUTF8String(67));
/* 069 */
/* 070 */     boolean isNull135 = isNull136;
/* 071 */     final java.lang.String value135 = isNull135 ? null : (java.lang.String) value136.toString();
/* 072 */     isNull135 = value135 == null;
/* 073 */     if (isNull135) {
/* 074 */       values[67] = null;
/* 075 */     } else {
/* 076 */       values[67] = value135;
/* 077 */     }
/* 078 */
/* 079 */     boolean isNull138 = i.isNullAt(68);
/* 080 */     UTF8String value138 = isNull138 ? null : (i.getUTF8String(68));
/* 081 */
/* 082 */     boolean isNull137 = isNull138;
/* 083 */     final java.lang.String value137 = isNull137 ? null : (java.lang.String) value138.toString();
/* 084 */     isNull137 = value137 == null;
/* 085 */     if (isNull137) {
/* 086 */       values[68] = null;
/* 087 */     } else {
/* 088 */       values[68] = value137;
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_4(InternalRow i) {
/* 095 */
/* 096 */     boolean isNull26 = i.isNullAt(12);
/* 097 */     Decimal value26 = isNull26 ? null : (i.getDecimal(12, 38, 0));
/* 098 */
/* 099 */     boolean isNull25 = isNull26;
/* 100 */     final java.math.BigDecimal value25 = isNull25 ? null : (java.math.BigDecimal) value26.toJavaBigDecimal();
/* 101 */     isNull25 = value25 == null;
/* 102 */     if (isNull25) {
/* 103 */       values[12] = null;
/* 104 */     } else {
/* 105 */       values[12] = value25;
/* 106 */     }
/* 107 */
/* 108 */     boolean isNull28 = i.isNullAt(13);
/* 109 */     UTF8String value28 = isNull28 ? null : (i.getUTF8String(13));
/* 110 */
/* 111 */     boolean isNull27 = isNull28;
/* 112 */     final java.lang.String value27 = isNull27 ? null : (java.lang.String) value28.toString();
/* 113 */     isNull27 = value27 == null;
/* 114 */     if (isNull27) {
/* 115 */       values[13] = null;
/* 116 */     } else {
/* 117 */       values[13] = value27;
/* 118 */     }
/* 119 */
/* 120 */     boolean isNull30 = i.isNullAt(14);
/* 121 */     UTF8String value30 = isNull30 ? null : (i.getUTF8String(14));
/* 122 */
/* 123 */     boolean isNull29 = isNull30;
/* 124 */     final java.lang.String value29 = isNull29 ? null : (java.lang.String) value30.toString();
/* 125 */     isNull29 = value29 == null;
/* 126 */     if (isNull29) {
/* 127 */       values[14] = null;
/* 128 */     } else {
/* 129 */       values[14] = value29;
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_7(InternalRow i) {
/* 136 */
/* 137 */     boolean isNull44 = i.isNullAt(21);
/* 138 */     Decimal value44 = isNull44 ? null : (i.getDecimal(21, 38, 0));
/* 139 */
/* 140 */     boolean isNull43 = isNull44;
/* 141 */     final java.math.BigDecimal value43 = isNull43 ? null : (java.math.BigDecimal) value44.toJavaBigDecimal();
/* 142 */     isNull43 = value43 == null;
/* 143 */     if (isNull43) {
/* 144 */       values[21] = null;
/* 145 */     } else {
/* 146 */       values[21] = value43;
/* 147 */     }
/* 148 */
/* 149 */     boolean isNull46 = i.isNullAt(22);
/* 150 */     Decimal value46 = isNull46 ? null : (i.getDecimal(22, 38, 0));
/* 151 */
/* 152 */     boolean isNull45 = isNull46;
/* 153 */     final java.math.BigDecimal value45 = isNull45 ? null : (java.math.BigDecimal) value46.toJavaBigDecimal();
/* 154 */     isNull45 = value45 == null;
/* 155 */     if (isNull45) {
/* 156 */       values[22] = null;
/* 157 */     } else {
/* 158 */       values[22] = value45;
/* 159 */     }
/* 160 */
/* 161 */     boolean isNull48 = i.isNullAt(23);
/* 162 */     Decimal value48 = isNull48 ? null : (i.getDecimal(23, 38, 0));
/* 163 */
/* 164 */     boolean isNull47 = isNull48;
/* 165 */     final java.math.BigDecimal value47 = isNull47 ? null : (java.math.BigDecimal) value48.toJavaBigDecimal();
/* 166 */     isNull47 = value47 == null;
/* 167 */     if (isNull47) {
/* 168 */       values[23] = null;
/* 169 */     } else {
/* 170 */       values[23] = value47;
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_1(InternalRow i) {
/* 177 */
/* 178 */     boolean isNull8 = i.isNullAt(3);
/* 179 */     Decimal value8 = isNull8 ? null : (i.getDecimal(3, 38, 0));
/* 180 */
/* 181 */     boolean isNull7 = isNull8;
/* 182 */     final java.math.BigDecimal value7 = isNull7 ? null : (java.math.BigDecimal) value8.toJavaBigDecimal();
/* 183 */     isNull7 = value7 == null;
/* 184 */     if (isNull7) {
/* 185 */       values[3] = null;
/* 186 */     } else {
/* 187 */       values[3] = value7;
/* 188 */     }
/* 189 */
/* 190 */     boolean isNull10 = i.isNullAt(4);
/* 191 */     Decimal value10 = isNull10 ? null : (i.getDecimal(4, 38, 0));
/* 192 */
/* 193 */     boolean isNull9 = isNull10;
/* 194 */     final java.math.BigDecimal value9 = isNull9 ? null : (java.math.BigDecimal) value10.toJavaBigDecimal();
/* 195 */     isNull9 = value9 == null;
/* 196 */     if (isNull9) {
/* 197 */       values[4] = null;
/* 198 */     } else {
/* 199 */       values[4] = value9;
/* 200 */     }
/* 201 */
/* 202 */     boolean isNull12 = i.isNullAt(5);
/* 203 */     Decimal value12 = isNull12 ? null : (i.getDecimal(5, 38, 0));
/* 204 */
/* 205 */     boolean isNull11 = isNull12;
/* 206 */     final java.math.BigDecimal value11 = isNull11 ? null : (java.math.BigDecimal) value12.toJavaBigDecimal();
/* 207 */     isNull11 = value11 == null;
/* 208 */     if (isNull11) {
/* 209 */       values[5] = null;
/* 210 */     } else {
/* 211 */       values[5] = value11;
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_21(InternalRow i) {
/* 218 */
/* 219 */     boolean isNull128 = i.isNullAt(63);
/* 220 */     UTF8String value128 = isNull128 ? null : (i.getUTF8String(63));
/* 221 */
/* 222 */     boolean isNull127 = isNull128;
/* 223 */     final java.lang.String value127 = isNull127 ? null : (java.lang.String) value128.toString();
/* 224 */     isNull127 = value127 == null;
/* 225 */     if (isNull127) {
/* 226 */       values[63] = null;
/* 227 */     } else {
/* 228 */       values[63] = value127;
/* 229 */     }
/* 230 */
/* 231 */     boolean isNull130 = i.isNullAt(64);
/* 232 */     Decimal value130 = isNull130 ? null : (i.getDecimal(64, 38, 0));
/* 233 */
/* 234 */     boolean isNull129 = isNull130;
/* 235 */     final java.math.BigDecimal value129 = isNull129 ? null : (java.math.BigDecimal) value130.toJavaBigDecimal();
/* 236 */     isNull129 = value129 == null;
/* 237 */     if (isNull129) {
/* 238 */       values[64] = null;
/* 239 */     } else {
/* 240 */       values[64] = value129;
/* 241 */     }
/* 242 */
/* 243 */     boolean isNull132 = i.isNullAt(65);
/* 244 */     Decimal value132 = isNull132 ? null : (i.getDecimal(65, 38, 0));
/* 245 */
/* 246 */     boolean isNull131 = isNull132;
/* 247 */     final java.math.BigDecimal value131 = isNull131 ? null : (java.math.BigDecimal) value132.toJavaBigDecimal();
/* 248 */     isNull131 = value131 == null;
/* 249 */     if (isNull131) {
/* 250 */       values[65] = null;
/* 251 */     } else {
/* 252 */       values[65] = value131;
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_18(InternalRow i) {
/* 259 */
/* 260 */     boolean isNull110 = i.isNullAt(54);
/* 261 */     UTF8String value110 = isNull110 ? null : (i.getUTF8String(54));
/* 262 */
/* 263 */     boolean isNull109 = isNull110;
/* 264 */     final java.lang.String value109 = isNull109 ? null : (java.lang.String) value110.toString();
/* 265 */     isNull109 = value109 == null;
/* 266 */     if (isNull109) {
/* 267 */       values[54] = null;
/* 268 */     } else {
/* 269 */       values[54] = value109;
/* 270 */     }
/* 271 */
/* 272 */     boolean isNull112 = i.isNullAt(55);
/* 273 */     Decimal value112 = isNull112 ? null : (i.getDecimal(55, 38, 0));
/* 274 */
/* 275 */     boolean isNull111 = isNull112;
/* 276 */     final java.math.BigDecimal value111 = isNull111 ? null : (java.math.BigDecimal) value112.toJavaBigDecimal();
/* 277 */     isNull111 = value111 == null;
/* 278 */     if (isNull111) {
/* 279 */       values[55] = null;
/* 280 */     } else {
/* 281 */       values[55] = value111;
/* 282 */     }
/* 283 */
/* 284 */     boolean isNull114 = i.isNullAt(56);
/* 285 */     Decimal value114 = isNull114 ? null : (i.getDecimal(56, 38, 0));
/* 286 */
/* 287 */     boolean isNull113 = isNull114;
/* 288 */     final java.math.BigDecimal value113 = isNull113 ? null : (java.math.BigDecimal) value114.toJavaBigDecimal();
/* 289 */     isNull113 = value113 == null;
/* 290 */     if (isNull113) {
/* 291 */       values[56] = null;
/* 292 */     } else {
/* 293 */       values[56] = value113;
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_24(InternalRow i) {
/* 300 */
/* 301 */     boolean isNull146 = i.isNullAt(72);
/* 302 */     long value146 = isNull146 ? -1L : (i.getLong(72));
/* 303 */     boolean isNull145 = isNull146;
/* 304 */     final java.sql.Timestamp value145 = isNull145 ? null : org.apache.spark.sql.catalyst.util.DateTimeUtils.toJavaTimestamp(value146);
/* 305 */     isNull145 = value145 == null;
/* 306 */     if (isNull145) {
/* 307 */       values[72] = null;
/* 308 */     } else {
/* 309 */       values[72] = value145;
/* 310 */     }
/* 311 */
/* 312 */     boolean isNull148 = i.isNullAt(73);
/* 313 */     long value148 = isNull148 ? -1L : (i.getLong(73));
/* 314 */     boolean isNull147 = isNull148;
/* 315 */     final java.sql.Timestamp value147 = isNull147 ? null : org.apache.spark.sql.catalyst.util.DateTimeUtils.toJavaTimestamp(value148);
/* 316 */     isNull147 = value147 == null;
/* 317 */     if (isNull147) {
/* 318 */       values[73] = null;
/* 319 */     } else {
/* 320 */       values[73] = value147;
/* 321 */     }
/* 322 */
/* 323 */     boolean isNull150 = i.isNullAt(74);
/* 324 */     UTF8String value150 = isNull150 ? null : (i.getUTF8String(74));
/* 325 */
/* 326 */     boolean isNull149 = isNull150;
/* 327 */     final java.lang.String value149 = isNull149 ? null : (java.lang.String) value150.toString();
/* 328 */     isNull149 = value149 == null;
/* 329 */     if (isNull149) {
/* 330 */       values[74] = null;
/* 331 */     } else {
/* 332 */       values[74] = value149;
/* 333 */     }
/* 334 */
/* 335 */   }
/* 336 */
/* 337 */
/* 338 */   private void apply_12(InternalRow i) {
/* 339 */
/* 340 */     boolean isNull74 = i.isNullAt(36);
/* 341 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(36));
/* 342 */
/* 343 */     boolean isNull73 = isNull74;
/* 344 */     final java.lang.String value73 = isNull73 ? null : (java.lang.String) value74.toString();
/* 345 */     isNull73 = value73 == null;
/* 346 */     if (isNull73) {
/* 347 */       values[36] = null;
/* 348 */     } else {
/* 349 */       values[36] = value73;
/* 350 */     }
/* 351 */
/* 352 */     boolean isNull76 = i.isNullAt(37);
/* 353 */     Decimal value76 = isNull76 ? null : (i.getDecimal(37, 38, 0));
/* 354 */
/* 355 */     boolean isNull75 = isNull76;
/* 356 */     final java.math.BigDecimal value75 = isNull75 ? null : (java.math.BigDecimal) value76.toJavaBigDecimal();
/* 357 */     isNull75 = value75 == null;
/* 358 */     if (isNull75) {
/* 359 */       values[37] = null;
/* 360 */     } else {
/* 361 */       values[37] = value75;
/* 362 */     }
/* 363 */
/* 364 */     boolean isNull78 = i.isNullAt(38);
/* 365 */     Decimal value78 = isNull78 ? null : (i.getDecimal(38, 38, 0));
/* 366 */
/* 367 */     boolean isNull77 = isNull78;
/* 368 */     final java.math.BigDecimal value77 = isNull77 ? null : (java.math.BigDecimal) value78.toJavaBigDecimal();
/* 369 */     isNull77 = value77 == null;
/* 370 */     if (isNull77) {
/* 371 */       values[38] = null;
/* 372 */     } else {
/* 373 */       values[38] = value77;
/* 374 */     }
/* 375 */
/* 376 */   }
/* 377 */
/* 378 */
/* 379 */   private void apply_9(InternalRow i) {
/* 380 */
/* 381 */     boolean isNull56 = i.isNullAt(27);
/* 382 */     UTF8String value56 = isNull56 ? null : (i.getUTF8String(27));
/* 383 */
/* 384 */     boolean isNull55 = isNull56;
/* 385 */     final java.lang.String value55 = isNull55 ? null : (java.lang.String) value56.toString();
/* 386 */     isNull55 = value55 == null;
/* 387 */     if (isNull55) {
/* 388 */       values[27] = null;
/* 389 */     } else {
/* 390 */       values[27] = value55;
/* 391 */     }
/* 392 */
/* 393 */     boolean isNull58 = i.isNullAt(28);
/* 394 */     Decimal value58 = isNull58 ? null : (i.getDecimal(28, 38, 0));
/* 395 */
/* 396 */     boolean isNull57 = isNull58;
/* 397 */     final java.math.BigDecimal value57 = isNull57 ? null : (java.math.BigDecimal) value58.toJavaBigDecimal();
/* 398 */     isNull57 = value57 == null;
/* 399 */     if (isNull57) {
/* 400 */       values[28] = null;
/* 401 */     } else {
/* 402 */       values[28] = value57;
/* 403 */     }
/* 404 */
/* 405 */     boolean isNull60 = i.isNullAt(29);
/* 406 */     Decimal value60 = isNull60 ? null : (i.getDecimal(29, 38, 0));
/* 407 */
/* 408 */     boolean isNull59 = isNull60;
/* 409 */     final java.math.BigDecimal value59 = isNull59 ? null : (java.math.BigDecimal) value60.toJavaBigDecimal();
/* 410 */     isNull59 = value59 == null;
/* 411 */     if (isNull59) {
/* 412 */       values[29] = null;
/* 413 */     } else {
/* 414 */       values[29] = value59;
/* 415 */     }
/* 416 */
/* 417 */   }
/* 418 */
/* 419 */
/* 420 */   private void apply_15(InternalRow i) {
/* 421 */
/* 422 */     boolean isNull92 = i.isNullAt(45);
/* 423 */     UTF8String value92 = isNull92 ? null : (i.getUTF8String(45));
/* 424 */
/* 425 */     boolean isNull91 = isNull92;
/* 426 */     final java.lang.String value91 = isNull91 ? null : (java.lang.String) value92.toString();
/* 427 */     isNull91 = value91 == null;
/* 428 */     if (isNull91) {
/* 429 */       values[45] = null;
/* 430 */     } else {
/* 431 */       values[45] = value91;
/* 432 */     }
/* 433 */
/* 434 */     boolean isNull94 = i.isNullAt(46);
/* 435 */     Decimal value94 = isNull94 ? null : (i.getDecimal(46, 38, 0));
/* 436 */
/* 437 */     boolean isNull93 = isNull94;
/* 438 */     final java.math.BigDecimal value93 = isNull93 ? null : (java.math.BigDecimal) value94.toJavaBigDecimal();
/* 439 */     isNull93 = value93 == null;
/* 440 */     if (isNull93) {
/* 441 */       values[46] = null;
/* 442 */     } else {
/* 443 */       values[46] = value93;
/* 444 */     }
/* 445 */
/* 446 */     boolean isNull96 = i.isNullAt(47);
/* 447 */     Decimal value96 = isNull96 ? null : (i.getDecimal(47, 38, 0));
/* 448 */
/* 449 */     boolean isNull95 = isNull96;
/* 450 */     final java.math.BigDecimal value95 = isNull95 ? null : (java.math.BigDecimal) value96.toJavaBigDecimal();
/* 451 */     isNull95 = value95 == null;
/* 452 */     if (isNull95) {
/* 453 */       values[47] = null;
/* 454 */     } else {
/* 455 */       values[47] = value95;
/* 456 */     }
/* 457 */
/* 458 */   }
/* 459 */
/* 460 */
/* 461 */   private void apply_3(InternalRow i) {
/* 462 */
/* 463 */     boolean isNull20 = i.isNullAt(9);
/* 464 */     UTF8String value20 = isNull20 ? null : (i.getUTF8String(9));
/* 465 */
/* 466 */     boolean isNull19 = isNull20;
/* 467 */     final java.lang.String value19 = isNull19 ? null : (java.lang.String) value20.toString();
/* 468 */     isNull19 = value19 == null;
/* 469 */     if (isNull19) {
/* 470 */       values[9] = null;
/* 471 */     } else {
/* 472 */       values[9] = value19;
/* 473 */     }
/* 474 */
/* 475 */     boolean isNull22 = i.isNullAt(10);
/* 476 */     Decimal value22 = isNull22 ? null : (i.getDecimal(10, 38, 0));
/* 477 */
/* 478 */     boolean isNull21 = isNull22;
/* 479 */     final java.math.BigDecimal value21 = isNull21 ? null : (java.math.BigDecimal) value22.toJavaBigDecimal();
/* 480 */     isNull21 = value21 == null;
/* 481 */     if (isNull21) {
/* 482 */       values[10] = null;
/* 483 */     } else {
/* 484 */       values[10] = value21;
/* 485 */     }
/* 486 */
/* 487 */     boolean isNull24 = i.isNullAt(11);
/* 488 */     Decimal value24 = isNull24 ? null : (i.getDecimal(11, 38, 0));
/* 489 */
/* 490 */     boolean isNull23 = isNull24;
/* 491 */     final java.math.BigDecimal value23 = isNull23 ? null : (java.math.BigDecimal) value24.toJavaBigDecimal();
/* 492 */     isNull23 = value23 == null;
/* 493 */     if (isNull23) {
/* 494 */       values[11] = null;
/* 495 */     } else {
/* 496 */       values[11] = value23;
/* 497 */     }
/* 498 */
/* 499 */   }
/* 500 */
/* 501 */
/* 502 */   private void apply_6(InternalRow i) {
/* 503 */
/* 504 */     boolean isNull38 = i.isNullAt(18);
/* 505 */     UTF8String value38 = isNull38 ? null : (i.getUTF8String(18));
/* 506 */
/* 507 */     boolean isNull37 = isNull38;
/* 508 */     final java.lang.String value37 = isNull37 ? null : (java.lang.String) value38.toString();
/* 509 */     isNull37 = value37 == null;
/* 510 */     if (isNull37) {
/* 511 */       values[18] = null;
/* 512 */     } else {
/* 513 */       values[18] = value37;
/* 514 */     }
/* 515 */
/* 516 */     boolean isNull40 = i.isNullAt(19);
/* 517 */     Decimal value40 = isNull40 ? null : (i.getDecimal(19, 38, 0));
/* 518 */
/* 519 */     boolean isNull39 = isNull40;
/* 520 */     final java.math.BigDecimal value39 = isNull39 ? null : (java.math.BigDecimal) value40.toJavaBigDecimal();
/* 521 */     isNull39 = value39 == null;
/* 522 */     if (isNull39) {
/* 523 */       values[19] = null;
/* 524 */     } else {
/* 525 */       values[19] = value39;
/* 526 */     }
/* 527 */
/* 528 */     boolean isNull42 = i.isNullAt(20);
/* 529 */     Decimal value42 = isNull42 ? null : (i.getDecimal(20, 38, 0));
/* 530 */
/* 531 */     boolean isNull41 = isNull42;
/* 532 */     final java.math.BigDecimal value41 = isNull41 ? null : (java.math.BigDecimal) value42.toJavaBigDecimal();
/* 533 */     isNull41 = value41 == null;
/* 534 */     if (isNull41) {
/* 535 */       values[20] = null;
/* 536 */     } else {
/* 537 */       values[20] = value41;
/* 538 */     }
/* 539 */
/* 540 */   }
/* 541 */
/* 542 */
/* 543 */   private void apply_14(InternalRow i) {
/* 544 */
/* 545 */     boolean isNull86 = i.isNullAt(42);
/* 546 */     UTF8String value86 = isNull86 ? null : (i.getUTF8String(42));
/* 547 */
/* 548 */     boolean isNull85 = isNull86;
/* 549 */     final java.lang.String value85 = isNull85 ? null : (java.lang.String) value86.toString();
/* 550 */     isNull85 = value85 == null;
/* 551 */     if (isNull85) {
/* 552 */       values[42] = null;
/* 553 */     } else {
/* 554 */       values[42] = value85;
/* 555 */     }
/* 556 */
/* 557 */     boolean isNull88 = i.isNullAt(43);
/* 558 */     UTF8String value88 = isNull88 ? null : (i.getUTF8String(43));
/* 559 */
/* 560 */     boolean isNull87 = isNull88;
/* 561 */     final java.lang.String value87 = isNull87 ? null : (java.lang.String) value88.toString();
/* 562 */     isNull87 = value87 == null;
/* 563 */     if (isNull87) {
/* 564 */       values[43] = null;
/* 565 */     } else {
/* 566 */       values[43] = value87;
/* 567 */     }
/* 568 */
/* 569 */     boolean isNull90 = i.isNullAt(44);
/* 570 */     UTF8String value90 = isNull90 ? null : (i.getUTF8String(44));
/* 571 */
/* 572 */     boolean isNull89 = isNull90;
/* 573 */     final java.lang.String value89 = isNull89 ? null : (java.lang.String) value90.toString();
/* 574 */     isNull89 = value89 == null;
/* 575 */     if (isNull89) {
/* 576 */       values[44] = null;
/* 577 */     } else {
/* 578 */       values[44] = value89;
/* 579 */     }
/* 580 */
/* 581 */   }
/* 582 */
/* 583 */
/* 584 */   private void apply_0(InternalRow i) {
/* 585 */
/* 586 */     boolean isNull2 = i.isNullAt(0);
/* 587 */     Decimal value2 = isNull2 ? null : (i.getDecimal(0, 38, 0));
/* 588 */
/* 589 */     boolean isNull1 = isNull2;
/* 590 */     final java.math.BigDecimal value1 = isNull1 ? null : (java.math.BigDecimal) value2.toJavaBigDecimal();
/* 591 */     isNull1 = value1 == null;
/* 592 */     if (isNull1) {
/* 593 */       values[0] = null;
/* 594 */     } else {
/* 595 */       values[0] = value1;
/* 596 */     }
/* 597 */
/* 598 */     boolean isNull4 = i.isNullAt(1);
/* 599 */     UTF8String value4 = isNull4 ? null : (i.getUTF8String(1));
/* 600 */
/* 601 */     boolean isNull3 = isNull4;
/* 602 */     final java.lang.String value3 = isNull3 ? null : (java.lang.String) value4.toString();
/* 603 */     isNull3 = value3 == null;
/* 604 */     if (isNull3) {
/* 605 */       values[1] = null;
/* 606 */     } else {
/* 607 */       values[1] = value3;
/* 608 */     }
/* 609 */
/* 610 */     boolean isNull6 = i.isNullAt(2);
/* 611 */     Decimal value6 = isNull6 ? null : (i.getDecimal(2, 38, 0));
/* 612 */
/* 613 */     boolean isNull5 = isNull6;
/* 614 */     final java.math.BigDecimal value5 = isNull5 ? null : (java.math.BigDecimal) value6.toJavaBigDecimal();
/* 615 */     isNull5 = value5 == null;
/* 616 */     if (isNull5) {
/* 617 */       values[2] = null;
/* 618 */     } else {
/* 619 */       values[2] = value5;
/* 620 */     }
/* 621 */
/* 622 */   }
/* 623 */
/* 624 */
/* 625 */   private void apply_20(InternalRow i) {
/* 626 */
/* 627 */     boolean isNull122 = i.isNullAt(60);
/* 628 */     UTF8String value122 = isNull122 ? null : (i.getUTF8String(60));
/* 629 */
/* 630 */     boolean isNull121 = isNull122;
/* 631 */     final java.lang.String value121 = isNull121 ? null : (java.lang.String) value122.toString();
/* 632 */     isNull121 = value121 == null;
/* 633 */     if (isNull121) {
/* 634 */       values[60] = null;
/* 635 */     } else {
/* 636 */       values[60] = value121;
/* 637 */     }
/* 638 */
/* 639 */     boolean isNull124 = i.isNullAt(61);
/* 640 */     UTF8String value124 = isNull124 ? null : (i.getUTF8String(61));
/* 641 */
/* 642 */     boolean isNull123 = isNull124;
/* 643 */     final java.lang.String value123 = isNull123 ? null : (java.lang.String) value124.toString();
/* 644 */     isNull123 = value123 == null;
/* 645 */     if (isNull123) {
/* 646 */       values[61] = null;
/* 647 */     } else {
/* 648 */       values[61] = value123;
/* 649 */     }
/* 650 */
/* 651 */     boolean isNull126 = i.isNullAt(62);
/* 652 */     UTF8String value126 = isNull126 ? null : (i.getUTF8String(62));
/* 653 */
/* 654 */     boolean isNull125 = isNull126;
/* 655 */     final java.lang.String value125 = isNull125 ? null : (java.lang.String) value126.toString();
/* 656 */     isNull125 = value125 == null;
/* 657 */     if (isNull125) {
/* 658 */       values[62] = null;
/* 659 */     } else {
/* 660 */       values[62] = value125;
/* 661 */     }
/* 662 */
/* 663 */   }
/* 664 */
/* 665 */
/* 666 */   private void apply_23(InternalRow i) {
/* 667 */
/* 668 */     boolean isNull140 = i.isNullAt(69);
/* 669 */     UTF8String value140 = isNull140 ? null : (i.getUTF8String(69));
/* 670 */
/* 671 */     boolean isNull139 = isNull140;
/* 672 */     final java.lang.String value139 = isNull139 ? null : (java.lang.String) value140.toString();
/* 673 */     isNull139 = value139 == null;
/* 674 */     if (isNull139) {
/* 675 */       values[69] = null;
/* 676 */     } else {
/* 677 */       values[69] = value139;
/* 678 */     }
/* 679 */
/* 680 */     boolean isNull142 = i.isNullAt(70);
/* 681 */     UTF8String value142 = isNull142 ? null : (i.getUTF8String(70));
/* 682 */
/* 683 */     boolean isNull141 = isNull142;
/* 684 */     final java.lang.String value141 = isNull141 ? null : (java.lang.String) value142.toString();
/* 685 */     isNull141 = value141 == null;
/* 686 */     if (isNull141) {
/* 687 */       values[70] = null;
/* 688 */     } else {
/* 689 */       values[70] = value141;
/* 690 */     }
/* 691 */
/* 692 */     boolean isNull144 = i.isNullAt(71);
/* 693 */     UTF8String value144 = isNull144 ? null : (i.getUTF8String(71));
/* 694 */
/* 695 */     boolean isNull143 = isNull144;
/* 696 */     final java.lang.String value143 = isNull143 ? null : (java.lang.String) value144.toString();
/* 697 */     isNull143 = value143 == null;
/* 698 */     if (isNull143) {
/* 699 */       values[71] = null;
/* 700 */     } else {
/* 701 */       values[71] = value143;
/* 702 */     }
/* 703 */
/* 704 */   }
/* 705 */
/* 706 */
/* 707 */   private void apply_17(InternalRow i) {
/* 708 */
/* 709 */     boolean isNull104 = i.isNullAt(51);
/* 710 */     UTF8String value104 = isNull104 ? null : (i.getUTF8String(51));
/* 711 */
/* 712 */     boolean isNull103 = isNull104;
/* 713 */     final java.lang.String value103 = isNull103 ? null : (java.lang.String) value104.toString();
/* 714 */     isNull103 = value103 == null;
/* 715 */     if (isNull103) {
/* 716 */       values[51] = null;
/* 717 */     } else {
/* 718 */       values[51] = value103;
/* 719 */     }
/* 720 */
/* 721 */     boolean isNull106 = i.isNullAt(52);
/* 722 */     UTF8String value106 = isNull106 ? null : (i.getUTF8String(52));
/* 723 */
/* 724 */     boolean isNull105 = isNull106;
/* 725 */     final java.lang.String value105 = isNull105 ? null : (java.lang.String) value106.toString();
/* 726 */     isNull105 = value105 == null;
/* 727 */     if (isNull105) {
/* 728 */       values[52] = null;
/* 729 */     } else {
/* 730 */       values[52] = value105;
/* 731 */     }
/* 732 */
/* 733 */     boolean isNull108 = i.isNullAt(53);
/* 734 */     Decimal value108 = isNull108 ? null : (i.getDecimal(53, 38, 0));
/* 735 */
/* 736 */     boolean isNull107 = isNull108;
/* 737 */     final java.math.BigDecimal value107 = isNull107 ? null : (java.math.BigDecimal) value108.toJavaBigDecimal();
/* 738 */     isNull107 = value107 == null;
/* 739 */     if (isNull107) {
/* 740 */       values[53] = null;
/* 741 */     } else {
/* 742 */       values[53] = value107;
/* 743 */     }
/* 744 */
/* 745 */   }
/* 746 */
/* 747 */
/* 748 */   private void apply_11(InternalRow i) {
/* 749 */
/* 750 */     boolean isNull68 = i.isNullAt(33);
/* 751 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(33));
/* 752 */
/* 753 */     boolean isNull67 = isNull68;
/* 754 */     final java.lang.String value67 = isNull67 ? null : (java.lang.String) value68.toString();
/* 755 */     isNull67 = value67 == null;
/* 756 */     if (isNull67) {
/* 757 */       values[33] = null;
/* 758 */     } else {
/* 759 */       values[33] = value67;
/* 760 */     }
/* 761 */
/* 762 */     boolean isNull70 = i.isNullAt(34);
/* 763 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(34));
/* 764 */
/* 765 */     boolean isNull69 = isNull70;
/* 766 */     final java.lang.String value69 = isNull69 ? null : (java.lang.String) value70.toString();
/* 767 */     isNull69 = value69 == null;
/* 768 */     if (isNull69) {
/* 769 */       values[34] = null;
/* 770 */     } else {
/* 771 */       values[34] = value69;
/* 772 */     }
/* 773 */
/* 774 */     boolean isNull72 = i.isNullAt(35);
/* 775 */     Decimal value72 = isNull72 ? null : (i.getDecimal(35, 38, 0));
/* 776 */
/* 777 */     boolean isNull71 = isNull72;
/* 778 */     final java.math.BigDecimal value71 = isNull71 ? null : (java.math.BigDecimal) value72.toJavaBigDecimal();
/* 779 */     isNull71 = value71 == null;
/* 780 */     if (isNull71) {
/* 781 */       values[35] = null;
/* 782 */     } else {
/* 783 */       values[35] = value71;
/* 784 */     }
/* 785 */
/* 786 */   }
/* 787 */
/* 788 */
/* 789 */   private void apply_8(InternalRow i) {
/* 790 */
/* 791 */     boolean isNull50 = i.isNullAt(24);
/* 792 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(24));
/* 793 */
/* 794 */     boolean isNull49 = isNull50;
/* 795 */     final java.lang.String value49 = isNull49 ? null : (java.lang.String) value50.toString();
/* 796 */     isNull49 = value49 == null;
/* 797 */     if (isNull49) {
/* 798 */       values[24] = null;
/* 799 */     } else {
/* 800 */       values[24] = value49;
/* 801 */     }
/* 802 */
/* 803 */     boolean isNull52 = i.isNullAt(25);
/* 804 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(25));
/* 805 */
/* 806 */     boolean isNull51 = isNull52;
/* 807 */     final java.lang.String value51 = isNull51 ? null : (java.lang.String) value52.toString();
/* 808 */     isNull51 = value51 == null;
/* 809 */     if (isNull51) {
/* 810 */       values[25] = null;
/* 811 */     } else {
/* 812 */       values[25] = value51;
/* 813 */     }
/* 814 */
/* 815 */     boolean isNull54 = i.isNullAt(26);
/* 816 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(26));
/* 817 */
/* 818 */     boolean isNull53 = isNull54;
/* 819 */     final java.lang.String value53 = isNull53 ? null : (java.lang.String) value54.toString();
/* 820 */     isNull53 = value53 == null;
/* 821 */     if (isNull53) {
/* 822 */       values[26] = null;
/* 823 */     } else {
/* 824 */       values[26] = value53;
/* 825 */     }
/* 826 */
/* 827 */   }
/* 828 */
/* 829 */
/* 830 */   private void apply_2(InternalRow i) {
/* 831 */
/* 832 */     boolean isNull14 = i.isNullAt(6);
/* 833 */     Decimal value14 = isNull14 ? null : (i.getDecimal(6, 38, 0));
/* 834 */
/* 835 */     boolean isNull13 = isNull14;
/* 836 */     final java.math.BigDecimal value13 = isNull13 ? null : (java.math.BigDecimal) value14.toJavaBigDecimal();
/* 837 */     isNull13 = value13 == null;
/* 838 */     if (isNull13) {
/* 839 */       values[6] = null;
/* 840 */     } else {
/* 841 */       values[6] = value13;
/* 842 */     }
/* 843 */
/* 844 */     boolean isNull16 = i.isNullAt(7);
/* 845 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(7));
/* 846 */
/* 847 */     boolean isNull15 = isNull16;
/* 848 */     final java.lang.String value15 = isNull15 ? null : (java.lang.String) value16.toString();
/* 849 */     isNull15 = value15 == null;
/* 850 */     if (isNull15) {
/* 851 */       values[7] = null;
/* 852 */     } else {
/* 853 */       values[7] = value15;
/* 854 */     }
/* 855 */
/* 856 */     boolean isNull18 = i.isNullAt(8);
/* 857 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(8));
/* 858 */
/* 859 */     boolean isNull17 = isNull18;
/* 860 */     final java.lang.String value17 = isNull17 ? null : (java.lang.String) value18.toString();
/* 861 */     isNull17 = value17 == null;
/* 862 */     if (isNull17) {
/* 863 */       values[8] = null;
/* 864 */     } else {
/* 865 */       values[8] = value17;
/* 866 */     }
/* 867 */
/* 868 */   }
/* 869 */
/* 870 */
/* 871 */   private void apply_5(InternalRow i) {
/* 872 */
/* 873 */     boolean isNull32 = i.isNullAt(15);
/* 874 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(15));
/* 875 */
/* 876 */     boolean isNull31 = isNull32;
/* 877 */     final java.lang.String value31 = isNull31 ? null : (java.lang.String) value32.toString();
/* 878 */     isNull31 = value31 == null;
/* 879 */     if (isNull31) {
/* 880 */       values[15] = null;
/* 881 */     } else {
/* 882 */       values[15] = value31;
/* 883 */     }
/* 884 */
/* 885 */     boolean isNull34 = i.isNullAt(16);
/* 886 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(16));
/* 887 */
/* 888 */     boolean isNull33 = isNull34;
/* 889 */     final java.lang.String value33 = isNull33 ? null : (java.lang.String) value34.toString();
/* 890 */     isNull33 = value33 == null;
/* 891 */     if (isNull33) {
/* 892 */       values[16] = null;
/* 893 */     } else {
/* 894 */       values[16] = value33;
/* 895 */     }
/* 896 */
/* 897 */     boolean isNull36 = i.isNullAt(17);
/* 898 */     Decimal value36 = isNull36 ? null : (i.getDecimal(17, 38, 0));
/* 899 */
/* 900 */     boolean isNull35 = isNull36;
/* 901 */     final java.math.BigDecimal value35 = isNull35 ? null : (java.math.BigDecimal) value36.toJavaBigDecimal();
/* 902 */     isNull35 = value35 == null;
/* 903 */     if (isNull35) {
/* 904 */       values[17] = null;
/* 905 */     } else {
/* 906 */       values[17] = value35;
/* 907 */     }
/* 908 */
/* 909 */   }
/* 910 */
/* 911 */
/* 912 */   private void apply_25(InternalRow i) {
/* 913 */
/* 914 */     boolean isNull152 = i.isNullAt(75);
/* 915 */     UTF8String value152 = isNull152 ? null : (i.getUTF8String(75));
/* 916 */
/* 917 */     boolean isNull151 = isNull152;
/* 918 */     final java.lang.String value151 = isNull151 ? null : (java.lang.String) value152.toString();
/* 919 */     isNull151 = value151 == null;
/* 920 */     if (isNull151) {
/* 921 */       values[75] = null;
/* 922 */     } else {
/* 923 */       values[75] = value151;
/* 924 */     }
/* 925 */
/* 926 */   }
/* 927 */
/* 928 */
/* 929 */   private void apply_10(InternalRow i) {
/* 930 */
/* 931 */     boolean isNull62 = i.isNullAt(30);
/* 932 */     Decimal value62 = isNull62 ? null : (i.getDecimal(30, 38, 0));
/* 933 */
/* 934 */     boolean isNull61 = isNull62;
/* 935 */     final java.math.BigDecimal value61 = isNull61 ? null : (java.math.BigDecimal) value62.toJavaBigDecimal();
/* 936 */     isNull61 = value61 == null;
/* 937 */     if (isNull61) {
/* 938 */       values[30] = null;
/* 939 */     } else {
/* 940 */       values[30] = value61;
/* 941 */     }
/* 942 */
/* 943 */     boolean isNull64 = i.isNullAt(31);
/* 944 */     UTF8String value64 = isNull64 ? null : (i.getUTF8String(31));
/* 945 */
/* 946 */     boolean isNull63 = isNull64;
/* 947 */     final java.lang.String value63 = isNull63 ? null : (java.lang.String) value64.toString();
/* 948 */     isNull63 = value63 == null;
/* 949 */     if (isNull63) {
/* 950 */       values[31] = null;
/* 951 */     } else {
/* 952 */       values[31] = value63;
/* 953 */     }
/* 954 */
/* 955 */     boolean isNull66 = i.isNullAt(32);
/* 956 */     UTF8String value66 = isNull66 ? null : (i.getUTF8String(32));
/* 957 */
/* 958 */     boolean isNull65 = isNull66;
/* 959 */     final java.lang.String value65 = isNull65 ? null : (java.lang.String) value66.toString();
/* 960 */     isNull65 = value65 == null;
/* 961 */     if (isNull65) {
/* 962 */       values[32] = null;
/* 963 */     } else {
/* 964 */       values[32] = value65;
/* 965 */     }
/* 966 */
/* 967 */   }
/* 968 */
/* 969 */
/* 970 */   private void apply_19(InternalRow i) {
/* 971 */
/* 972 */     boolean isNull116 = i.isNullAt(57);
/* 973 */     Decimal value116 = isNull116 ? null : (i.getDecimal(57, 38, 0));
/* 974 */
/* 975 */     boolean isNull115 = isNull116;
/* 976 */     final java.math.BigDecimal value115 = isNull115 ? null : (java.math.BigDecimal) value116.toJavaBigDecimal();
/* 977 */     isNull115 = value115 == null;
/* 978 */     if (isNull115) {
/* 979 */       values[57] = null;
/* 980 */     } else {
/* 981 */       values[57] = value115;
/* 982 */     }
/* 983 */
/* 984 */     boolean isNull118 = i.isNullAt(58);
/* 985 */     Decimal value118 = isNull118 ? null : (i.getDecimal(58, 38, 0));
/* 986 */
/* 987 */     boolean isNull117 = isNull118;
/* 988 */     final java.math.BigDecimal value117 = isNull117 ? null : (java.math.BigDecimal) value118.toJavaBigDecimal();
/* 989 */     isNull117 = value117 == null;
/* 990 */     if (isNull117) {
/* 991 */       values[58] = null;
/* 992 */     } else {
/* 993 */       values[58] = value117;
/* 994 */     }
/* 995 */
/* 996 */     boolean isNull120 = i.isNullAt(59);
/* 997 */     Decimal value120 = isNull120 ? null : (i.getDecimal(59, 38, 0));
/* 998 */
/* 999 */     boolean isNull119 = isNull120;
/* 1000 */     final java.math.BigDecimal value119 = isNull119 ? null : (java.math.BigDecimal) value120.toJavaBigDecimal();
/* 1001 */     isNull119 = value119 == null;
/* 1002 */     if (isNull119) {
/* 1003 */       values[59] = null;
/* 1004 */     } else {
/* 1005 */       values[59] = value119;
/* 1006 */     }
/* 1007 */
/* 1008 */   }
/* 1009 */
/* 1010 */
/* 1011 */   private void apply_13(InternalRow i) {
/* 1012 */
/* 1013 */     boolean isNull80 = i.isNullAt(39);
/* 1014 */     Decimal value80 = isNull80 ? null : (i.getDecimal(39, 38, 0));
/* 1015 */
/* 1016 */     boolean isNull79 = isNull80;
/* 1017 */     final java.math.BigDecimal value79 = isNull79 ? null : (java.math.BigDecimal) value80.toJavaBigDecimal();
/* 1018 */     isNull79 = value79 == null;
/* 1019 */     if (isNull79) {
/* 1020 */       values[39] = null;
/* 1021 */     } else {
/* 1022 */       values[39] = value79;
/* 1023 */     }
/* 1024 */
/* 1025 */     boolean isNull82 = i.isNullAt(40);
/* 1026 */     Decimal value82 = isNull82 ? null : (i.getDecimal(40, 38, 0));
/* 1027 */
/* 1028 */     boolean isNull81 = isNull82;
/* 1029 */     final java.math.BigDecimal value81 = isNull81 ? null : (java.math.BigDecimal) value82.toJavaBigDecimal();
/* 1030 */     isNull81 = value81 == null;
/* 1031 */     if (isNull81) {
/* 1032 */       values[40] = null;
/* 1033 */     } else {
/* 1034 */       values[40] = value81;
/* 1035 */     }
/* 1036 */
/* 1037 */     boolean isNull84 = i.isNullAt(41);
/* 1038 */     Decimal value84 = isNull84 ? null : (i.getDecimal(41, 38, 0));
/* 1039 */
/* 1040 */     boolean isNull83 = isNull84;
/* 1041 */     final java.math.BigDecimal value83 = isNull83 ? null : (java.math.BigDecimal) value84.toJavaBigDecimal();
/* 1042 */     isNull83 = value83 == null;
/* 1043 */     if (isNull83) {
/* 1044 */       values[41] = null;
/* 1045 */     } else {
/* 1046 */       values[41] = value83;
/* 1047 */     }
/* 1048 */
/* 1049 */   }
/* 1050 */
/* 1051 */
/* 1052 */   public SpecificSafeProjection(Object[] references) {
/* 1053 */     this.references = references;
/* 1054 */     mutableRow = (MutableRow) references[references.length - 1];
/* 1055 */
/* 1056 */     this.schema = (org.apache.spark.sql.types.StructType) references[0];
/* 1057 */   }
/* 1058 */
/* 1059 */   public java.lang.Object apply(java.lang.Object _i) {
/* 1060 */     InternalRow i = (InternalRow) _i;
/* 1061 */
/* 1062 */     values = new Object[76];
/* 1063 */     apply_0(i);
/* 1064 */     apply_1(i);
/* 1065 */     apply_2(i);
/* 1066 */     apply_3(i);
/* 1067 */     apply_4(i);
/* 1068 */     apply_5(i);
/* 1069 */     apply_6(i);
/* 1070 */     apply_7(i);
/* 1071 */     apply_8(i);
/* 1072 */     apply_9(i);
/* 1073 */     apply_10(i);
/* 1074 */     apply_11(i);
/* 1075 */     apply_12(i);
/* 1076 */     apply_13(i);
/* 1077 */     apply_14(i);
/* 1078 */     apply_15(i);
/* 1079 */     apply_16(i);
/* 1080 */     apply_17(i);
/* 1081 */     apply_18(i);
/* 1082 */     apply_19(i);
/* 1083 */     apply_20(i);
/* 1084 */     apply_21(i);
/* 1085 */     apply_22(i);
/* 1086 */     apply_23(i);
/* 1087 */     apply_24(i);
/* 1088 */     apply_25(i);
/* 1089 */     final org.apache.spark.sql.Row value = new org.apache.spark.sql.catalyst.expressions.GenericRowWithSchema(values, schema);
/* 1090 */     if (false) {
/* 1091 */       mutableRow.setNullAt(0);
/* 1092 */     } else {
/* 1093 */
/* 1094 */       mutableRow.update(0, value);
/* 1095 */     }
/* 1096 */
/* 1097 */     return mutableRow;
/* 1098 */   }
/* 1099 */ }

17/11/03 09:02:33 DEBUG DFSClient: DFSClient writeChunk allocating new packet seqno=5, src=/spark2-history/local-1509699167113.inprogress, packetSize=65016, chunksPerPacket=126, bytesCurBlock=36352
17/11/03 09:02:33 DEBUG DFSClient: DFSClient flush(): bytesCurBlock=43907 lastFlushOffset=36571 createNewBlock=false
17/11/03 09:02:33 DEBUG DFSClient: Queued packet 5
17/11/03 09:02:33 DEBUG DFSClient: Waiting for ack for: 5
17/11/03 09:02:33 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074042151_301380 sending packet packet seqno: 5 offsetInBlock: 36352 lastPacketInBlock: false lastByteOffsetInBlock: 43907
17/11/03 09:02:33 DEBUG DFSClient: DFSClient seqno: 5 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 1145606 flag: 0 flag: 0 flag: 0
17/11/03 09:02:33 DEBUG DFSClient: DFSClient writeChunk allocating new packet seqno=6, src=/spark2-history/local-1509699167113.inprogress, packetSize=65016, chunksPerPacket=126, bytesCurBlock=43520
17/11/03 09:02:33 DEBUG DFSClient: DFSClient flush(): bytesCurBlock=44021 lastFlushOffset=43907 createNewBlock=false
17/11/03 09:02:33 DEBUG DFSClient: Queued packet 6
17/11/03 09:02:33 DEBUG DFSClient: Waiting for ack for: 6
17/11/03 09:02:33 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074042151_301380 sending packet packet seqno: 6 offsetInBlock: 43520 lastPacketInBlock: false lastByteOffsetInBlock: 44021
17/11/03 09:02:33 DEBUG DFSClient: DFSClient seqno: 6 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 673023 flag: 0 flag: 0 flag: 0
17/11/03 09:02:33 DEBUG CodeGenerator: 
/* 001 */ public java.lang.Object generate(Object[] references) {
/* 002 */   return new SpecificSafeProjection(references);
/* 003 */ }
/* 004 */
/* 005 */ class SpecificSafeProjection extends org.apache.spark.sql.catalyst.expressions.codegen.BaseProjection {
/* 006 */
/* 007 */   private Object[] references;
/* 008 */   private MutableRow mutableRow;
/* 009 */   private Object[] values;
/* 010 */   private org.apache.spark.sql.types.StructType schema;
/* 011 */
/* 012 */   private void apply_16(InternalRow i) {
/* 013 */
/* 014 */     boolean isNull98 = i.isNullAt(48);
/* 015 */     Decimal value98 = isNull98 ? null : (i.getDecimal(48, 38, 0));
/* 016 */
/* 017 */     boolean isNull97 = isNull98;
/* 018 */     final java.math.BigDecimal value97 = isNull97 ? null : (java.math.BigDecimal) value98.toJavaBigDecimal();
/* 019 */     isNull97 = value97 == null;
/* 020 */     if (isNull97) {
/* 021 */       values[48] = null;
/* 022 */     } else {
/* 023 */       values[48] = value97;
/* 024 */     }
/* 025 */
/* 026 */     boolean isNull100 = i.isNullAt(49);
/* 027 */     UTF8String value100 = isNull100 ? null : (i.getUTF8String(49));
/* 028 */
/* 029 */     boolean isNull99 = isNull100;
/* 030 */     final java.lang.String value99 = isNull99 ? null : (java.lang.String) value100.toString();
/* 031 */     isNull99 = value99 == null;
/* 032 */     if (isNull99) {
/* 033 */       values[49] = null;
/* 034 */     } else {
/* 035 */       values[49] = value99;
/* 036 */     }
/* 037 */
/* 038 */     boolean isNull102 = i.isNullAt(50);
/* 039 */     UTF8String value102 = isNull102 ? null : (i.getUTF8String(50));
/* 040 */
/* 041 */     boolean isNull101 = isNull102;
/* 042 */     final java.lang.String value101 = isNull101 ? null : (java.lang.String) value102.toString();
/* 043 */     isNull101 = value101 == null;
/* 044 */     if (isNull101) {
/* 045 */       values[50] = null;
/* 046 */     } else {
/* 047 */       values[50] = value101;
/* 048 */     }
/* 049 */
/* 050 */   }
/* 051 */
/* 052 */
/* 053 */   private void apply_22(InternalRow i) {
/* 054 */
/* 055 */     boolean isNull134 = i.isNullAt(66);
/* 056 */     Decimal value134 = isNull134 ? null : (i.getDecimal(66, 38, 0));
/* 057 */
/* 058 */     boolean isNull133 = isNull134;
/* 059 */     final java.math.BigDecimal value133 = isNull133 ? null : (java.math.BigDecimal) value134.toJavaBigDecimal();
/* 060 */     isNull133 = value133 == null;
/* 061 */     if (isNull133) {
/* 062 */       values[66] = null;
/* 063 */     } else {
/* 064 */       values[66] = value133;
/* 065 */     }
/* 066 */
/* 067 */     boolean isNull136 = i.isNullAt(67);
/* 068 */     UTF8String value136 = isNull136 ? null : (i.getUTF8String(67));
/* 069 */
/* 070 */     boolean isNull135 = isNull136;
/* 071 */     final java.lang.String value135 = isNull135 ? null : (java.lang.String) value136.toString();
/* 072 */     isNull135 = value135 == null;
/* 073 */     if (isNull135) {
/* 074 */       values[67] = null;
/* 075 */     } else {
/* 076 */       values[67] = value135;
/* 077 */     }
/* 078 */
/* 079 */     boolean isNull138 = i.isNullAt(68);
/* 080 */     UTF8String value138 = isNull138 ? null : (i.getUTF8String(68));
/* 081 */
/* 082 */     boolean isNull137 = isNull138;
/* 083 */     final java.lang.String value137 = isNull137 ? null : (java.lang.String) value138.toString();
/* 084 */     isNull137 = value137 == null;
/* 085 */     if (isNull137) {
/* 086 */       values[68] = null;
/* 087 */     } else {
/* 088 */       values[68] = value137;
/* 089 */     }
/* 090 */
/* 091 */   }
/* 092 */
/* 093 */
/* 094 */   private void apply_4(InternalRow i) {
/* 095 */
/* 096 */     boolean isNull26 = i.isNullAt(12);
/* 097 */     Decimal value26 = isNull26 ? null : (i.getDecimal(12, 38, 0));
/* 098 */
/* 099 */     boolean isNull25 = isNull26;
/* 100 */     final java.math.BigDecimal value25 = isNull25 ? null : (java.math.BigDecimal) value26.toJavaBigDecimal();
/* 101 */     isNull25 = value25 == null;
/* 102 */     if (isNull25) {
/* 103 */       values[12] = null;
/* 104 */     } else {
/* 105 */       values[12] = value25;
/* 106 */     }
/* 107 */
/* 108 */     boolean isNull28 = i.isNullAt(13);
/* 109 */     UTF8String value28 = isNull28 ? null : (i.getUTF8String(13));
/* 110 */
/* 111 */     boolean isNull27 = isNull28;
/* 112 */     final java.lang.String value27 = isNull27 ? null : (java.lang.String) value28.toString();
/* 113 */     isNull27 = value27 == null;
/* 114 */     if (isNull27) {
/* 115 */       values[13] = null;
/* 116 */     } else {
/* 117 */       values[13] = value27;
/* 118 */     }
/* 119 */
/* 120 */     boolean isNull30 = i.isNullAt(14);
/* 121 */     UTF8String value30 = isNull30 ? null : (i.getUTF8String(14));
/* 122 */
/* 123 */     boolean isNull29 = isNull30;
/* 124 */     final java.lang.String value29 = isNull29 ? null : (java.lang.String) value30.toString();
/* 125 */     isNull29 = value29 == null;
/* 126 */     if (isNull29) {
/* 127 */       values[14] = null;
/* 128 */     } else {
/* 129 */       values[14] = value29;
/* 130 */     }
/* 131 */
/* 132 */   }
/* 133 */
/* 134 */
/* 135 */   private void apply_7(InternalRow i) {
/* 136 */
/* 137 */     boolean isNull44 = i.isNullAt(21);
/* 138 */     Decimal value44 = isNull44 ? null : (i.getDecimal(21, 38, 0));
/* 139 */
/* 140 */     boolean isNull43 = isNull44;
/* 141 */     final java.math.BigDecimal value43 = isNull43 ? null : (java.math.BigDecimal) value44.toJavaBigDecimal();
/* 142 */     isNull43 = value43 == null;
/* 143 */     if (isNull43) {
/* 144 */       values[21] = null;
/* 145 */     } else {
/* 146 */       values[21] = value43;
/* 147 */     }
/* 148 */
/* 149 */     boolean isNull46 = i.isNullAt(22);
/* 150 */     Decimal value46 = isNull46 ? null : (i.getDecimal(22, 38, 0));
/* 151 */
/* 152 */     boolean isNull45 = isNull46;
/* 153 */     final java.math.BigDecimal value45 = isNull45 ? null : (java.math.BigDecimal) value46.toJavaBigDecimal();
/* 154 */     isNull45 = value45 == null;
/* 155 */     if (isNull45) {
/* 156 */       values[22] = null;
/* 157 */     } else {
/* 158 */       values[22] = value45;
/* 159 */     }
/* 160 */
/* 161 */     boolean isNull48 = i.isNullAt(23);
/* 162 */     Decimal value48 = isNull48 ? null : (i.getDecimal(23, 38, 0));
/* 163 */
/* 164 */     boolean isNull47 = isNull48;
/* 165 */     final java.math.BigDecimal value47 = isNull47 ? null : (java.math.BigDecimal) value48.toJavaBigDecimal();
/* 166 */     isNull47 = value47 == null;
/* 167 */     if (isNull47) {
/* 168 */       values[23] = null;
/* 169 */     } else {
/* 170 */       values[23] = value47;
/* 171 */     }
/* 172 */
/* 173 */   }
/* 174 */
/* 175 */
/* 176 */   private void apply_1(InternalRow i) {
/* 177 */
/* 178 */     boolean isNull8 = i.isNullAt(3);
/* 179 */     Decimal value8 = isNull8 ? null : (i.getDecimal(3, 38, 0));
/* 180 */
/* 181 */     boolean isNull7 = isNull8;
/* 182 */     final java.math.BigDecimal value7 = isNull7 ? null : (java.math.BigDecimal) value8.toJavaBigDecimal();
/* 183 */     isNull7 = value7 == null;
/* 184 */     if (isNull7) {
/* 185 */       values[3] = null;
/* 186 */     } else {
/* 187 */       values[3] = value7;
/* 188 */     }
/* 189 */
/* 190 */     boolean isNull10 = i.isNullAt(4);
/* 191 */     Decimal value10 = isNull10 ? null : (i.getDecimal(4, 38, 0));
/* 192 */
/* 193 */     boolean isNull9 = isNull10;
/* 194 */     final java.math.BigDecimal value9 = isNull9 ? null : (java.math.BigDecimal) value10.toJavaBigDecimal();
/* 195 */     isNull9 = value9 == null;
/* 196 */     if (isNull9) {
/* 197 */       values[4] = null;
/* 198 */     } else {
/* 199 */       values[4] = value9;
/* 200 */     }
/* 201 */
/* 202 */     boolean isNull12 = i.isNullAt(5);
/* 203 */     Decimal value12 = isNull12 ? null : (i.getDecimal(5, 38, 0));
/* 204 */
/* 205 */     boolean isNull11 = isNull12;
/* 206 */     final java.math.BigDecimal value11 = isNull11 ? null : (java.math.BigDecimal) value12.toJavaBigDecimal();
/* 207 */     isNull11 = value11 == null;
/* 208 */     if (isNull11) {
/* 209 */       values[5] = null;
/* 210 */     } else {
/* 211 */       values[5] = value11;
/* 212 */     }
/* 213 */
/* 214 */   }
/* 215 */
/* 216 */
/* 217 */   private void apply_21(InternalRow i) {
/* 218 */
/* 219 */     boolean isNull128 = i.isNullAt(63);
/* 220 */     UTF8String value128 = isNull128 ? null : (i.getUTF8String(63));
/* 221 */
/* 222 */     boolean isNull127 = isNull128;
/* 223 */     final java.lang.String value127 = isNull127 ? null : (java.lang.String) value128.toString();
/* 224 */     isNull127 = value127 == null;
/* 225 */     if (isNull127) {
/* 226 */       values[63] = null;
/* 227 */     } else {
/* 228 */       values[63] = value127;
/* 229 */     }
/* 230 */
/* 231 */     boolean isNull130 = i.isNullAt(64);
/* 232 */     Decimal value130 = isNull130 ? null : (i.getDecimal(64, 38, 0));
/* 233 */
/* 234 */     boolean isNull129 = isNull130;
/* 235 */     final java.math.BigDecimal value129 = isNull129 ? null : (java.math.BigDecimal) value130.toJavaBigDecimal();
/* 236 */     isNull129 = value129 == null;
/* 237 */     if (isNull129) {
/* 238 */       values[64] = null;
/* 239 */     } else {
/* 240 */       values[64] = value129;
/* 241 */     }
/* 242 */
/* 243 */     boolean isNull132 = i.isNullAt(65);
/* 244 */     Decimal value132 = isNull132 ? null : (i.getDecimal(65, 38, 0));
/* 245 */
/* 246 */     boolean isNull131 = isNull132;
/* 247 */     final java.math.BigDecimal value131 = isNull131 ? null : (java.math.BigDecimal) value132.toJavaBigDecimal();
/* 248 */     isNull131 = value131 == null;
/* 249 */     if (isNull131) {
/* 250 */       values[65] = null;
/* 251 */     } else {
/* 252 */       values[65] = value131;
/* 253 */     }
/* 254 */
/* 255 */   }
/* 256 */
/* 257 */
/* 258 */   private void apply_18(InternalRow i) {
/* 259 */
/* 260 */     boolean isNull110 = i.isNullAt(54);
/* 261 */     UTF8String value110 = isNull110 ? null : (i.getUTF8String(54));
/* 262 */
/* 263 */     boolean isNull109 = isNull110;
/* 264 */     final java.lang.String value109 = isNull109 ? null : (java.lang.String) value110.toString();
/* 265 */     isNull109 = value109 == null;
/* 266 */     if (isNull109) {
/* 267 */       values[54] = null;
/* 268 */     } else {
/* 269 */       values[54] = value109;
/* 270 */     }
/* 271 */
/* 272 */     boolean isNull112 = i.isNullAt(55);
/* 273 */     Decimal value112 = isNull112 ? null : (i.getDecimal(55, 38, 0));
/* 274 */
/* 275 */     boolean isNull111 = isNull112;
/* 276 */     final java.math.BigDecimal value111 = isNull111 ? null : (java.math.BigDecimal) value112.toJavaBigDecimal();
/* 277 */     isNull111 = value111 == null;
/* 278 */     if (isNull111) {
/* 279 */       values[55] = null;
/* 280 */     } else {
/* 281 */       values[55] = value111;
/* 282 */     }
/* 283 */
/* 284 */     boolean isNull114 = i.isNullAt(56);
/* 285 */     Decimal value114 = isNull114 ? null : (i.getDecimal(56, 38, 0));
/* 286 */
/* 287 */     boolean isNull113 = isNull114;
/* 288 */     final java.math.BigDecimal value113 = isNull113 ? null : (java.math.BigDecimal) value114.toJavaBigDecimal();
/* 289 */     isNull113 = value113 == null;
/* 290 */     if (isNull113) {
/* 291 */       values[56] = null;
/* 292 */     } else {
/* 293 */       values[56] = value113;
/* 294 */     }
/* 295 */
/* 296 */   }
/* 297 */
/* 298 */
/* 299 */   private void apply_24(InternalRow i) {
/* 300 */
/* 301 */     boolean isNull146 = i.isNullAt(72);
/* 302 */     long value146 = isNull146 ? -1L : (i.getLong(72));
/* 303 */     boolean isNull145 = isNull146;
/* 304 */     final java.sql.Timestamp value145 = isNull145 ? null : org.apache.spark.sql.catalyst.util.DateTimeUtils.toJavaTimestamp(value146);
/* 305 */     isNull145 = value145 == null;
/* 306 */     if (isNull145) {
/* 307 */       values[72] = null;
/* 308 */     } else {
/* 309 */       values[72] = value145;
/* 310 */     }
/* 311 */
/* 312 */     boolean isNull148 = i.isNullAt(73);
/* 313 */     long value148 = isNull148 ? -1L : (i.getLong(73));
/* 314 */     boolean isNull147 = isNull148;
/* 315 */     final java.sql.Timestamp value147 = isNull147 ? null : org.apache.spark.sql.catalyst.util.DateTimeUtils.toJavaTimestamp(value148);
/* 316 */     isNull147 = value147 == null;
/* 317 */     if (isNull147) {
/* 318 */       values[73] = null;
/* 319 */     } else {
/* 320 */       values[73] = value147;
/* 321 */     }
/* 322 */
/* 323 */     boolean isNull150 = i.isNullAt(74);
/* 324 */     UTF8String value150 = isNull150 ? null : (i.getUTF8String(74));
/* 325 */
/* 326 */     boolean isNull149 = isNull150;
/* 327 */     final java.lang.String value149 = isNull149 ? null : (java.lang.String) value150.toString();
/* 328 */     isNull149 = value149 == null;
/* 329 */     if (isNull149) {
/* 330 */       values[74] = null;
/* 331 */     } else {
/* 332 */       values[74] = value149;
/* 333 */     }
/* 334 */
/* 335 */   }
/* 336 */
/* 337 */
/* 338 */   private void apply_12(InternalRow i) {
/* 339 */
/* 340 */     boolean isNull74 = i.isNullAt(36);
/* 341 */     UTF8String value74 = isNull74 ? null : (i.getUTF8String(36));
/* 342 */
/* 343 */     boolean isNull73 = isNull74;
/* 344 */     final java.lang.String value73 = isNull73 ? null : (java.lang.String) value74.toString();
/* 345 */     isNull73 = value73 == null;
/* 346 */     if (isNull73) {
/* 347 */       values[36] = null;
/* 348 */     } else {
/* 349 */       values[36] = value73;
/* 350 */     }
/* 351 */
/* 352 */     boolean isNull76 = i.isNullAt(37);
/* 353 */     Decimal value76 = isNull76 ? null : (i.getDecimal(37, 38, 0));
/* 354 */
/* 355 */     boolean isNull75 = isNull76;
/* 356 */     final java.math.BigDecimal value75 = isNull75 ? null : (java.math.BigDecimal) value76.toJavaBigDecimal();
/* 357 */     isNull75 = value75 == null;
/* 358 */     if (isNull75) {
/* 359 */       values[37] = null;
/* 360 */     } else {
/* 361 */       values[37] = value75;
/* 362 */     }
/* 363 */
/* 364 */     boolean isNull78 = i.isNullAt(38);
/* 365 */     Decimal value78 = isNull78 ? null : (i.getDecimal(38, 38, 0));
/* 366 */
/* 367 */     boolean isNull77 = isNull78;
/* 368 */     final java.math.BigDecimal value77 = isNull77 ? null : (java.math.BigDecimal) value78.toJavaBigDecimal();
/* 369 */     isNull77 = value77 == null;
/* 370 */     if (isNull77) {
/* 371 */       values[38] = null;
/* 372 */     } else {
/* 373 */       values[38] = value77;
/* 374 */     }
/* 375 */
/* 376 */   }
/* 377 */
/* 378 */
/* 379 */   private void apply_9(InternalRow i) {
/* 380 */
/* 381 */     boolean isNull56 = i.isNullAt(27);
/* 382 */     UTF8String value56 = isNull56 ? null : (i.getUTF8String(27));
/* 383 */
/* 384 */     boolean isNull55 = isNull56;
/* 385 */     final java.lang.String value55 = isNull55 ? null : (java.lang.String) value56.toString();
/* 386 */     isNull55 = value55 == null;
/* 387 */     if (isNull55) {
/* 388 */       values[27] = null;
/* 389 */     } else {
/* 390 */       values[27] = value55;
/* 391 */     }
/* 392 */
/* 393 */     boolean isNull58 = i.isNullAt(28);
/* 394 */     Decimal value58 = isNull58 ? null : (i.getDecimal(28, 38, 0));
/* 395 */
/* 396 */     boolean isNull57 = isNull58;
/* 397 */     final java.math.BigDecimal value57 = isNull57 ? null : (java.math.BigDecimal) value58.toJavaBigDecimal();
/* 398 */     isNull57 = value57 == null;
/* 399 */     if (isNull57) {
/* 400 */       values[28] = null;
/* 401 */     } else {
/* 402 */       values[28] = value57;
/* 403 */     }
/* 404 */
/* 405 */     boolean isNull60 = i.isNullAt(29);
/* 406 */     Decimal value60 = isNull60 ? null : (i.getDecimal(29, 38, 0));
/* 407 */
/* 408 */     boolean isNull59 = isNull60;
/* 409 */     final java.math.BigDecimal value59 = isNull59 ? null : (java.math.BigDecimal) value60.toJavaBigDecimal();
/* 410 */     isNull59 = value59 == null;
/* 411 */     if (isNull59) {
/* 412 */       values[29] = null;
/* 413 */     } else {
/* 414 */       values[29] = value59;
/* 415 */     }
/* 416 */
/* 417 */   }
/* 418 */
/* 419 */
/* 420 */   private void apply_15(InternalRow i) {
/* 421 */
/* 422 */     boolean isNull92 = i.isNullAt(45);
/* 423 */     UTF8String value92 = isNull92 ? null : (i.getUTF8String(45));
/* 424 */
/* 425 */     boolean isNull91 = isNull92;
/* 426 */     final java.lang.String value91 = isNull91 ? null : (java.lang.String) value92.toString();
/* 427 */     isNull91 = value91 == null;
/* 428 */     if (isNull91) {
/* 429 */       values[45] = null;
/* 430 */     } else {
/* 431 */       values[45] = value91;
/* 432 */     }
/* 433 */
/* 434 */     boolean isNull94 = i.isNullAt(46);
/* 435 */     Decimal value94 = isNull94 ? null : (i.getDecimal(46, 38, 0));
/* 436 */
/* 437 */     boolean isNull93 = isNull94;
/* 438 */     final java.math.BigDecimal value93 = isNull93 ? null : (java.math.BigDecimal) value94.toJavaBigDecimal();
/* 439 */     isNull93 = value93 == null;
/* 440 */     if (isNull93) {
/* 441 */       values[46] = null;
/* 442 */     } else {
/* 443 */       values[46] = value93;
/* 444 */     }
/* 445 */
/* 446 */     boolean isNull96 = i.isNullAt(47);
/* 447 */     Decimal value96 = isNull96 ? null : (i.getDecimal(47, 38, 0));
/* 448 */
/* 449 */     boolean isNull95 = isNull96;
/* 450 */     final java.math.BigDecimal value95 = isNull95 ? null : (java.math.BigDecimal) value96.toJavaBigDecimal();
/* 451 */     isNull95 = value95 == null;
/* 452 */     if (isNull95) {
/* 453 */       values[47] = null;
/* 454 */     } else {
/* 455 */       values[47] = value95;
/* 456 */     }
/* 457 */
/* 458 */   }
/* 459 */
/* 460 */
/* 461 */   private void apply_3(InternalRow i) {
/* 462 */
/* 463 */     boolean isNull20 = i.isNullAt(9);
/* 464 */     UTF8String value20 = isNull20 ? null : (i.getUTF8String(9));
/* 465 */
/* 466 */     boolean isNull19 = isNull20;
/* 467 */     final java.lang.String value19 = isNull19 ? null : (java.lang.String) value20.toString();
/* 468 */     isNull19 = value19 == null;
/* 469 */     if (isNull19) {
/* 470 */       values[9] = null;
/* 471 */     } else {
/* 472 */       values[9] = value19;
/* 473 */     }
/* 474 */
/* 475 */     boolean isNull22 = i.isNullAt(10);
/* 476 */     Decimal value22 = isNull22 ? null : (i.getDecimal(10, 38, 0));
/* 477 */
/* 478 */     boolean isNull21 = isNull22;
/* 479 */     final java.math.BigDecimal value21 = isNull21 ? null : (java.math.BigDecimal) value22.toJavaBigDecimal();
/* 480 */     isNull21 = value21 == null;
/* 481 */     if (isNull21) {
/* 482 */       values[10] = null;
/* 483 */     } else {
/* 484 */       values[10] = value21;
/* 485 */     }
/* 486 */
/* 487 */     boolean isNull24 = i.isNullAt(11);
/* 488 */     Decimal value24 = isNull24 ? null : (i.getDecimal(11, 38, 0));
/* 489 */
/* 490 */     boolean isNull23 = isNull24;
/* 491 */     final java.math.BigDecimal value23 = isNull23 ? null : (java.math.BigDecimal) value24.toJavaBigDecimal();
/* 492 */     isNull23 = value23 == null;
/* 493 */     if (isNull23) {
/* 494 */       values[11] = null;
/* 495 */     } else {
/* 496 */       values[11] = value23;
/* 497 */     }
/* 498 */
/* 499 */   }
/* 500 */
/* 501 */
/* 502 */   private void apply_6(InternalRow i) {
/* 503 */
/* 504 */     boolean isNull38 = i.isNullAt(18);
/* 505 */     UTF8String value38 = isNull38 ? null : (i.getUTF8String(18));
/* 506 */
/* 507 */     boolean isNull37 = isNull38;
/* 508 */     final java.lang.String value37 = isNull37 ? null : (java.lang.String) value38.toString();
/* 509 */     isNull37 = value37 == null;
/* 510 */     if (isNull37) {
/* 511 */       values[18] = null;
/* 512 */     } else {
/* 513 */       values[18] = value37;
/* 514 */     }
/* 515 */
/* 516 */     boolean isNull40 = i.isNullAt(19);
/* 517 */     Decimal value40 = isNull40 ? null : (i.getDecimal(19, 38, 0));
/* 518 */
/* 519 */     boolean isNull39 = isNull40;
/* 520 */     final java.math.BigDecimal value39 = isNull39 ? null : (java.math.BigDecimal) value40.toJavaBigDecimal();
/* 521 */     isNull39 = value39 == null;
/* 522 */     if (isNull39) {
/* 523 */       values[19] = null;
/* 524 */     } else {
/* 525 */       values[19] = value39;
/* 526 */     }
/* 527 */
/* 528 */     boolean isNull42 = i.isNullAt(20);
/* 529 */     Decimal value42 = isNull42 ? null : (i.getDecimal(20, 38, 0));
/* 530 */
/* 531 */     boolean isNull41 = isNull42;
/* 532 */     final java.math.BigDecimal value41 = isNull41 ? null : (java.math.BigDecimal) value42.toJavaBigDecimal();
/* 533 */     isNull41 = value41 == null;
/* 534 */     if (isNull41) {
/* 535 */       values[20] = null;
/* 536 */     } else {
/* 537 */       values[20] = value41;
/* 538 */     }
/* 539 */
/* 540 */   }
/* 541 */
/* 542 */
/* 543 */   private void apply_14(InternalRow i) {
/* 544 */
/* 545 */     boolean isNull86 = i.isNullAt(42);
/* 546 */     UTF8String value86 = isNull86 ? null : (i.getUTF8String(42));
/* 547 */
/* 548 */     boolean isNull85 = isNull86;
/* 549 */     final java.lang.String value85 = isNull85 ? null : (java.lang.String) value86.toString();
/* 550 */     isNull85 = value85 == null;
/* 551 */     if (isNull85) {
/* 552 */       values[42] = null;
/* 553 */     } else {
/* 554 */       values[42] = value85;
/* 555 */     }
/* 556 */
/* 557 */     boolean isNull88 = i.isNullAt(43);
/* 558 */     UTF8String value88 = isNull88 ? null : (i.getUTF8String(43));
/* 559 */
/* 560 */     boolean isNull87 = isNull88;
/* 561 */     final java.lang.String value87 = isNull87 ? null : (java.lang.String) value88.toString();
/* 562 */     isNull87 = value87 == null;
/* 563 */     if (isNull87) {
/* 564 */       values[43] = null;
/* 565 */     } else {
/* 566 */       values[43] = value87;
/* 567 */     }
/* 568 */
/* 569 */     boolean isNull90 = i.isNullAt(44);
/* 570 */     UTF8String value90 = isNull90 ? null : (i.getUTF8String(44));
/* 571 */
/* 572 */     boolean isNull89 = isNull90;
/* 573 */     final java.lang.String value89 = isNull89 ? null : (java.lang.String) value90.toString();
/* 574 */     isNull89 = value89 == null;
/* 575 */     if (isNull89) {
/* 576 */       values[44] = null;
/* 577 */     } else {
/* 578 */       values[44] = value89;
/* 579 */     }
/* 580 */
/* 581 */   }
/* 582 */
/* 583 */
/* 584 */   private void apply_0(InternalRow i) {
/* 585 */
/* 586 */     boolean isNull2 = i.isNullAt(0);
/* 587 */     Decimal value2 = isNull2 ? null : (i.getDecimal(0, 38, 0));
/* 588 */
/* 589 */     boolean isNull1 = isNull2;
/* 590 */     final java.math.BigDecimal value1 = isNull1 ? null : (java.math.BigDecimal) value2.toJavaBigDecimal();
/* 591 */     isNull1 = value1 == null;
/* 592 */     if (isNull1) {
/* 593 */       values[0] = null;
/* 594 */     } else {
/* 595 */       values[0] = value1;
/* 596 */     }
/* 597 */
/* 598 */     boolean isNull4 = i.isNullAt(1);
/* 599 */     UTF8String value4 = isNull4 ? null : (i.getUTF8String(1));
/* 600 */
/* 601 */     boolean isNull3 = isNull4;
/* 602 */     final java.lang.String value3 = isNull3 ? null : (java.lang.String) value4.toString();
/* 603 */     isNull3 = value3 == null;
/* 604 */     if (isNull3) {
/* 605 */       values[1] = null;
/* 606 */     } else {
/* 607 */       values[1] = value3;
/* 608 */     }
/* 609 */
/* 610 */     boolean isNull6 = i.isNullAt(2);
/* 611 */     Decimal value6 = isNull6 ? null : (i.getDecimal(2, 38, 0));
/* 612 */
/* 613 */     boolean isNull5 = isNull6;
/* 614 */     final java.math.BigDecimal value5 = isNull5 ? null : (java.math.BigDecimal) value6.toJavaBigDecimal();
/* 615 */     isNull5 = value5 == null;
/* 616 */     if (isNull5) {
/* 617 */       values[2] = null;
/* 618 */     } else {
/* 619 */       values[2] = value5;
/* 620 */     }
/* 621 */
/* 622 */   }
/* 623 */
/* 624 */
/* 625 */   private void apply_20(InternalRow i) {
/* 626 */
/* 627 */     boolean isNull122 = i.isNullAt(60);
/* 628 */     UTF8String value122 = isNull122 ? null : (i.getUTF8String(60));
/* 629 */
/* 630 */     boolean isNull121 = isNull122;
/* 631 */     final java.lang.String value121 = isNull121 ? null : (java.lang.String) value122.toString();
/* 632 */     isNull121 = value121 == null;
/* 633 */     if (isNull121) {
/* 634 */       values[60] = null;
/* 635 */     } else {
/* 636 */       values[60] = value121;
/* 637 */     }
/* 638 */
/* 639 */     boolean isNull124 = i.isNullAt(61);
/* 640 */     UTF8String value124 = isNull124 ? null : (i.getUTF8String(61));
/* 641 */
/* 642 */     boolean isNull123 = isNull124;
/* 643 */     final java.lang.String value123 = isNull123 ? null : (java.lang.String) value124.toString();
/* 644 */     isNull123 = value123 == null;
/* 645 */     if (isNull123) {
/* 646 */       values[61] = null;
/* 647 */     } else {
/* 648 */       values[61] = value123;
/* 649 */     }
/* 650 */
/* 651 */     boolean isNull126 = i.isNullAt(62);
/* 652 */     UTF8String value126 = isNull126 ? null : (i.getUTF8String(62));
/* 653 */
/* 654 */     boolean isNull125 = isNull126;
/* 655 */     final java.lang.String value125 = isNull125 ? null : (java.lang.String) value126.toString();
/* 656 */     isNull125 = value125 == null;
/* 657 */     if (isNull125) {
/* 658 */       values[62] = null;
/* 659 */     } else {
/* 660 */       values[62] = value125;
/* 661 */     }
/* 662 */
/* 663 */   }
/* 664 */
/* 665 */
/* 666 */   private void apply_23(InternalRow i) {
/* 667 */
/* 668 */     boolean isNull140 = i.isNullAt(69);
/* 669 */     UTF8String value140 = isNull140 ? null : (i.getUTF8String(69));
/* 670 */
/* 671 */     boolean isNull139 = isNull140;
/* 672 */     final java.lang.String value139 = isNull139 ? null : (java.lang.String) value140.toString();
/* 673 */     isNull139 = value139 == null;
/* 674 */     if (isNull139) {
/* 675 */       values[69] = null;
/* 676 */     } else {
/* 677 */       values[69] = value139;
/* 678 */     }
/* 679 */
/* 680 */     boolean isNull142 = i.isNullAt(70);
/* 681 */     UTF8String value142 = isNull142 ? null : (i.getUTF8String(70));
/* 682 */
/* 683 */     boolean isNull141 = isNull142;
/* 684 */     final java.lang.String value141 = isNull141 ? null : (java.lang.String) value142.toString();
/* 685 */     isNull141 = value141 == null;
/* 686 */     if (isNull141) {
/* 687 */       values[70] = null;
/* 688 */     } else {
/* 689 */       values[70] = value141;
/* 690 */     }
/* 691 */
/* 692 */     boolean isNull144 = i.isNullAt(71);
/* 693 */     UTF8String value144 = isNull144 ? null : (i.getUTF8String(71));
/* 694 */
/* 695 */     boolean isNull143 = isNull144;
/* 696 */     final java.lang.String value143 = isNull143 ? null : (java.lang.String) value144.toString();
/* 697 */     isNull143 = value143 == null;
/* 698 */     if (isNull143) {
/* 699 */       values[71] = null;
/* 700 */     } else {
/* 701 */       values[71] = value143;
/* 702 */     }
/* 703 */
/* 704 */   }
/* 705 */
/* 706 */
/* 707 */   private void apply_17(InternalRow i) {
/* 708 */
/* 709 */     boolean isNull104 = i.isNullAt(51);
/* 710 */     UTF8String value104 = isNull104 ? null : (i.getUTF8String(51));
/* 711 */
/* 712 */     boolean isNull103 = isNull104;
/* 713 */     final java.lang.String value103 = isNull103 ? null : (java.lang.String) value104.toString();
/* 714 */     isNull103 = value103 == null;
/* 715 */     if (isNull103) {
/* 716 */       values[51] = null;
/* 717 */     } else {
/* 718 */       values[51] = value103;
/* 719 */     }
/* 720 */
/* 721 */     boolean isNull106 = i.isNullAt(52);
/* 722 */     UTF8String value106 = isNull106 ? null : (i.getUTF8String(52));
/* 723 */
/* 724 */     boolean isNull105 = isNull106;
/* 725 */     final java.lang.String value105 = isNull105 ? null : (java.lang.String) value106.toString();
/* 726 */     isNull105 = value105 == null;
/* 727 */     if (isNull105) {
/* 728 */       values[52] = null;
/* 729 */     } else {
/* 730 */       values[52] = value105;
/* 731 */     }
/* 732 */
/* 733 */     boolean isNull108 = i.isNullAt(53);
/* 734 */     Decimal value108 = isNull108 ? null : (i.getDecimal(53, 38, 0));
/* 735 */
/* 736 */     boolean isNull107 = isNull108;
/* 737 */     final java.math.BigDecimal value107 = isNull107 ? null : (java.math.BigDecimal) value108.toJavaBigDecimal();
/* 738 */     isNull107 = value107 == null;
/* 739 */     if (isNull107) {
/* 740 */       values[53] = null;
/* 741 */     } else {
/* 742 */       values[53] = value107;
/* 743 */     }
/* 744 */
/* 745 */   }
/* 746 */
/* 747 */
/* 748 */   private void apply_11(InternalRow i) {
/* 749 */
/* 750 */     boolean isNull68 = i.isNullAt(33);
/* 751 */     UTF8String value68 = isNull68 ? null : (i.getUTF8String(33));
/* 752 */
/* 753 */     boolean isNull67 = isNull68;
/* 754 */     final java.lang.String value67 = isNull67 ? null : (java.lang.String) value68.toString();
/* 755 */     isNull67 = value67 == null;
/* 756 */     if (isNull67) {
/* 757 */       values[33] = null;
/* 758 */     } else {
/* 759 */       values[33] = value67;
/* 760 */     }
/* 761 */
/* 762 */     boolean isNull70 = i.isNullAt(34);
/* 763 */     UTF8String value70 = isNull70 ? null : (i.getUTF8String(34));
/* 764 */
/* 765 */     boolean isNull69 = isNull70;
/* 766 */     final java.lang.String value69 = isNull69 ? null : (java.lang.String) value70.toString();
/* 767 */     isNull69 = value69 == null;
/* 768 */     if (isNull69) {
/* 769 */       values[34] = null;
/* 770 */     } else {
/* 771 */       values[34] = value69;
/* 772 */     }
/* 773 */
/* 774 */     boolean isNull72 = i.isNullAt(35);
/* 775 */     Decimal value72 = isNull72 ? null : (i.getDecimal(35, 38, 0));
/* 776 */
/* 777 */     boolean isNull71 = isNull72;
/* 778 */     final java.math.BigDecimal value71 = isNull71 ? null : (java.math.BigDecimal) value72.toJavaBigDecimal();
/* 779 */     isNull71 = value71 == null;
/* 780 */     if (isNull71) {
/* 781 */       values[35] = null;
/* 782 */     } else {
/* 783 */       values[35] = value71;
/* 784 */     }
/* 785 */
/* 786 */   }
/* 787 */
/* 788 */
/* 789 */   private void apply_8(InternalRow i) {
/* 790 */
/* 791 */     boolean isNull50 = i.isNullAt(24);
/* 792 */     UTF8String value50 = isNull50 ? null : (i.getUTF8String(24));
/* 793 */
/* 794 */     boolean isNull49 = isNull50;
/* 795 */     final java.lang.String value49 = isNull49 ? null : (java.lang.String) value50.toString();
/* 796 */     isNull49 = value49 == null;
/* 797 */     if (isNull49) {
/* 798 */       values[24] = null;
/* 799 */     } else {
/* 800 */       values[24] = value49;
/* 801 */     }
/* 802 */
/* 803 */     boolean isNull52 = i.isNullAt(25);
/* 804 */     UTF8String value52 = isNull52 ? null : (i.getUTF8String(25));
/* 805 */
/* 806 */     boolean isNull51 = isNull52;
/* 807 */     final java.lang.String value51 = isNull51 ? null : (java.lang.String) value52.toString();
/* 808 */     isNull51 = value51 == null;
/* 809 */     if (isNull51) {
/* 810 */       values[25] = null;
/* 811 */     } else {
/* 812 */       values[25] = value51;
/* 813 */     }
/* 814 */
/* 815 */     boolean isNull54 = i.isNullAt(26);
/* 816 */     UTF8String value54 = isNull54 ? null : (i.getUTF8String(26));
/* 817 */
/* 818 */     boolean isNull53 = isNull54;
/* 819 */     final java.lang.String value53 = isNull53 ? null : (java.lang.String) value54.toString();
/* 820 */     isNull53 = value53 == null;
/* 821 */     if (isNull53) {
/* 822 */       values[26] = null;
/* 823 */     } else {
/* 824 */       values[26] = value53;
/* 825 */     }
/* 826 */
/* 827 */   }
/* 828 */
/* 829 */
/* 830 */   private void apply_2(InternalRow i) {
/* 831 */
/* 832 */     boolean isNull14 = i.isNullAt(6);
/* 833 */     Decimal value14 = isNull14 ? null : (i.getDecimal(6, 38, 0));
/* 834 */
/* 835 */     boolean isNull13 = isNull14;
/* 836 */     final java.math.BigDecimal value13 = isNull13 ? null : (java.math.BigDecimal) value14.toJavaBigDecimal();
/* 837 */     isNull13 = value13 == null;
/* 838 */     if (isNull13) {
/* 839 */       values[6] = null;
/* 840 */     } else {
/* 841 */       values[6] = value13;
/* 842 */     }
/* 843 */
/* 844 */     boolean isNull16 = i.isNullAt(7);
/* 845 */     UTF8String value16 = isNull16 ? null : (i.getUTF8String(7));
/* 846 */
/* 847 */     boolean isNull15 = isNull16;
/* 848 */     final java.lang.String value15 = isNull15 ? null : (java.lang.String) value16.toString();
/* 849 */     isNull15 = value15 == null;
/* 850 */     if (isNull15) {
/* 851 */       values[7] = null;
/* 852 */     } else {
/* 853 */       values[7] = value15;
/* 854 */     }
/* 855 */
/* 856 */     boolean isNull18 = i.isNullAt(8);
/* 857 */     UTF8String value18 = isNull18 ? null : (i.getUTF8String(8));
/* 858 */
/* 859 */     boolean isNull17 = isNull18;
/* 860 */     final java.lang.String value17 = isNull17 ? null : (java.lang.String) value18.toString();
/* 861 */     isNull17 = value17 == null;
/* 862 */     if (isNull17) {
/* 863 */       values[8] = null;
/* 864 */     } else {
/* 865 */       values[8] = value17;
/* 866 */     }
/* 867 */
/* 868 */   }
/* 869 */
/* 870 */
/* 871 */   private void apply_5(InternalRow i) {
/* 872 */
/* 873 */     boolean isNull32 = i.isNullAt(15);
/* 874 */     UTF8String value32 = isNull32 ? null : (i.getUTF8String(15));
/* 875 */
/* 876 */     boolean isNull31 = isNull32;
/* 877 */     final java.lang.String value31 = isNull31 ? null : (java.lang.String) value32.toString();
/* 878 */     isNull31 = value31 == null;
/* 879 */     if (isNull31) {
/* 880 */       values[15] = null;
/* 881 */     } else {
/* 882 */       values[15] = value31;
/* 883 */     }
/* 884 */
/* 885 */     boolean isNull34 = i.isNullAt(16);
/* 886 */     UTF8String value34 = isNull34 ? null : (i.getUTF8String(16));
/* 887 */
/* 888 */     boolean isNull33 = isNull34;
/* 889 */     final java.lang.String value33 = isNull33 ? null : (java.lang.String) value34.toString();
/* 890 */     isNull33 = value33 == null;
/* 891 */     if (isNull33) {
/* 892 */       values[16] = null;
/* 893 */     } else {
/* 894 */       values[16] = value33;
/* 895 */     }
/* 896 */
/* 897 */     boolean isNull36 = i.isNullAt(17);
/* 898 */     Decimal value36 = isNull36 ? null : (i.getDecimal(17, 38, 0));
/* 899 */
/* 900 */     boolean isNull35 = isNull36;
/* 901 */     final java.math.BigDecimal value35 = isNull35 ? null : (java.math.BigDecimal) value36.toJavaBigDecimal();
/* 902 */     isNull35 = value35 == null;
/* 903 */     if (isNull35) {
/* 904 */       values[17] = null;
/* 905 */     } else {
/* 906 */       values[17] = value35;
/* 907 */     }
/* 908 */
/* 909 */   }
/* 910 */
/* 911 */
/* 912 */   private void apply_25(InternalRow i) {
/* 913 */
/* 914 */     boolean isNull152 = i.isNullAt(75);
/* 915 */     UTF8String value152 = isNull152 ? null : (i.getUTF8String(75));
/* 916 */
/* 917 */     boolean isNull151 = isNull152;
/* 918 */     final java.lang.String value151 = isNull151 ? null : (java.lang.String) value152.toString();
/* 919 */     isNull151 = value151 == null;
/* 920 */     if (isNull151) {
/* 921 */       values[75] = null;
/* 922 */     } else {
/* 923 */       values[75] = value151;
/* 924 */     }
/* 925 */
/* 926 */   }
/* 927 */
/* 928 */
/* 929 */   private void apply_10(InternalRow i) {
/* 930 */
/* 931 */     boolean isNull62 = i.isNullAt(30);
/* 932 */     Decimal value62 = isNull62 ? null : (i.getDecimal(30, 38, 0));
/* 933 */
/* 934 */     boolean isNull61 = isNull62;
/* 935 */     final java.math.BigDecimal value61 = isNull61 ? null : (java.math.BigDecimal) value62.toJavaBigDecimal();
/* 936 */     isNull61 = value61 == null;
/* 937 */     if (isNull61) {
/* 938 */       values[30] = null;
/* 939 */     } else {
/* 940 */       values[30] = value61;
/* 941 */     }
/* 942 */
/* 943 */     boolean isNull64 = i.isNullAt(31);
/* 944 */     UTF8String value64 = isNull64 ? null : (i.getUTF8String(31));
/* 945 */
/* 946 */     boolean isNull63 = isNull64;
/* 947 */     final java.lang.String value63 = isNull63 ? null : (java.lang.String) value64.toString();
/* 948 */     isNull63 = value63 == null;
/* 949 */     if (isNull63) {
/* 950 */       values[31] = null;
/* 951 */     } else {
/* 952 */       values[31] = value63;
/* 953 */     }
/* 954 */
/* 955 */     boolean isNull66 = i.isNullAt(32);
/* 956 */     UTF8String value66 = isNull66 ? null : (i.getUTF8String(32));
/* 957 */
/* 958 */     boolean isNull65 = isNull66;
/* 959 */     final java.lang.String value65 = isNull65 ? null : (java.lang.String) value66.toString();
/* 960 */     isNull65 = value65 == null;
/* 961 */     if (isNull65) {
/* 962 */       values[32] = null;
/* 963 */     } else {
/* 964 */       values[32] = value65;
/* 965 */     }
/* 966 */
/* 967 */   }
/* 968 */
/* 969 */
/* 970 */   private void apply_19(InternalRow i) {
/* 971 */
/* 972 */     boolean isNull116 = i.isNullAt(57);
/* 973 */     Decimal value116 = isNull116 ? null : (i.getDecimal(57, 38, 0));
/* 974 */
/* 975 */     boolean isNull115 = isNull116;
/* 976 */     final java.math.BigDecimal value115 = isNull115 ? null : (java.math.BigDecimal) value116.toJavaBigDecimal();
/* 977 */     isNull115 = value115 == null;
/* 978 */     if (isNull115) {
/* 979 */       values[57] = null;
/* 980 */     } else {
/* 981 */       values[57] = value115;
/* 982 */     }
/* 983 */
/* 984 */     boolean isNull118 = i.isNullAt(58);
/* 985 */     Decimal value118 = isNull118 ? null : (i.getDecimal(58, 38, 0));
/* 986 */
/* 987 */     boolean isNull117 = isNull118;
/* 988 */     final java.math.BigDecimal value117 = isNull117 ? null : (java.math.BigDecimal) value118.toJavaBigDecimal();
/* 989 */     isNull117 = value117 == null;
/* 990 */     if (isNull117) {
/* 991 */       values[58] = null;
/* 992 */     } else {
/* 993 */       values[58] = value117;
/* 994 */     }
/* 995 */
/* 996 */     boolean isNull120 = i.isNullAt(59);
/* 997 */     Decimal value120 = isNull120 ? null : (i.getDecimal(59, 38, 0));
/* 998 */
/* 999 */     boolean isNull119 = isNull120;
/* 1000 */     final java.math.BigDecimal value119 = isNull119 ? null : (java.math.BigDecimal) value120.toJavaBigDecimal();
/* 1001 */     isNull119 = value119 == null;
/* 1002 */     if (isNull119) {
/* 1003 */       values[59] = null;
/* 1004 */     } else {
/* 1005 */       values[59] = value119;
/* 1006 */     }
/* 1007 */
/* 1008 */   }
/* 1009 */
/* 1010 */
/* 1011 */   private void apply_13(InternalRow i) {
/* 1012 */
/* 1013 */     boolean isNull80 = i.isNullAt(39);
/* 1014 */     Decimal value80 = isNull80 ? null : (i.getDecimal(39, 38, 0));
/* 1015 */
/* 1016 */     boolean isNull79 = isNull80;
/* 1017 */     final java.math.BigDecimal value79 = isNull79 ? null : (java.math.BigDecimal) value80.toJavaBigDecimal();
/* 1018 */     isNull79 = value79 == null;
/* 1019 */     if (isNull79) {
/* 1020 */       values[39] = null;
/* 1021 */     } else {
/* 1022 */       values[39] = value79;
/* 1023 */     }
/* 1024 */
/* 1025 */     boolean isNull82 = i.isNullAt(40);
/* 1026 */     Decimal value82 = isNull82 ? null : (i.getDecimal(40, 38, 0));
/* 1027 */
/* 1028 */     boolean isNull81 = isNull82;
/* 1029 */     final java.math.BigDecimal value81 = isNull81 ? null : (java.math.BigDecimal) value82.toJavaBigDecimal();
/* 1030 */     isNull81 = value81 == null;
/* 1031 */     if (isNull81) {
/* 1032 */       values[40] = null;
/* 1033 */     } else {
/* 1034 */       values[40] = value81;
/* 1035 */     }
/* 1036 */
/* 1037 */     boolean isNull84 = i.isNullAt(41);
/* 1038 */     Decimal value84 = isNull84 ? null : (i.getDecimal(41, 38, 0));
/* 1039 */
/* 1040 */     boolean isNull83 = isNull84;
/* 1041 */     final java.math.BigDecimal value83 = isNull83 ? null : (java.math.BigDecimal) value84.toJavaBigDecimal();
/* 1042 */     isNull83 = value83 == null;
/* 1043 */     if (isNull83) {
/* 1044 */       values[41] = null;
/* 1045 */     } else {
/* 1046 */       values[41] = value83;
/* 1047 */     }
/* 1048 */
/* 1049 */   }
/* 1050 */
/* 1051 */
/* 1052 */   public SpecificSafeProjection(Object[] references) {
/* 1053 */     this.references = references;
/* 1054 */     mutableRow = (MutableRow) references[references.length - 1];
/* 1055 */
/* 1056 */     this.schema = (org.apache.spark.sql.types.StructType) references[0];
/* 1057 */   }
/* 1058 */
/* 1059 */   public java.lang.Object apply(java.lang.Object _i) {
/* 1060 */     InternalRow i = (InternalRow) _i;
/* 1061 */
/* 1062 */     values = new Object[76];
/* 1063 */     apply_0(i);
/* 1064 */     apply_1(i);
/* 1065 */     apply_2(i);
/* 1066 */     apply_3(i);
/* 1067 */     apply_4(i);
/* 1068 */     apply_5(i);
/* 1069 */     apply_6(i);
/* 1070 */     apply_7(i);
/* 1071 */     apply_8(i);
/* 1072 */     apply_9(i);
/* 1073 */     apply_10(i);
/* 1074 */     apply_11(i);
/* 1075 */     apply_12(i);
/* 1076 */     apply_13(i);
/* 1077 */     apply_14(i);
/* 1078 */     apply_15(i);
/* 1079 */     apply_16(i);
/* 1080 */     apply_17(i);
/* 1081 */     apply_18(i);
/* 1082 */     apply_19(i);
/* 1083 */     apply_20(i);
/* 1084 */     apply_21(i);
/* 1085 */     apply_22(i);
/* 1086 */     apply_23(i);
/* 1087 */     apply_24(i);
/* 1088 */     apply_25(i);
/* 1089 */     final org.apache.spark.sql.Row value = new org.apache.spark.sql.catalyst.expressions.GenericRowWithSchema(values, schema);
/* 1090 */     if (false) {
/* 1091 */       mutableRow.setNullAt(0);
/* 1092 */     } else {
/* 1093 */
/* 1094 */       mutableRow.update(0, value);
/* 1095 */     }
/* 1096 */
/* 1097 */     return mutableRow;
/* 1098 */   }
/* 1099 */ }

17/11/03 09:02:33 DEBUG ContextCleaner: Got cleaning task CleanBroadcast(1)
17/11/03 09:02:33 DEBUG ContextCleaner: Cleaning broadcast 1
17/11/03 09:02:33 DEBUG TorrentBroadcast: Unpersisting TorrentBroadcast 1
17/11/03 09:02:33 DEBUG BlockManagerSlaveEndpoint: removing broadcast 1
17/11/03 09:02:33 DEBUG BlockManager: Removing broadcast 1
17/11/03 09:02:33 DEBUG BlockManager: Removing block broadcast_1
17/11/03 09:02:33 DEBUG MemoryStore: Block broadcast_1 of size 38504 dropped from memory (free 383654178)
17/11/03 09:02:33 DEBUG BlockManager: Removing block broadcast_1_piece0
17/11/03 09:02:33 DEBUG MemoryStore: Block broadcast_1_piece0 of size 12001 dropped from memory (free 383666179)
17/11/03 09:02:33 INFO BlockManagerInfo: Removed broadcast_1_piece0 on 172.30.1.247:49071 in memory (size: 11.7 KB, free: 366.3 MB)
17/11/03 09:02:33 DEBUG BlockManagerMaster: Updated info of block broadcast_1_piece0
17/11/03 09:02:33 DEBUG BlockManager: Told master about block broadcast_1_piece0
17/11/03 09:02:33 DEBUG BlockManagerSlaveEndpoint: Done removing broadcast 1, response is 0
17/11/03 09:02:33 DEBUG BlockManagerSlaveEndpoint: Sent response: 0 to 172.30.1.247:55570
17/11/03 09:02:33 INFO CodeGenerator: Code generated in 140.331032 ms
17/11/03 09:02:33 DEBUG ContextCleaner: Cleaned broadcast 1
17/11/03 09:02:33 DEBUG DFSClient: DFSClient writeChunk allocating new packet seqno=7, src=/spark2-history/local-1509699167113.inprogress, packetSize=65016, chunksPerPacket=126, bytesCurBlock=43520
17/11/03 09:02:33 DEBUG DFSClient: DFSClient flush(): bytesCurBlock=44133 lastFlushOffset=44021 createNewBlock=false
17/11/03 09:02:33 DEBUG DFSClient: Queued packet 7
17/11/03 09:02:33 DEBUG DFSClient: DataStreamer block BP-387439159-172.30.1.247-1493051499278:blk_1074042151_301380 sending packet packet seqno: 7 offsetInBlock: 43520 lastPacketInBlock: false lastByteOffsetInBlock: 44133
17/11/03 09:02:33 DEBUG DFSClient: Waiting for ack for: 7
17/11/03 09:02:33 DEBUG DFSClient: DFSClient seqno: 7 reply: SUCCESS reply: SUCCESS reply: SUCCESS downstreamAckTimeNanos: 710721 flag: 0 flag: 0 flag: 0
res3: Array[org.apache.spark.sql.Row] = Array([99952,AAAAAAAAAHGIBAAA,751340,4370,8153,2451505,2451475,Steven              ,Finley                        ,N,2,10,1955,TUNISIA,null,Steven.Finley@9.edu                               ,2452398   ,99999,AAAAAAAAPJGIBAAA,1641963,292,15421,2452000,2451970,Mr.       ,Rex                 ,Reyes                         ,N,9,7,1981,GREECE,null,Rex.Reyes@saLGsYab.org                            ,2452297   ,99999,AAAAAAAAPJGIBAAA,1641963,292,15421,2452000,2451970,Mr.       ,Rex                 ,Reyes                         ,N,9,7,1981,GREECE,null,Rex.Reyes@saLGsYab.org                            ,2452297   ,99999,AAAAAAAAPJGIBAAA,1641963,292,15421,2452000,2451970,Mr.       ,Rex                 ,Reyes                         ,N,9,7,1981,GREECE,null,Re...
scala> 
